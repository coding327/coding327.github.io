<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端构建工具Vite</title>
      <link href="/archives/615393e4.html"/>
      <url>/archives/615393e4.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <p>兼容性注意：<br><code>Vite</code>需要 <code>Node.js</code> 版本 <code>14.18+</code>，<code>16+</code>。然而，有些模板需要依赖更高的 <code>Node</code> 版本才能正常运行，当你的包管理器发出警告时，请注意升级你的 <code>Node</code> 版本。</p><h2 id="认识Vite"><a href="#认识Vite" class="headerlink" title="认识Vite"></a>认识Vite</h2><p><code>Webpack</code>是目前整个前端使用最多的构建工具，但是除了<code>webpack</code>之后也有其他的一些构建工具:</p><ul><li>比如<code>rollup</code>、<code>parcel</code>、<code>gulp</code>、<code>vite</code>等等</li><li><code>rollup</code>一般用来打包一些框架，更为常见;</li><li><code>parcel</code>号称零配置的打包工具，但是本身比较大，用的会比较少一点;</li><li><code>gulp</code>用来做自动化比较多一点;</li></ul><p>什么是<code>vite</code>呢?官方的定位∶下一代前端开发与构建工具;<br>如何定义下一代开发和构建工具呢?</p><ul><li>我们知道在实际开发中，我们编写的代码往往是不能被浏览器直接识别的，比如<code>ES6</code>、<code>TypeScript</code>、<code>Vue</code>文件等等;</li><li>所以我们必须通过构建工具来对代码进行转换、编译，类似的工具有<code>webpack</code>、<code>rollup</code>、<code>parcel</code>;</li><li>但是随着项目越来越大，需要处理的<code>JavaScript</code>呈指数级增长，模块越来越多;</li><li>构建工具需要很长的时间才能开启服务器，<code>HMR</code>也需要几秒钟才能在浏览器反应出来;</li></ul><p><code>Vite</code>(法语意为”快速的”，发音<code>/it/</code>)是一种新型前端构建工具，能够显著提升前端开发体验。</p><h2 id="Vite的构造"><a href="#Vite的构造" class="headerlink" title="Vite的构造"></a>Vite的构造</h2><p>它主要由两部分组成:</p><ul><li>一个开发服务器，它基于原生<code>ES</code>模块提供了丰富的内建功能，<code>HMR</code>的速度非常快速;</li><li>一套构建指令，它使用<code>rollup</code>打开我们的代码【内置<code>rollup</code>】，并且它是预配置的，可以输出生成环境的优化过的静态资源;</li></ul><h2 id="浏览器原生支持模块化"><a href="#浏览器原生支持模块化" class="headerlink" title="浏览器原生支持模块化"></a>浏览器原生支持模块化</h2><p>创建一个目录作为项目根目录，在里面创建一个<code>src</code>文件夹和一个<code>main.js</code>文件，在其中随便写点代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure></p><p>再到<code>src</code>文件夹下创建一个<code>js</code>文件夹，再创建一个<code>math.js</code>文件，书写一点<code>js</code>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后导入到<code>main.js</code>文件中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&quot;./js/math&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure></p><p>接着再到项目根目录下创建一个<code>index.html</code>文件，再把<code>main.js</code>引入<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./src/main.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们来运行这个<code>html</code>文件，由于没有构建工具，那么它是否能打印出结果呢？<br>先说结论吧，对于版本比较高的浏览器已经支持<code>ES Module</code>，刚刚写的<code>import</code>其实已经支持了，但是现在浏览器控制台运行是报错的，如果想要让浏览器认识<code>main.js</code>模块，必须给<code>script</code>添加一个属性<code>type=&quot;module&quot;</code><br>添加这个属性，就相当于浏览器解析时允许代码使用<code>ES Module</code></p><p>接着再次运行，但是浏览器控制台依然是报错的，它说这个<code>math</code>找不到，注意这时我们再回头看一下刚刚导入<code>math</code>是似乎没加后缀名，那么这里就得注意了，原生的<code>ES Module</code>后缀名都是不能掉的，之前在<code>webpack</code>中<code>js</code>文件能省去，那是因为<code>webpack</code>有自己的查找规则，它会一个一个后缀名进行添加查找，所以这里的后缀名得加上<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-import &#123; sum &#125; from &quot;./js/math&quot;</span></span><br><span class="line"><span class="addition">+import &#123; sum &#125; from &quot;./js/math.js&quot;</span></span><br><span class="line"></span><br><span class="line">console.log(&quot;Hello World&quot;)</span><br><span class="line">console.log(sum(1, 2))</span><br></pre></td></tr></table></figure></p><p>然后浏览器就能正常显示了<br>既然浏览器能直接识别我这里的代码，如果开发里我还写了<code>request.js</code>文件代码里面也是<code>ES6</code>代码，这些代码加在一起都是模块化的，而浏览器也是支持模块化的，是不是完全意味着开发阶段不需要用构建工具，那就省去了构建这个过程，直接运行就行了；等到真正打包上线的时候，因为我们要适配更多的用户的浏览器，某些用户使用浏览器可能就不支持<code>ES6</code>了，我们等到打包的时候再做构建转成<code>ES5</code>的代码</p><p>其实这也就是<code>Vite</code>的基本思想<br>目前只是写的<code>ES6</code>代码，万一还有<code>ts</code>文件和<code>vue</code>文件，这肯定是没办法直接跑到浏览器上的，就算是现在最新的浏览器它也不支持<br>那不支持，该怎么办呢？<br><code>Vite</code>它将这些不识别的代码做了一个转化，转换为浏览器能识别的<code>ES Module</code>代码</p><p>虽然我们目前这些代码能跑，可是一旦有了<code>ts</code>代码，就不能跑了，所以还是需要构建工具</p><p>先在项目根目录下初始化一个<code>package.json</code>文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建package.json</span></span><br><span class="line">npm init</span><br><span class="line"><span class="comment"># 快速创建package.json</span></span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure></p><p>再安装一个<code>lodash-es</code>包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lodash-es -S</span><br></pre></td></tr></table></figure></p><p>在<code>main.js</code>导入使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash-es&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import &#123; sum &#125; from &quot;./js/math&quot;</span></span><br><span class="line"><span class="comment">// 原生后缀名不能掉</span></span><br><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&quot;./js/math.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用lodash</span></span><br><span class="line"><span class="built_in">console</span>.log(_.join([<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;def&#x27;</span>], <span class="string">&#x27;-&#x27;</span>))</span><br></pre></td></tr></table></figure></p><p>但是这样浏览器运行是无法加载<code>lodash</code>的，在<code>webpack</code>中是有专门的包对这种路径做解析的，浏览器它是无法加载的，不认识，应该换为下面这种写法：<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// import _ from &#x27;lodash-es&#x27;</span><br><span class="line">// 浏览器无法加载上面这个包，找不到这个包所在位置</span><br><span class="line"><span class="addition">+import _ from &#x27;../node_modules/lodash-es/lodash.default.js&#x27;</span></span><br><span class="line"></span><br><span class="line">// import &#123; sum &#125; from &quot;./js/math&quot;</span><br><span class="line">// 原生后缀名不能掉</span><br><span class="line">import &#123; sum &#125; from &quot;./js/math.js&quot;</span><br><span class="line"></span><br><span class="line">console.log(&quot;Hello World&quot;)</span><br><span class="line">console.log(sum(1, 2))</span><br><span class="line"></span><br><span class="line">// 使用lodash</span><br><span class="line">console.log(_.join([&#x27;abc&#x27;, &#x27;def&#x27;], &#x27;-&#x27;))</span><br></pre></td></tr></table></figure></p><p>但是这种方式是有弊端的，在浏览器控制台<code>network</code>中，我们刷新一下，是可以看到浏览器有很多请求的，<code>lodash</code>依赖了很多其它文件，浏览器就会认为也要加载，就会把这些文件全部都加载出来，每个<code>js</code>文件都要发一次请求，浏览器再解析这么多文件是非常消耗性能的，虽然没有使用构建工具，源代码也能跑起来，但是会有两个弊端：</p><ol><li>某些文件是不识别的【<code>ts</code>文件、<code>vue</code>文件】</li><li>如果包之间的依赖太多，那么会发送过多的网络请求</li></ol><p><code>vite</code>它会帮我们解决。</p><h2 id="Vite的安装和使用"><a href="#Vite的安装和使用" class="headerlink" title="Vite的安装和使用"></a>Vite的安装和使用</h2><p>注意: <code>Vite</code>本身也是依赖<code>Node</code>的，所以也需要安装好<code>Node</code>环境<br>首先，我们安装一下<code>vite</code>工具︰<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install vite -g</span><br><span class="line"><span class="comment"># 局部安装</span></span><br><span class="line">npm install vite -D</span><br></pre></td></tr></table></figure></p><p>这里我们只需要对于我们的这个项目进行打包，所以这里我们就用局部安装<br>使用一下<code>vite</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx vite</span><br></pre></td></tr></table></figure></p><p>执行完它就会我们搭建好本地服务，浏览器上运行显示正常，这个<code>vite</code>它对我们的源代码做了一个构建，然后搭建了一个本地服务，浏览器访问时，访问的是<code>vite</code>搭建的这个本地服务，然后<code>vite</code>这个服务就会给我们提供这里的源代码<br>但是这样似乎和原来没有什么区别，这里来看第一个区别：</p><ol><li>导入文件时不需要加后缀名，<code>vite</code>它会帮自动我们加上后缀名的；</li><li>想从<code>node_modules</code>导入某个包，直接写上包名即可，不需要原来那样路径写很长；</li><li>在<code>network</code>中查看请求，它只有常见的几个请求了，因为它帮我们做了个打包，<code>lodash</code>虽然比较大，但是没有之前那么多<code>http</code>请求</li></ol><h2 id="Vite对于css、less的支持"><a href="#Vite对于css、less的支持" class="headerlink" title="Vite对于css、less的支持"></a>Vite对于css、less的支持</h2><p>在<code>src</code>文件夹中创建个<code>css</code>文件夹，再在其中创建个<code>style.css</code>文件<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>加入依赖图，它才会进行构建、打包<br>回到<code>main.js</code>文件中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./css/style.css&quot;</span></span><br></pre></td></tr></table></figure><br>回到浏览器样式生效了，这也说明了<code>vite</code>默认就对<code>css</code>做了处理，不需要像<code>webpack</code>那样再做什么<code>css-loader</code>、<code>style-loader</code>处理<br>接着我们再到<code>main.js</code>文件中创建个空标签<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> titleEl = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">titleEl.className = <span class="string">&quot;title&quot;</span></span><br><span class="line">titleEl.innerHTML = <span class="string">&quot;Hello vite&quot;</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(titleEl)</span><br></pre></td></tr></table></figure></p><p>再到<code>css</code>文件夹下创建一个<code>title.less</code>文件<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@fontSize</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="keyword">@fontColor</span>: pink;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: @fontSize;</span><br><span class="line">  <span class="attribute">color</span>: @fontColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>加入依赖图中，回到main.js文件中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./css/title.less&quot;</span></span><br></pre></td></tr></table></figure></p><p>这时下方也很快的出现了报错<br><code>[vite] Internal server error: Preprocessor dependency &quot;less&quot; not found. Did you install it?</code><br>大概意思是：我们当前预处理器它需要依赖我们<code>less</code>工具，但这个<code>less</code>工具没有找到，你安装了<code>less</code>工具吗<br>之前<code>webpack</code>也是需要依赖<code>less</code>工具[<code>lessc</code>]，只不过在<code>vite</code>中，不需要<code>less-loader</code>，但是<code>less</code>工具依然还是要安装<br>局部安装<code>less</code>工具【注意停掉服务】:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less -D</span><br></pre></td></tr></table></figure><br>重新跑下服务，<code>less</code>文件就生效了</p><p>我们再来验证一下<code>postcss</code>，比如浏览器加上前缀，回到<code>title.less</code>文件中<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@fontSize:</span> <span class="number">50px</span>;</span><br><span class="line"><span class="variable">@fontColor:</span> pink;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">@fontSize</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@fontColor</span>;</span><br><span class="line">  <span class="comment">// 验证浏览器前缀</span></span><br><span class="line">  user-select: <span class="attribute">none;</span></span><br><span class="line"><span class="attribute">&#125;</span></span><br></pre></td></tr></table></figure><br>浏览器上查看它是并没有帮我们加上浏览器前缀的，这时我们需要加上，一般会这样做：</p><ol><li>我们还是需要postcss这个工具，用它来做转化<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss -D</span><br></pre></td></tr></table></figure></li></ol><p>注意<code>postcss</code>已经集合为一个小的生态，它还是需要相应的插件去实现功能，添加前缀我们可以使用之前<code>autoprefixer</code>插件，但是我们使用<code>postcss-preset-env</code>更多，它已经内置了<code>autoprefixer</code>插件<br>安装<code>postcss-preset-env</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-preset-env -D</span><br></pre></td></tr></table></figure><br>注意不是安装完就结束了，我们还需要配置，再到项目根目录下创建一个<code>postcss.config.js</code>文件，添加如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;postcss-preset-env&#x27;</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这时再重新跑下服务，前缀就成功加上了，我们也能发现<code>vite</code>它都不需要我们做任何配置，执行效率也比<code>webpack</code>高很多</p><h2 id="Vite对TypeScript的支持"><a href="#Vite对TypeScript的支持" class="headerlink" title="Vite对TypeScript的支持"></a>Vite对TypeScript的支持</h2><p>在<code>src</code>文件夹下创建一个<code>ts</code>文件夹，再到其中创建一个<code>mul.ts</code>文件<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 * num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回到<code>main.js</code>文件中，导入使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mul <span class="keyword">from</span> <span class="string">&#x27;./ts/mul&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mul(<span class="number">10</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure></p><p>重新跑一下，成功打印出结果，说明<code>vite</code>不需要我们做关于<code>ts</code>配置，直接写<code>ts</code>它就可以对于<code>ts</code>来做一些转化</p><h2 id="Vite的原理"><a href="#Vite的原理" class="headerlink" title="Vite的原理"></a>Vite的原理</h2><p>接上面，我们再到浏览器控制台的<code>network</code>中刷新一下来看一下这个请求的资源，如下图<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10194.png" alt="10194"></p><p>我们可以看到它请求的文件扩展名就是<code>less</code>和<code>ts</code><br>前面也提到过<code>vite</code>它会在本地建一个服务器，在<code>webpack</code>中使用的是<code>express</code>，而在<code>vite1</code>里面用的服务器是<code>koa</code>，但是从<code>vite2</code>开始便不再用<code>koa</code>了，用的是<code>connect</code>，本地服务器并不是直接把<code>.less</code>文件和<code>.ts</code>文件直接给浏览器，浏览器无法解析这两个文件的，<code>vite</code>的一些工具把我们编写的这两个<code>.less</code>文件和<code>.ts</code>文件做了个转化生成新的文件同时也还叫这个名字，并且这两个文件里面的代码变成了<code>es6</code>的<code>js</code>代码【我们可以在浏览器控制台的<code>response</code>中查看】，注意<code>css</code>也是变成了<code>js</code>代码，待会它会通过<code>style</code>标签注入到页面里面去的<br>当我们浏览器去请求这两个文件时，<code>vite</code>的本地服务它对于请求做了个拦截和转发，这也是它为什么要使用<code>connect</code>的原因，connect<code>非常方便做这个转发，这个转发其实请求的是新生成的</code>ES6<code>的</code>js`代码文件，然后返回给浏览器，浏览器就会解析，显示</p><p>如果有兴趣可以到<code>node_modules</code>下去找一下<code>vite</code>其中的<code>package.json</code>文件中它是有这个<code>connect</code>的包版本号的</p><h2 id="Vite对vue的支持"><a href="#Vite对vue的支持" class="headerlink" title="Vite对vue的支持"></a>Vite对vue的支持</h2><p>我们在<code>src</code>下创建一个<code>vue</code>的文件夹再创建个<code>App.vue</code>文件，并书写一点代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &quot;Hello vue&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">h2 &#123;</span><br><span class="line">  color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>当然既然要使用<code>vue</code>，首先肯定得安装一下<code>vue</code>，我们这里安装<code>vue3</code>就行了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue -D</span><br></pre></td></tr></table></figure></p><p>然后再到<code>main.js</code>文件中导入<code>createApp</code>和根组件来使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="comment">// 导入根组件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./vue/App.vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue</span></span><br><span class="line">createApp(App).mount(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure></p><p>由于需要挂载容器，我们去<code>index.html</code>模板中添加一下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后使用<code>npx vite</code>命令来跑一下，发现其实是会报错的，需要安装一个插件<br><code>[vite] Internal server error: Failed to parse source for import analysis because the content contains invalid JS syntax. Install @vitejs/plugin-vue to handle .vue files.</code></p><p><code>vite</code>对<code>vue</code>提供第一优先级支持:</p><ul><li><code>Vue3</code>单文件组件支持: <code>@vitejs/plugin-vue</code></li><li><code>Vue3 JSX</code>支持: <code>@vitejs/plugin-vue-jsx</code></li><li><code>Vue2</code>支持: <code>underfin/vite-plugin-vue2</code></li></ul><p>对于<code>vue3</code>安装一下插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @vitejs/plugin-vue -D</span><br></pre></td></tr></table></figure></p><p>安装完这个插件之后我们还需要做配置，在项目根目录下创建个<code>vite.config.js</code>文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [vue()]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意<code>node</code>版本，文章开头说过，然后重新<code>npx vite</code>浏览器就能成功显示了<br>然后我们再到<code>node_modules</code>下，它有个<code>.vite</code>文件，它是我们第一次执行<code>npx vite</code>的时候做的一个预打包【主要是对依赖的库如<code>vue</code>、<code>lodash</code>】，它有个好处就是我们把这一次运行停掉，再次<code>npx vite</code>时，这两个就不需要再做预打包了，并且在终端看一下这个时间，很明显的快了一些，当然它内部也是做了判断的，并不会出现修改了还用之前的</p><h2 id="Vite打包项目及预览"><a href="#Vite打包项目及预览" class="headerlink" title="Vite打包项目及预览"></a>Vite打包项目及预览</h2><p><code>vite</code>它里面提供了一个<code>build</code>，直接去执行里面这个<code>build</code>就行了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx vite build</span><br></pre></td></tr></table></figure><br>打包成功后，它会在项目根目录下生成一个<code>dist</code>文件夹<br>一般打包后，我们也会对其在浏览器上测试一下，直接运行打包文件夹里的<code>index.html</code>文件也可以吗，但是<code>vite</code>它提供了另外一个工具<code>preview</code>，即预览，让它去执行里面的<code>preview</code>就可以了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx vite preview</span><br></pre></td></tr></table></figure><br>然后我们就可以预览进行测试了<br>但是在真实开发里面，我们一般不会一直去写<code>npx</code>命令，我们会在<code>package.json</code>文件的<code>scripts</code>脚本中编写【<code>scripts</code>里面有个默认的<code>test</code>，把它删掉】<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;serve&quot;</span>: <span class="string">&quot;vite&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;vite build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;preview&quot;</span>: <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>之后我们通过<code>npm run xxx</code>的方式去执行就可以了</p><h2 id="ESBuild解析"><a href="#ESBuild解析" class="headerlink" title="ESBuild解析"></a>ESBuild解析</h2><p><code>vite</code>打包非常快，还有个原因就是<code>ESBuild</code><br><code>ESBuild</code>的特点:</p><ul><li>超快的构建速度，并且不需要缓存【<code>babel</code>去转换还需要利用缓存，但是<code>ESBuild</code>速度很快，不需要做缓存】;</li><li>支持<code>ES6</code>和<code>CommonJS</code>的模块化 ;</li><li>支持<code>ES6</code>的<code>Tree Shaking</code>【比如某个函数从未使用过那么就可以通过<code>Tree Shaking</code>删除掉】 ;</li><li>支持<code>Go</code>、<code>JavaScript</code>的<code>API</code> ;</li><li>支持<code>TypeScript</code>、<code>JSX</code>等语法编译 ;</li><li>支持<code>SourceMap</code> ;</li><li>支持代码压缩 ;</li><li>支持扩展其他插件 ;</li></ul><p>我们可以发现<code>ESBuild</code>与<code>babel</code>很像，但是功能更加强一点，<code>ESBuild</code>还可以做代码压缩，<code>babel</code>一般不做这个，而<code>Tree Shaking</code>要到<code>webpack</code>中做，相当于兼顾了一些<code>webpack</code>的功能</p><p><code>ESBuild</code>为什么这么快呢?</p><ul><li>使用<code>Go</code>语言编写的，可以直接转换成机器代码，而无需经过字节码;</li><li><code>ESBuild</code>可以充分利用<code>CPU</code>的多内核，尽可能让它们饱和运行;</li><li><code>ESBuild</code>的所有内容都是从零开始编写的，而不是使用第三方，所以从一开始就可以考虑各种性能问题;</li></ul><h2 id="Vite的项目创建方式"><a href="#Vite的项目创建方式" class="headerlink" title="Vite的项目创建方式"></a>Vite的项目创建方式</h2><p>以上项目搭建从零开始的，但是真实开发里面不可能从零搭建一个项目，这里我们任意创建个文件夹来存放<code>vite</code>项目，利用<code>vscode</code>的终端输入如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite</span><br></pre></td></tr></table></figure><br>它会让我们填项目名称，这里不需要删除，直接输入项目名称即可，然后是选择框架、<code>ts</code><br>创建完之后安装一下依赖，然后根据它的脚本就可以本地运行、预览和打包</p>]]></content>
      
      
      <categories>
          
          <category> vite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue CLI脚手架</title>
      <link href="/archives/3b9361d9.html"/>
      <url>/archives/3b9361d9.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <p>之前在<code>vue2</code>搭建项目中，已经提到过一点<code>Vue CLI</code>，而它本身是基于<code>webpack</code>开发的【<code>webpack</code>是基于<code>JavaScript</code>开发的】，这一篇我将更加详细的介绍<code>Vue CLI</code></p><h2 id="Vue-CLI脚手架"><a href="#Vue-CLI脚手架" class="headerlink" title="Vue CLI脚手架"></a>Vue CLI脚手架</h2><p>什么是<code>Vue</code>脚手架?</p><ul><li>前面已经学习了如何通过<code>webpack</code>配置<code>Vue</code>的开发环境，但是在真实开发中我们不可能每一个项目从头来完成所有的<code>webpack</code>配置，这样会让开发的效率会大大的降低;</li><li>所以在真实开发中，我们通常会使用脚手架来创建一个项目，<code>Vue</code>的项目我们使用的就是<code>Vue</code>的脚手架;</li><li>脚手架其实是建筑工程中的一个概念，在我们软件工程中也会将一些帮助我们搭建项目的工具称之为脚手架;</li></ul><p><code>Vue</code>的脚手架就是<code>Vue CLI</code>:</p><ul><li><code>CLI</code>是<code>Command-Line Interface</code>，翻译为命令行界面;</li><li>我们可以通过<code>CLI</code>选择项目的配置和创建出我们的项目;</li><li><code>Vue CLI</code>已经内置了<code>webpack</code>相关的配置，我们不需要从零来配置;</li></ul><h2 id="Vue-CLI安装和使用"><a href="#Vue-CLI安装和使用" class="headerlink" title="Vue CLI安装和使用"></a>Vue CLI安装和使用</h2><p><strong>以下操作默认你电脑已经有<code>node</code>环境了，因为我们需要使用<code>npm</code>工具，没有安装<code>node</code>环境，可以去安装一下，后面我也会写一篇<code>node</code>安装的文章</strong></p><ol><li>安装<code>Vue CLI</code>(目前最新的版本是v5.0.8):<ul><li>我们是进行全局安装【在该电脑的任何位置都可以使用<code>vue</code>命令】，这样在任何时候都可以通过<code>vue</code>的命令来创建项目;<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开你的CMD窗口，或者vscode终端输入如下命令</span></span><br><span class="line">npm install @vue/cli -g</span><br></pre></td></tr></table></figure></li></ul></li><li>升级<code>Vue CLI</code>:<ul><li>如果是比较旧的版本，可以通过下面的命令来升级<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开你的CMD窗口，或者vscode终端输入如下命令</span></span><br><span class="line">npm update @vue/cli -g</span><br></pre></td></tr></table></figure></li></ul></li><li>通过<code>Vue</code>的命令来创建项目<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create 项目的名称</span><br></pre></td></tr></table></figure></li></ol><p>注意一个细节，我们安装的包是<code>@vue/cli</code>而使用的命令是<code>vue</code>，这两个是没有任何关系的，其实在我们安装<code>@vue/cli</code>的包里面有个<code>package.json</code>，里面有个配置选项<code>bin: &#123; &#39;vue&#39;: &#39;bin/xxx.js&#39; &#125;</code>，其中配置的是<code>vue</code>所以我们使用的命令名称也就是<code>vue</code></p><h2 id="使用Vue-CLI脚手架创建vue项目"><a href="#使用Vue-CLI脚手架创建vue项目" class="headerlink" title="使用Vue CLI脚手架创建vue项目"></a>使用Vue CLI脚手架创建vue项目</h2><p>这里的话，我先创建一个<code>learn_VueCLI</code>文件夹来存放咱们脚手架创建的项目，然后在<strong>它这个目录下</strong>打开<code>CMD</code>窗口或者<code>vscode</code>终端，输入如下命令来创建一个项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vuecli_demo</span><br></pre></td></tr></table></figure></p><p>输入后回车，会出现一个选择界面如下图：<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10186.png" alt="10186"></p><ul><li>第一个选项是它会默认帮你创建一个<code>vue3</code>项目，并且包含<code>babel</code>和<code>eslint</code></li><li>第二个选项是它会默认帮你创建一个<code>vue2</code>项目，并且包含<code>babel</code>和<code>eslint</code></li><li>第三个选项是手动选择特性，哪些需要哪些不需要用户自己选择</li></ul><p>按上下方向键可以进行选择，这里我们选择第三个，回车</p><p>接着出现如下第二个界面：<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10187.png" alt="10187"></p><p>这个是让你选择特性了，当然它其中也说了，按住空格是选择【括号内就会带上星号】再按一下就会取消选择，按回车进行下一步</p><ul><li>第一个让你选择<code>Babel</code>，让<code>ES6</code>代码转为<code>ES5</code>代码【这个我们需要用，选上】</li><li>第二个<code>TypeScript</code>【这个也可以选上】</li><li>第三个<code>Progressive Web App (PWA) Support</code>即<code>PWA</code>，主要是给应用程序做很多缓存之类的东西【应用比较少，一般不选上】</li><li>第四个<code>Router</code>是路由【开发项目基本要选上，这里我只是创建临时项目，我就不选上了】</li><li>第五个<code>Vuex</code>是状态管理【开发项目基本要选上，这里我只是创建临时项目，我就不选上了】</li><li>第六个<code>CSS Pre-processors</code>是<code>css</code>预处理器【如果你想要使用<code>less</code>或者<code>sass</code>、<code>stylus</code>，就选上，它会帮你配置好，开发项目基本要选上，这里我只是创建临时项目，我就不选上了】</li><li>第七个<code>Linter / Formatter</code>是对代码格式做检测用的【开发项目基本要选上，这里我只是创建临时项目，我就不选上了】</li><li>第八个<code>Unit Testing</code>是单元测试【这个根据公司，有些公司可能会让你写测试用例，那么你就选上，这里我只是创建临时项目，我就不选上了】</li><li>第九个<code>E2E Testing</code>是端到端测试即<code>end2end</code>【这个测试我们现在基本上也不写这个东西，不用选上】</li></ul><p>最后将选择好后，进行回车进入下一步<br>出现如下第三个选择界面：<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10188.png" alt="10188"></p><p>这个是让我们选择<code>vue</code>的版本，按住上下方向键可以进行选择，这里我们选择<code>3.x</code>即<code>vue3</code>版本，然后回车<br>出现如下第四个选择界面：<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10189.png" alt="10189"><br>这个是让我们选择像<code>Babel</code>、<code>ESlint</code>和<code>etc</code>是生成单独、分离的配置文件，还是放到<code>package.json</code>文件里面，放到<code>package.json</code>的话，会让这个文件过大，不方便管理，所以我们一般选择<code>In dedicated config files</code>然后回车</p><p>出现如下第五个选择界面：<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10190.png" alt="10190"><br>大概意思是把刚才我们的选择是否保存为预设，下一次选择的时候就不需要刚才这么多步骤了，这个选择就看个人了<br>这里我们可以试一下它这个保存为预设，输入<code>y</code>，然后回车<br>它会让我们起一个名字【<code>Save preset as</code>】，随便起一个吧，就叫<code>cake</code>，输完后回车，然后就会帮我们创建了</p><p>这里我们来使用一下刚刚保存的那个预设，再开一个终端【注意也是在刚刚那个目录下】，重新创建第二个新项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create abc</span><br></pre></td></tr></table></figure><br>敲完命令回车，出现如下选择界面：<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10191.png" alt="10191"></p><p>上面多了一个选项，多的那个就是我们刚刚保存的预设，我们已经创建一个项目了，直接按住<code>CTRL + C</code>把它取消掉</p><h2 id="项目的目录结构"><a href="#项目的目录结构" class="headerlink" title="项目的目录结构"></a>项目的目录结构</h2><p>这里我放在一张图里面了<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10192.png" alt="10192"></p><p>关于浏览器适配的这个文件，<code>.browserslistrc</code>文件里的内容一般使用默认的，这里我也解释一下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1%</span><br><span class="line">last 2 versions</span><br><span class="line">not dead</span><br><span class="line">not ie 11</span><br></pre></td></tr></table></figure></p><ul><li><code>&gt; 1%</code>是指市场份额</li><li><code>last 2 versions</code>是指最新的两个版本</li><li><code>not dead</code>是指还在维护</li><li><code>not ie 11</code>是指非<code>ie 11</code>浏览器</li></ul><h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><p>打开<code>package.json</code>文件，我们可以查看其中的脚本，之前学习过<code>webpack</code>这里看一下就能知道运行的命令了<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先在项目根目录打开终端，千万别打开错终端了，然后运行如下命令即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure></p><p>浏览器运行正常，并且包含了热更新</p><p>运行一下打包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><br>打包后这个<code>dist</code>目录结构和我们之前学习<code>webpack</code>打包目录结构非常相似</p><h2 id="vue脚手架npm-run-serve"><a href="#vue脚手架npm-run-serve" class="headerlink" title="vue脚手架npm run serve"></a>vue脚手架npm run serve</h2><blockquote><p>当我们去执行<code>npm run serve</code>它执行的是<code>vue-cli-service serve</code></p></blockquote><p>之前学习<code>webpack</code>的时候，执行的是<code>webpack serve</code>命令，它其实会去<code>node_modules/.bin</code>目录下去找<code>webpack</code>，执行的是这个<code>webpack</code>文件里面的代码，而这里是<code>vue-cli-service</code>，所以它也是去<code>node_modules/.bin</code>目录下去找<code>vue-cli-service</code>，执行它里面的代码【它里面有三个这样的文件，没有后缀名的是对应<code>unix</code>，<code>.cmd</code>后缀名的是<code>cmd</code>窗口下的执行脚本命令，<code>.ps</code>后缀名是对应<code>powershell</code>你执行的脚本命令】<br>这里面的代码有很多符号，比如我打开一个<code>vue-cli-service.cmd</code>文件里面有如下代码<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;<span class="variable">%_prog%</span>&quot;  &quot;<span class="variable">%dp0%</span>\..\@vue\cli-service\bin\vue-cli-service.js&quot; %*</span><br></pre></td></tr></table></figure><br>其实是个软链接【符号链接，操作系统帮忙做的事】，当准备执行这个文件时候，它会去找到它真实代码所在的位置，然后去执行它的真实代码，上面路径中有个<code>@vue</code>，在<code>node_modules</code>下我们可以找到这个文件夹，它里面有个<code>cli-service</code>，它执行的是这个文件，为什么说执行的是这个文件呢？把它里面<code>package.json</code>文件打开，里面有个<code>&quot;bin&quot;: &#123;&quot;vue-cli-service&quot;: &quot;bin/vue-cli-service.js&quot;&#125;,</code>，所以这个<code>vue-cli-service</code>就是命令名称，相当于执行的是后面那个文件<br>可能有人会有疑问？<br>脚手架那个<code>vue</code>命令名称能在终端使用，而这个<code>vue-cli-service</code>却无法在终端直接使用，主要是因为<code>vue-cli-service</code>是局部安装，想要执行它，得用一些让它去<code>node_modules</code>下去找的方法，如<code>npx</code>、<code>package.json</code>里的脚本，<code>Vue CLI</code>是全局安装。</p>]]></content>
      
      
      <categories>
          
          <category> vue2 </category>
          
          <category> vue3 </category>
          
          <category> vueCLI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚手架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack5-完结篇(八)</title>
      <link href="/archives/842b6f72.html"/>
      <url>/archives/842b6f72.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <p>💻Installation<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/coding327/learn_webpack5.git</span><br></pre></td></tr></table></figure></p><h2 id="webpack-完结篇"><a href="#webpack-完结篇" class="headerlink" title="webpack-完结篇"></a>webpack-完结篇</h2><blockquote><p>应该是<code>webpack5</code>最后一篇了，主要来说一下环境分离</p></blockquote><p>对于我们的项目，主要被分为开发环境和生产环境，运行我们目前的项目的时候有一个弊端，当我们进行打包【生产环境】时，它会加载<code>webpack.config.js</code>文件，但是这个文件里面也有很多是开发环境的配置，如<code>mode</code>为<code>development</code>，<code>devtool</code>，那么相当于他也会跑一遍，当我们运行本地服务【开发环境】时也有一些配置不合适，如清除打包的插件，复制功能插件<br>所以我们应该对<strong>开发环境</strong>和<strong>生产环境</strong>做一个分离<br>在项目根目录创建一个<code>config</code>文件夹，然后分别创建以下三个文件：</p><ul><li><code>webpack.dev.config.js</code>: 开发环境配置文件;</li><li><code>webpack.prod.config.js</code>: 生产环境配置文件;</li><li><code>webpack.comm.config.js</code>: 公共配置文件;</li></ul><p>回到package.json中，针对不同环境指定不同的配置文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack --config ./config/webpack.prod.config.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;serve&quot;</span>: <span class="string">&quot;webpack serve --config ./config/webpack.dev.config.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着就是分离文件内容了，首先我会把原来的<code>webpack.config.js</code>文件里的内容复制，粘贴到<code>webpack.comm.config.js</code>文件中，注意把所有的功能都先打开，这里我们之前注释的复制功能插件给它取消注释，然后从导出的对象里面开始读，哪些是公共的就留着，不是公共的就剪切掉【注意不是删除啊！！！】，剪切后放到对应环境的配置文件中，注意写个<code>module.exports = &#123;&#125;</code>，把它放到要导出的这个对象里面；接着判断另外一个环境是否需要，需要这个配置项就粘贴到另外一个环境中，更改为该环境的配置即可【不需要就不用粘贴】，注意也要写个<code>module.exports = &#123;&#125;</code>，把它放到要导出的这个对象里面。剩下的配置项都是这么一系列操作，最后把这些配置项需要的模块要导入进来。<br><code>webpack.comm.config.js</code>文件代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// 这个HtmlWebpackPlugin插件不需要做解构，因为它导出的就是一个类，不同的插件有不同的封装方式，而且这种第三方的很难统一规范的</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="comment">// `DefinePlugin`插件，这个插件是`webpack`内置的一个插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; DefinePlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>)</span><br><span class="line"><span class="comment">// 引入VueLoaderPlugin插件，插件贯穿于整个webpack生命周期，它可以帮助vue-loader做一些事情</span></span><br><span class="line"><span class="keyword">const</span> &#123; VueLoaderPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;vue-loader/dist/index&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack是运行在node环境下的，不要使用ES6 module导出【如果非要使用它还需要做额外配置】</span></span><br><span class="line"><span class="comment">// 注意出口文件中的path得是绝对路径，需要使用到path模块，做路径拼接即可，__dirname就是当前编写代码文件所在目录【绝对路径】</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;web&quot;</span>, <span class="comment">// 如果是为node环境打包的就写上node,一般是为web环境打包，因为我们项目代码跑在web环境下面【与热替换搭配使用才能保证热替换没有任何问题，万无一失】</span></span><br><span class="line">  <span class="comment">// watch: true, // 监听源代码是否发生改变，改变就重新进行编译，而不需要再手动打包</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;./build/&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/main.js&quot;</span>,</span><br><span class="line">    <span class="comment">// assetModuleFilename: &#x27;img/[name]_[hash:6][ext][query]&#x27;, // webpack5最新自定义文件名，generator.filename优先级比它高</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="comment">// modules: [&quot;node_modules&quot;], // 像vue它就会从这里面找【当然这个node_modules就是默认的，我们不需要设置】</span></span><br><span class="line">    <span class="comment">// extensions: [&quot;.js&quot;, &quot;.json&quot;, &quot;.wasm&quot;], // 从里面取出后缀名再和导入文件拼接，如果能匹配对应的文件就直接加载了，没有匹配到就把下一个后缀名加上去再匹配【我这里写的也是它默认的，不写，它其实就是这个数组】</span></span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.json&quot;</span>, <span class="string">&quot;.wasm&quot;</span>, <span class="string">&quot;.vue&quot;</span>, <span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.jsx&quot;</span>, <span class="string">&quot;.tsx&quot;</span>], <span class="comment">// 这样导入这些文件时就都不用添加后缀名</span></span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src&quot;</span>), <span class="comment">// 一般用@来代表src</span></span><br><span class="line">      <span class="string">&quot;js&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/js&quot;</span>)</span><br><span class="line">    &#125; <span class="comment">// 起别名</span></span><br><span class="line">  &#125;, <span class="comment">// 配置模块解析</span></span><br><span class="line">  <span class="attr">module</span>: &#123; <span class="comment">// 配置module</span></span><br><span class="line">    <span class="attr">rules</span>: [ <span class="comment">// 注意rules是数组，以后会有多个规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 正则表达式，由于.在正则表达式中有特殊含义，使用反斜杠转义</span></span><br><span class="line">        <span class="comment">// 1. loader的写法(语法糖，是use: &quot;css-loader&quot;的简写，use可以写字符串、对象及数组)</span></span><br><span class="line">        <span class="comment">// loader: &quot;css-loader&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// use: &quot;css-loader&quot;</span></span><br><span class="line">        <span class="comment">// use: &#123;</span></span><br><span class="line">        <span class="comment">//   loader: &quot;xxx-loader&quot;,</span></span><br><span class="line">        <span class="comment">//   options: xxx</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 完整的写法【数组】，注意这里数组它是从后往前执行loader，而对于css应该先使用加载loader再使用插入loader，这里的执行顺序一定要注意</span></span><br><span class="line">        <span class="comment">// 但是一个loader是搞不定的，use这里一般是放数组</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 对象写法语法格式【一般对象都是作为配置项】</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;xxx-loader&quot;, options: xxx&#125;</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;style-loader&quot;&#125;,</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;css-loader&quot;&#125;</span></span><br><span class="line">          <span class="comment">// 如果loader没有其它参数配置，一般可以写下面这种</span></span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">          <span class="comment">// &#123;</span></span><br><span class="line">          <span class="comment">//   loader: &quot;postcss-loader&quot;, // 这个比较特殊，它使用了autoprefixer插件，需要做配置项</span></span><br><span class="line">          <span class="comment">//   options: &#123;</span></span><br><span class="line">          <span class="comment">//     postcssOptions: &#123;</span></span><br><span class="line">          <span class="comment">//       plugins: [</span></span><br><span class="line">          <span class="comment">//         require(&quot;autoprefixer&quot;)</span></span><br><span class="line">          <span class="comment">//       ]</span></span><br><span class="line">          <span class="comment">//     &#125;</span></span><br><span class="line">          <span class="comment">//   &#125;</span></span><br><span class="line">          <span class="comment">// &#125;</span></span><br><span class="line">          <span class="comment">// postcss-loader简便写法，把options抽离出去</span></span><br><span class="line">          <span class="string">&quot;postcss-loader&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;, <span class="comment">// 加载css需要规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="comment">// less文件</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>, <span class="comment">// 解析了css代码，但是样式并未插入到index.html中，所以还需要style-loader，把css代码插入到index.html文件中，其实就是创建style标签把css代码放里面</span></span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>, <span class="comment">// less代码转为了css代码，但是webpack也无法加载解析css，所以需要css-loader</span></span><br><span class="line">          <span class="string">&quot;less-loader&quot;</span> <span class="comment">// lessc独立于webpack，使用less-loader它不仅处理了less文件的import依赖关系【webpack并不识别除js以外的文件，无法加载解析除js以外的文件】，同时使用lessc帮我们将less代码转换为css代码</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;, <span class="comment">// 加载less需要规则</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /\.(jpe?g|png|gif|svg)$/,</span></span><br><span class="line">      <span class="comment">//   use: &#123;</span></span><br><span class="line">      <span class="comment">//     loader: &quot;file-loader&quot;,</span></span><br><span class="line">      <span class="comment">//     options: &#123;</span></span><br><span class="line">      <span class="comment">//       // outputPath: &quot;img&quot;, // 输出目录</span></span><br><span class="line">      <span class="comment">//       // name: &quot;[name]_[hash:6].[ext]&quot; // 注意这里不能写死，需要了解下placeholders就懂了，[name]是文件原来的文件名，中间下划线换成短横线都行，主要是方便划分前面name和后面hash，而这个hash值是为了保证图片不会重复同时截取hash值的前6位，[ext]表示原来文件扩展名【后缀名】，补充一个[folder]表示所在的原来的文件夹</span></span><br><span class="line">      <span class="comment">//       name: &quot;img/[name]_[hash:6].[ext]&quot; // outputPath可以省略【简写】</span></span><br><span class="line">      <span class="comment">//     &#125;</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;, // 图片资源【webpack5之前借助file-loader】</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /\.(jpe?g|png|gif|svg)$/,</span></span><br><span class="line">      <span class="comment">//   use: &#123;</span></span><br><span class="line">      <span class="comment">//     loader: &quot;url-loader&quot;,</span></span><br><span class="line">      <span class="comment">//     options: &#123;</span></span><br><span class="line">      <span class="comment">//       // outputPath: &quot;img&quot;, // 输出目录</span></span><br><span class="line">      <span class="comment">//       // name: &quot;[name]_[hash:6].[ext]&quot; // 注意这里不能写死，需要了解下placeholders就懂了，[name]是文件原来的文件名，中间下划线换成短横线都行，主要是方便划分前面name和后面hash，而这个hash值是为了保证图片不会重复同时截取hash值的前6位，[ext]表示原来文件扩展名【后缀名】，补充一个[folder]表示所在的原来的文件夹</span></span><br><span class="line">      <span class="comment">//       name: &quot;img/[name]_[hash:6].[ext]&quot;, // outputPath可以省略【简写】</span></span><br><span class="line">      <span class="comment">//       limit: 100 * 1024 // 这个limit是以字节为单位，这里我写的就是100KB，小于100KB就做base64编码，大于它的就不做base64编码，直接打包</span></span><br><span class="line">      <span class="comment">//     &#125;</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;, // 图片资源【webpack5之前借助url-loader】</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(jpe?g|png|gif|svg)$/</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset&#x27;</span>, <span class="comment">// 这个其实是我们实际开发中用的最多的</span></span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;img/[name]_[hash:6][ext]&quot;</span> <span class="comment">// 注意在这个内置模块里[ext]是包含了.而file-loader和url-loader不包含.</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span> <span class="comment">// 这个maxSize是以字节为单位，这里我写的就是100KB，小于100KB就做base64编码，大于它的就不做base64编码，直接打包</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="comment">// 做限制需要在parser里面有个数据url条件，配置最大限制</span></span><br><span class="line">      &#125;, <span class="comment">// 图片资源【webpack5开始内置资源模块】</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /\.(eot|ttf|woff2?)$/,</span></span><br><span class="line">      <span class="comment">//   use: &#123;</span></span><br><span class="line">      <span class="comment">//     loader: &quot;file-loader&quot;,</span></span><br><span class="line">      <span class="comment">//     options: &#123;</span></span><br><span class="line">      <span class="comment">//       name: &quot;font/[name]_[hash:6].[ext]&quot; // 注意这里是name，如果写成filename它不会去读文件夹【输出这个文件夹】</span></span><br><span class="line">      <span class="comment">//     &#125;</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;, // 字体资源【webpack5开始内置这个资源模块】</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(eot|ttf|woff2?)$/</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;font/[name]_[hash:6][ext]&#x27;</span>, <span class="comment">// 注意内置模块得filename里得[ext]包含.</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="comment">// 字体资源【webpack5开始内置这个资源模块】</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /\.js$/,</span></span><br><span class="line">      <span class="comment">//   use: &#123;</span></span><br><span class="line">      <span class="comment">//     loader: &quot;babel-loader&quot;,</span></span><br><span class="line">      <span class="comment">//     options: &#123;</span></span><br><span class="line">      <span class="comment">//       // plugins: [</span></span><br><span class="line">      <span class="comment">//       //   &quot;@babel/plugin-transform-arrow-functions&quot;,</span></span><br><span class="line">      <span class="comment">//       //   &quot;@babel/plugin-transform-block-scoping&quot;,</span></span><br><span class="line">      <span class="comment">//       // ]</span></span><br><span class="line">      <span class="comment">//       presets: [</span></span><br><span class="line">      <span class="comment">//         &quot;@babel/preset-env&quot;</span></span><br><span class="line">      <span class="comment">//         // [&quot;@babel/preset-env&quot;, &#123;</span></span><br><span class="line">      <span class="comment">//         //   // 配置项</span></span><br><span class="line">      <span class="comment">//         // &#125;] // 这个写法是补充的，因为有可能在其它地方需要传入配置项</span></span><br><span class="line">      <span class="comment">//       ]</span></span><br><span class="line">      <span class="comment">//     &#125;</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;, // 加载js所需要规则【配置项未抽离版】</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">&quot;babel-loader&quot;</span> <span class="comment">// 这里没写use用loader让阅读性更强</span></span><br><span class="line">      &#125;, <span class="comment">// 加载js所需要规则【配置项抽离版】</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">&quot;vue-loader&quot;</span></span><br><span class="line">      &#125;, <span class="comment">// 加载vue所需规则</span></span><br><span class="line">      &#123;&#125;, <span class="comment">// 加载ts需要规则</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /\.(css|less)$/,</span></span><br><span class="line">      <span class="comment">//   use: [</span></span><br><span class="line">      <span class="comment">//     &quot;style-loader&quot;,</span></span><br><span class="line">      <span class="comment">//     &quot;css-loader&quot;,</span></span><br><span class="line">      <span class="comment">//     &quot;less-loader&quot;</span></span><br><span class="line">      <span class="comment">//   ]</span></span><br><span class="line">      <span class="comment">// &#125;, // css、less合并写法</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;巧克力真美味&quot;</span> <span class="comment">// 模板里的htmlWebpackPlugin.options.title中的htmlWebpackPlugin是new出来的对象，options就是传入的配置项，title就是我们这里配置的title</span></span><br><span class="line">    &#125;), <span class="comment">// 可以传入一个指定模板【不指定它有个默认模板】</span></span><br><span class="line">    <span class="keyword">new</span> DefinePlugin(&#123;</span><br><span class="line">      <span class="attr">BASE_URL</span>: <span class="string">&#x27;&quot;./&quot;&#x27;</span>,</span><br><span class="line">      <span class="attr">__VUE_OPTIONS_API__</span>: <span class="literal">true</span>, <span class="comment">// 这个就是开启options api，如果都是setup，vue3代码，可以关闭，减小vue源码体积</span></span><br><span class="line">      <span class="attr">__VUE_PROD_DEVTOOLS__</span>: <span class="literal">false</span> <span class="comment">// 这个默认就是false，可以不用设置，控制调试工具生产环境是否开启【一般不开启】</span></span><br><span class="line">    &#125;), <span class="comment">// 定义BASE_URL的值，注意这个引号里还要再加个引号，有点类似eval，会把引号里面内容当js语法解析</span></span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin() <span class="comment">// vue-loader插件，帮助vue-loader做一些事情</span></span><br><span class="line">  ] <span class="comment">// plugins是个数组【这个不用管顺序】，里面放的是一个个插件对象【其实它源码里面是拿到我们导出的这个大的对象，然后去取到我们所有的plugins，之后对它做了个for循环，for循环后对它做个注入，到时候就可以根据不同的hook的生命周期来回调这个插件里面对象的某个方法】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>webpack.dev.config.js</code>文件代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 设置模式</span></span><br><span class="line">  <span class="comment">// development 开发阶段，会设置development</span></span><br><span class="line">  <span class="comment">// production 准备打包上线的时候，设置production</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>, <span class="comment">// 开发模式，我们可以看到打包的js文件里有很多eval函数，这是因为devtool默认为eval</span></span><br><span class="line">  <span class="comment">// 设置source-map，建立js映射文件，方便调试代码和错误</span></span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>, <span class="comment">// 默认为eval包裹着源代码，一般我们是设置为source-map，作用是在生成打包文件时，它也会生成source-map文件，再次打包发现项目根目录多了个main.js.map文件，它其实就是个映射文件，它可以把打包的js文件映射到真实开发环境的源代码里面</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">static</span>: <span class="string">&quot;./public&quot;</span>, <span class="comment">// 【这个一般都是public】之前public文件夹里的内容用了复制插件，复制到打包文件夹下的，但是一般在开发环境我们不使用这个复制插件，每次复制很费性能，但这样其中文件就无法访问到，而这里指定的public到时候服务访问不到某些文件就会访问这个文件夹里的内容</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 开启模块热替换【注意要与target搭配才是最好的，不然只开启会有点问题，target一般我习惯放在最上面】</span></span><br><span class="line">    <span class="comment">// host: &#x27;0.0.0.0&#x27;, // webpack最新版本不需要设置host: &#x27;0.0.0.0&#x27;，默认就用localhost，这个0.0.0.0是在同一个网段下，另外一台电脑也能访问我们应用【我使用时测试了一下，不设置&#x27;0.0.0.0&#x27;也能在另外一个台电脑上通过ip来访问，一般不需要配置】</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">7777</span>, <span class="comment">// 端口号，某些情况下可能出现端口号会被占用，那么可以配置其它的端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 默认打开浏览器，也可以设置为类似于`Google Chrome`等值</span></span><br><span class="line">    <span class="comment">// compress: true, // 默认值是false，gzip压缩，能够提高传输速度【一般不用配置，因为我们本地访问，还要压缩成本】</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// &quot;/api&quot;: &quot;http://localhost:8888&quot;, // &quot;/api&quot;是个映射，如果现在请求的是/api，到时候可以代理到配置的这个地址，这也是为什么我们在发请求时里面请求地址是/api/comments，值是API服务器地址【但是这个字符串写法会有问题】</span></span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:8888&quot;</span>, <span class="comment">// API服务器地址</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> <span class="comment">// 这个主要是去掉映射时拼接的地址中间多个/api</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>, <span class="comment">// 默认情况下不接收转发到https的服务器上，如果希望支持，可以设置为false</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 它表示是否更新代理后请求的headers中host地址为target【在vue-cli3中默认为true，vue-cli2默认为false，Request Headers中查看host，浏览器他不会直观给你看，始终都是本地服务的host，但其实设置生效了，在后端request.getHeader(&quot;Host&quot;)可以获取到】</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="comment">// 配置代理</span></span><br><span class="line">  &#125;, <span class="comment">// 注意这个是没有先后顺序，个人习惯写在这里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>webpack.prod.config.js</code>文件代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们需要从clean-webpack-plugin插件中取出CleanWebpackPlugin类，因为插件一般给它封装成class</span></span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="comment">// 复制功能copy-webpack-plugin插件</span></span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;copy-webpack-plugin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 设置模式</span></span><br><span class="line">  <span class="comment">// development 开发阶段，会设置development</span></span><br><span class="line">  <span class="comment">// production 准备打包上线的时候，设置production</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>, <span class="comment">// 开发模式，我们可以看到打包的js文件里有很多eval函数，这是因为devtool默认为eval</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(), <span class="comment">// 格式：根据CleanWebpackPlugin类创建出对象</span></span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">from</span>: <span class="string">&quot;public&quot;</span>, <span class="comment">// 从哪个文件夹里复制</span></span><br><span class="line">          <span class="attr">to</span>: <span class="string">&quot;./&quot;</span>, <span class="comment">// 复制到哪个文件夹【注意它是在打包文件夹基础上，这里也可以不写，默认就是打包文件夹】</span></span><br><span class="line">          <span class="attr">globOptions</span>: &#123;</span><br><span class="line">            <span class="attr">ignore</span>: [</span><br><span class="line">              <span class="string">&quot;**/index.html&quot;</span> <span class="comment">// 注意这两个**表示当前public文件夹下index.html以及子文件夹下的index.html</span></span><br><span class="line">            ]</span><br><span class="line">          &#125; <span class="comment">// globOptions.ignore忽略某个文件，可以过滤掉某些不需要复制的文件如index.html模板</span></span><br><span class="line">        &#125;</span><br><span class="line">      ] <span class="comment">// patterns匹配的意思</span></span><br><span class="line">    &#125;), <span class="comment">// 复制功能插件</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上就完成了将一个配置文件分离为三个配置文件，但是我们还得把公共的合并到开发、生产配置文件中<br>这里我们可以使用<code>webpack</code>官方提供的一个合并插件：<code>webpack-merge</code><br>安装该插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-merge -D</span><br></pre></td></tr></table></figure></p><p>进入<code>webpack.dev.config.js</code>文件中，做合并：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意webpack是运行在node环境下，使用require导入merge函数【commonJS规范】</span></span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack-merge&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入公共配置</span></span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">&quot;./webpack.comm.config&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意使用merge函数合并一下</span></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonConfig, &#123;</span><br><span class="line">  <span class="comment">// 设置模式</span></span><br><span class="line">  <span class="comment">// development 开发阶段，会设置development</span></span><br><span class="line">  <span class="comment">// production 准备打包上线的时候，设置production</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>, <span class="comment">// 开发模式，我们可以看到打包的js文件里有很多eval函数，这是因为devtool默认为eval</span></span><br><span class="line">  <span class="comment">// 设置source-map，建立js映射文件，方便调试代码和错误</span></span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>, <span class="comment">// 默认为eval包裹着源代码，一般我们是设置为source-map，作用是在生成打包文件时，它也会生成source-map文件，再次打包发现项目根目录多了个main.js.map文件，它其实就是个映射文件，它可以把打包的js文件映射到真实开发环境的源代码里面</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">static</span>: <span class="string">&quot;./public&quot;</span>, <span class="comment">// 【这个一般都是public】之前public文件夹里的内容用了复制插件，复制到打包文件夹下的，但是一般在开发环境我们不使用这个复制插件，每次复制很费性能，但这样其中文件就无法访问到，而这里指定的public到时候服务访问不到某些文件就会访问这个文件夹里的内容</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 开启模块热替换【注意要与target搭配才是最好的，不然只开启会有点问题，target一般我习惯放在最上面】</span></span><br><span class="line">    <span class="comment">// host: &#x27;0.0.0.0&#x27;, // webpack最新版本不需要设置host: &#x27;0.0.0.0&#x27;，默认就用localhost，这个0.0.0.0是在同一个网段下，另外一台电脑也能访问我们应用【我使用时测试了一下，不设置&#x27;0.0.0.0&#x27;也能在另外一个台电脑上通过ip来访问，一般不需要配置】</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">7777</span>, <span class="comment">// 端口号，某些情况下可能出现端口号会被占用，那么可以配置其它的端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 默认打开浏览器，也可以设置为类似于`Google Chrome`等值</span></span><br><span class="line">    <span class="comment">// compress: true, // 默认值是false，gzip压缩，能够提高传输速度【一般不用配置，因为我们本地访问，还要压缩成本】</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// &quot;/api&quot;: &quot;http://localhost:8888&quot;, // &quot;/api&quot;是个映射，如果现在请求的是/api，到时候可以代理到配置的这个地址，这也是为什么我们在发请求时里面请求地址是/api/comments，值是API服务器地址【但是这个字符串写法会有问题】</span></span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:8888&quot;</span>, <span class="comment">// API服务器地址</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> <span class="comment">// 这个主要是去掉映射时拼接的地址中间多个/api</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>, <span class="comment">// 默认情况下不接收转发到https的服务器上，如果希望支持，可以设置为false</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 它表示是否更新代理后请求的headers中host地址为target【在vue-cli3中默认为true，vue-cli2默认为false，Request Headers中查看host，浏览器他不会直观给你看，始终都是本地服务的host，但其实设置生效了，在后端request.getHeader(&quot;Host&quot;)可以获取到】</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="comment">// 配置代理</span></span><br><span class="line">  &#125;, <span class="comment">// 注意这个是没有先后顺序，个人习惯写在这里</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>进入<code>webpack.prod.config.js</code>文件中，做合并：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们需要从clean-webpack-plugin插件中取出CleanWebpackPlugin类，因为插件一般给它封装成class</span></span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="comment">// 复制功能copy-webpack-plugin插件</span></span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;copy-webpack-plugin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意webpack是运行在node环境下，使用require导入merge函数【commonJS规范】</span></span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack-merge&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入公共配置</span></span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">&quot;./webpack.comm.config&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意使用merge函数合并一下</span></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonConfig, &#123;</span><br><span class="line">  <span class="comment">// 设置模式</span></span><br><span class="line">  <span class="comment">// development 开发阶段，会设置development</span></span><br><span class="line">  <span class="comment">// production 准备打包上线的时候，设置production</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>, <span class="comment">// 开发模式，我们可以看到打包的js文件里有很多eval函数，这是因为devtool默认为eval</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(), <span class="comment">// 格式：根据CleanWebpackPlugin类创建出对象</span></span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">from</span>: <span class="string">&quot;public&quot;</span>, <span class="comment">// 从哪个文件夹里复制</span></span><br><span class="line">          <span class="attr">to</span>: <span class="string">&quot;./&quot;</span>, <span class="comment">// 复制到哪个文件夹【注意它是在打包文件夹基础上，这里也可以不写，默认就是打包文件夹】</span></span><br><span class="line">          <span class="attr">globOptions</span>: &#123;</span><br><span class="line">            <span class="attr">ignore</span>: [</span><br><span class="line">              <span class="string">&quot;**/index.html&quot;</span> <span class="comment">// 注意这两个**表示当前public文件夹下index.html以及子文件夹下的index.html</span></span><br><span class="line">            ]</span><br><span class="line">          &#125; <span class="comment">// globOptions.ignore忽略某个文件，可以过滤掉某些不需要复制的文件如index.html模板</span></span><br><span class="line">        &#125;</span><br><span class="line">      ] <span class="comment">// patterns匹配的意思</span></span><br><span class="line">    &#125;), <span class="comment">// 复制功能插件</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>配置完，然后就是路径问题了，除了<code>entry</code>【这个会专门拿出来说一下】、<code>BASE_URL</code>、<code>HtmlWebpackPlugin</code>模板路径、复制功能插件【这个是赋值】和<code>static</code>等几个特殊的路径不用改动，其余基本上，路径都会有所变动</p><p>这里关于<code>entry</code>，引入一个入口文件解析</p><h2 id="入口文件解析"><a href="#入口文件解析" class="headerlink" title="入口文件解析"></a>入口文件解析</h2><p>我们之前编写入口文件的规则是这样的: <code>/src/index.js</code>，但是如果我们的配置文件所在的位置变成了<code>config</code>目录，我们是否应该变成<code>../src/index.js</code>呢?</p><ul><li>如果我们这样编写，会发现是报错的，依然要写成<code>./src/index.js</code> ;</li><li>这是因为入口文件其实是和另一个属性是有关的<code>context</code> ;</li></ul><p><code>context</code>的作用是用于解析入口( <code>entry point</code> )和加载器( <code>loader</code> ) :</p><ul><li>官方说法︰ 默认是当前路径（但是经过测试，默认应该是<code>webpack</code>的启动目录)</li><li>另外推荐在配置中传入一个值;<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// context是配置文件所在目录</span></span><br><span class="line">  <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">context</span>: path.resolve(__dirname, <span class="string">&quot;./&quot;</span>),</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;../src/index.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>所以说<code>entry</code>其实是和webpack启动目录即<code>package.json</code>所在目录有关，不需要改动路径</p><p>接着重新打包测试，浏览器显示正常<br>本地服务运行，浏览器也显示正常</p><blockquote><p>由于路径改动，这里我也把三个文件路径改动后的配置代码放在下方</p></blockquote><h2 id="webpack-comm-config-js文件代码如下"><a href="#webpack-comm-config-js文件代码如下" class="headerlink" title="webpack.comm.config.js文件代码如下"></a><code>webpack.comm.config.js</code>文件代码如下</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// 这个HtmlWebpackPlugin插件不需要做解构，因为它导出的就是一个类，不同的插件有不同的封装方式，而且这种第三方的很难统一规范的</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="comment">// `DefinePlugin`插件，这个插件是`webpack`内置的一个插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; DefinePlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>)</span><br><span class="line"><span class="comment">// 引入VueLoaderPlugin插件，插件贯穿于整个webpack生命周期，它可以帮助vue-loader做一些事情</span></span><br><span class="line"><span class="keyword">const</span> &#123; VueLoaderPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;vue-loader/dist/index&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack是运行在node环境下的，不要使用ES6 module导出【如果非要使用它还需要做额外配置】</span></span><br><span class="line"><span class="comment">// 注意出口文件中的path得是绝对路径，需要使用到path模块，做路径拼接即可，__dirname就是当前编写代码文件所在目录【绝对路径】</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;web&quot;</span>, <span class="comment">// 如果是为node环境打包的就写上node,一般是为web环境打包，因为我们项目代码跑在web环境下面【与热替换搭配使用才能保证热替换没有任何问题，万无一失】</span></span><br><span class="line">  <span class="comment">// watch: true, // 监听源代码是否发生改变，改变就重新进行编译，而不需要再手动打包</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;../build/&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/main.js&quot;</span>,</span><br><span class="line">    <span class="comment">// assetModuleFilename: &#x27;img/[name]_[hash:6][ext][query]&#x27;, // webpack5最新自定义文件名，generator.filename优先级比它高</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="comment">// modules: [&quot;node_modules&quot;], // 像vue它就会从这里面找【当然这个node_modules就是默认的，我们不需要设置】</span></span><br><span class="line">    <span class="comment">// extensions: [&quot;.js&quot;, &quot;.json&quot;, &quot;.wasm&quot;], // 从里面取出后缀名再和导入文件拼接，如果能匹配对应的文件就直接加载了，没有匹配到就把下一个后缀名加上去再匹配【我这里写的也是它默认的，不写，它其实就是这个数组】</span></span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.json&quot;</span>, <span class="string">&quot;.wasm&quot;</span>, <span class="string">&quot;.vue&quot;</span>, <span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.jsx&quot;</span>, <span class="string">&quot;.tsx&quot;</span>], <span class="comment">// 这样导入这些文件时就都不用添加后缀名</span></span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: path.resolve(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 一般用@来代表src</span></span><br><span class="line">      <span class="string">&quot;js&quot;</span>: path.resolve(__dirname, <span class="string">&quot;../src/js&quot;</span>)</span><br><span class="line">    &#125; <span class="comment">// 起别名</span></span><br><span class="line">  &#125;, <span class="comment">// 配置模块解析</span></span><br><span class="line">  <span class="attr">module</span>: &#123; <span class="comment">// 配置module</span></span><br><span class="line">    <span class="attr">rules</span>: [ <span class="comment">// 注意rules是数组，以后会有多个规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 正则表达式，由于.在正则表达式中有特殊含义，使用反斜杠转义</span></span><br><span class="line">        <span class="comment">// 1. loader的写法(语法糖，是use: &quot;css-loader&quot;的简写，use可以写字符串、对象及数组)</span></span><br><span class="line">        <span class="comment">// loader: &quot;css-loader&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// use: &quot;css-loader&quot;</span></span><br><span class="line">        <span class="comment">// use: &#123;</span></span><br><span class="line">        <span class="comment">//   loader: &quot;xxx-loader&quot;,</span></span><br><span class="line">        <span class="comment">//   options: xxx</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 完整的写法【数组】，注意这里数组它是从后往前执行loader，而对于css应该先使用加载loader再使用插入loader，这里的执行顺序一定要注意</span></span><br><span class="line">        <span class="comment">// 但是一个loader是搞不定的，use这里一般是放数组</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 对象写法语法格式【一般对象都是作为配置项】</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;xxx-loader&quot;, options: xxx&#125;</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;style-loader&quot;&#125;,</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;css-loader&quot;&#125;</span></span><br><span class="line">          <span class="comment">// 如果loader没有其它参数配置，一般可以写下面这种</span></span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">          <span class="comment">// &#123;</span></span><br><span class="line">          <span class="comment">//   loader: &quot;postcss-loader&quot;, // 这个比较特殊，它使用了autoprefixer插件，需要做配置项</span></span><br><span class="line">          <span class="comment">//   options: &#123;</span></span><br><span class="line">          <span class="comment">//     postcssOptions: &#123;</span></span><br><span class="line">          <span class="comment">//       plugins: [</span></span><br><span class="line">          <span class="comment">//         require(&quot;autoprefixer&quot;)</span></span><br><span class="line">          <span class="comment">//       ]</span></span><br><span class="line">          <span class="comment">//     &#125;</span></span><br><span class="line">          <span class="comment">//   &#125;</span></span><br><span class="line">          <span class="comment">// &#125;</span></span><br><span class="line">          <span class="comment">// postcss-loader简便写法，把options抽离出去</span></span><br><span class="line">          <span class="string">&quot;postcss-loader&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;, <span class="comment">// 加载css需要规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="comment">// less文件</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>, <span class="comment">// 解析了css代码，但是样式并未插入到index.html中，所以还需要style-loader，把css代码插入到index.html文件中，其实就是创建style标签把css代码放里面</span></span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>, <span class="comment">// less代码转为了css代码，但是webpack也无法加载解析css，所以需要css-loader</span></span><br><span class="line">          <span class="string">&quot;less-loader&quot;</span> <span class="comment">// lessc独立于webpack，使用less-loader它不仅处理了less文件的import依赖关系【webpack并不识别除js以外的文件，无法加载解析除js以外的文件】，同时使用lessc帮我们将less代码转换为css代码</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;, <span class="comment">// 加载less需要规则</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /\.(jpe?g|png|gif|svg)$/,</span></span><br><span class="line">      <span class="comment">//   use: &#123;</span></span><br><span class="line">      <span class="comment">//     loader: &quot;file-loader&quot;,</span></span><br><span class="line">      <span class="comment">//     options: &#123;</span></span><br><span class="line">      <span class="comment">//       // outputPath: &quot;img&quot;, // 输出目录</span></span><br><span class="line">      <span class="comment">//       // name: &quot;[name]_[hash:6].[ext]&quot; // 注意这里不能写死，需要了解下placeholders就懂了，[name]是文件原来的文件名，中间下划线换成短横线都行，主要是方便划分前面name和后面hash，而这个hash值是为了保证图片不会重复同时截取hash值的前6位，[ext]表示原来文件扩展名【后缀名】，补充一个[folder]表示所在的原来的文件夹</span></span><br><span class="line">      <span class="comment">//       name: &quot;img/[name]_[hash:6].[ext]&quot; // outputPath可以省略【简写】</span></span><br><span class="line">      <span class="comment">//     &#125;</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;, // 图片资源【webpack5之前借助file-loader】</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /\.(jpe?g|png|gif|svg)$/,</span></span><br><span class="line">      <span class="comment">//   use: &#123;</span></span><br><span class="line">      <span class="comment">//     loader: &quot;url-loader&quot;,</span></span><br><span class="line">      <span class="comment">//     options: &#123;</span></span><br><span class="line">      <span class="comment">//       // outputPath: &quot;img&quot;, // 输出目录</span></span><br><span class="line">      <span class="comment">//       // name: &quot;[name]_[hash:6].[ext]&quot; // 注意这里不能写死，需要了解下placeholders就懂了，[name]是文件原来的文件名，中间下划线换成短横线都行，主要是方便划分前面name和后面hash，而这个hash值是为了保证图片不会重复同时截取hash值的前6位，[ext]表示原来文件扩展名【后缀名】，补充一个[folder]表示所在的原来的文件夹</span></span><br><span class="line">      <span class="comment">//       name: &quot;img/[name]_[hash:6].[ext]&quot;, // outputPath可以省略【简写】</span></span><br><span class="line">      <span class="comment">//       limit: 100 * 1024 // 这个limit是以字节为单位，这里我写的就是100KB，小于100KB就做base64编码，大于它的就不做base64编码，直接打包</span></span><br><span class="line">      <span class="comment">//     &#125;</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;, // 图片资源【webpack5之前借助url-loader】</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(jpe?g|png|gif|svg)$/</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset&#x27;</span>, <span class="comment">// 这个其实是我们实际开发中用的最多的</span></span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;img/[name]_[hash:6][ext]&quot;</span> <span class="comment">// 注意在这个内置模块里[ext]是包含了.而file-loader和url-loader不包含.</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span> <span class="comment">// 这个maxSize是以字节为单位，这里我写的就是100KB，小于100KB就做base64编码，大于它的就不做base64编码，直接打包</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="comment">// 做限制需要在parser里面有个数据url条件，配置最大限制</span></span><br><span class="line">      &#125;, <span class="comment">// 图片资源【webpack5开始内置资源模块】</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /\.(eot|ttf|woff2?)$/,</span></span><br><span class="line">      <span class="comment">//   use: &#123;</span></span><br><span class="line">      <span class="comment">//     loader: &quot;file-loader&quot;,</span></span><br><span class="line">      <span class="comment">//     options: &#123;</span></span><br><span class="line">      <span class="comment">//       name: &quot;font/[name]_[hash:6].[ext]&quot; // 注意这里是name，如果写成filename它不会去读文件夹【输出这个文件夹】</span></span><br><span class="line">      <span class="comment">//     &#125;</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;, // 字体资源【webpack5开始内置这个资源模块】</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(eot|ttf|woff2?)$/</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;font/[name]_[hash:6][ext]&#x27;</span>, <span class="comment">// 注意内置模块得filename里得[ext]包含.</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="comment">// 字体资源【webpack5开始内置这个资源模块】</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /\.js$/,</span></span><br><span class="line">      <span class="comment">//   use: &#123;</span></span><br><span class="line">      <span class="comment">//     loader: &quot;babel-loader&quot;,</span></span><br><span class="line">      <span class="comment">//     options: &#123;</span></span><br><span class="line">      <span class="comment">//       // plugins: [</span></span><br><span class="line">      <span class="comment">//       //   &quot;@babel/plugin-transform-arrow-functions&quot;,</span></span><br><span class="line">      <span class="comment">//       //   &quot;@babel/plugin-transform-block-scoping&quot;,</span></span><br><span class="line">      <span class="comment">//       // ]</span></span><br><span class="line">      <span class="comment">//       presets: [</span></span><br><span class="line">      <span class="comment">//         &quot;@babel/preset-env&quot;</span></span><br><span class="line">      <span class="comment">//         // [&quot;@babel/preset-env&quot;, &#123;</span></span><br><span class="line">      <span class="comment">//         //   // 配置项</span></span><br><span class="line">      <span class="comment">//         // &#125;] // 这个写法是补充的，因为有可能在其它地方需要传入配置项</span></span><br><span class="line">      <span class="comment">//       ]</span></span><br><span class="line">      <span class="comment">//     &#125;</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;, // 加载js所需要规则【配置项未抽离版】</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">&quot;babel-loader&quot;</span> <span class="comment">// 这里没写use用loader让阅读性更强</span></span><br><span class="line">      &#125;, <span class="comment">// 加载js所需要规则【配置项抽离版】</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">&quot;vue-loader&quot;</span></span><br><span class="line">      &#125;, <span class="comment">// 加载vue所需规则</span></span><br><span class="line">      &#123;&#125;, <span class="comment">// 加载ts需要规则</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /\.(css|less)$/,</span></span><br><span class="line">      <span class="comment">//   use: [</span></span><br><span class="line">      <span class="comment">//     &quot;style-loader&quot;,</span></span><br><span class="line">      <span class="comment">//     &quot;css-loader&quot;,</span></span><br><span class="line">      <span class="comment">//     &quot;less-loader&quot;</span></span><br><span class="line">      <span class="comment">//   ]</span></span><br><span class="line">      <span class="comment">// &#125;, // css、less合并写法</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;巧克力真美味&quot;</span> <span class="comment">// 模板里的htmlWebpackPlugin.options.title中的htmlWebpackPlugin是new出来的对象，options就是传入的配置项，title就是我们这里配置的title</span></span><br><span class="line">    &#125;), <span class="comment">// 可以传入一个指定模板【不指定它有个默认模板】</span></span><br><span class="line">    <span class="keyword">new</span> DefinePlugin(&#123;</span><br><span class="line">      <span class="attr">BASE_URL</span>: <span class="string">&#x27;&quot;./&quot;&#x27;</span>,</span><br><span class="line">      <span class="attr">__VUE_OPTIONS_API__</span>: <span class="literal">true</span>, <span class="comment">// 这个就是开启options api，如果都是setup，vue3代码，可以关闭，减小vue源码体积</span></span><br><span class="line">      <span class="attr">__VUE_PROD_DEVTOOLS__</span>: <span class="literal">false</span> <span class="comment">// 这个默认就是false，可以不用设置，控制调试工具生产环境是否开启【一般不开启】</span></span><br><span class="line">    &#125;), <span class="comment">// 定义BASE_URL的值，注意这个引号里还要再加个引号，有点类似eval，会把引号里面内容当js语法解析</span></span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin() <span class="comment">// vue-loader插件，帮助vue-loader做一些事情</span></span><br><span class="line">  ] <span class="comment">// plugins是个数组【这个不用管顺序】，里面放的是一个个插件对象【其实它源码里面是拿到我们导出的这个大的对象，然后去取到我们所有的plugins，之后对它做了个for循环，for循环后对它做个注入，到时候就可以根据不同的hook的生命周期来回调这个插件里面对象的某个方法】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack-dev-config-js文件代码如下"><a href="#webpack-dev-config-js文件代码如下" class="headerlink" title="webpack.dev.config.js文件代码如下"></a><code>webpack.dev.config.js</code>文件代码如下</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意webpack是运行在node环境下，使用require导入merge函数【commonJS规范】</span></span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack-merge&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入公共配置</span></span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">&quot;./webpack.comm.config&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意使用merge函数合并一下</span></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonConfig, &#123;</span><br><span class="line">  <span class="comment">// 设置模式</span></span><br><span class="line">  <span class="comment">// development 开发阶段，会设置development</span></span><br><span class="line">  <span class="comment">// production 准备打包上线的时候，设置production</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>, <span class="comment">// 开发模式，我们可以看到打包的js文件里有很多eval函数，这是因为devtool默认为eval</span></span><br><span class="line">  <span class="comment">// 设置source-map，建立js映射文件，方便调试代码和错误</span></span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>, <span class="comment">// 默认为eval包裹着源代码，一般我们是设置为source-map，作用是在生成打包文件时，它也会生成source-map文件，再次打包发现项目根目录多了个main.js.map文件，它其实就是个映射文件，它可以把打包的js文件映射到真实开发环境的源代码里面</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">static</span>: <span class="string">&quot;./public&quot;</span>, <span class="comment">// 【这个一般都是public】之前public文件夹里的内容用了复制插件，复制到打包文件夹下的，但是一般在开发环境我们不使用这个复制插件，每次复制很费性能，但这样其中文件就无法访问到，而这里指定的public到时候服务访问不到某些文件就会访问这个文件夹里的内容</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 开启模块热替换【注意要与target搭配才是最好的，不然只开启会有点问题，target一般我习惯放在最上面】</span></span><br><span class="line">    <span class="comment">// host: &#x27;0.0.0.0&#x27;, // webpack最新版本不需要设置host: &#x27;0.0.0.0&#x27;，默认就用localhost，这个0.0.0.0是在同一个网段下，另外一台电脑也能访问我们应用【我使用时测试了一下，不设置&#x27;0.0.0.0&#x27;也能在另外一个台电脑上通过ip来访问，一般不需要配置】</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">7777</span>, <span class="comment">// 端口号，某些情况下可能出现端口号会被占用，那么可以配置其它的端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 默认打开浏览器，也可以设置为类似于`Google Chrome`等值</span></span><br><span class="line">    <span class="comment">// compress: true, // 默认值是false，gzip压缩，能够提高传输速度【一般不用配置，因为我们本地访问，还要压缩成本】</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// &quot;/api&quot;: &quot;http://localhost:8888&quot;, // &quot;/api&quot;是个映射，如果现在请求的是/api，到时候可以代理到配置的这个地址，这也是为什么我们在发请求时里面请求地址是/api/comments，值是API服务器地址【但是这个字符串写法会有问题】</span></span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:8888&quot;</span>, <span class="comment">// API服务器地址</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> <span class="comment">// 这个主要是去掉映射时拼接的地址中间多个/api</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>, <span class="comment">// 默认情况下不接收转发到https的服务器上，如果希望支持，可以设置为false</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 它表示是否更新代理后请求的headers中host地址为target【在vue-cli3中默认为true，vue-cli2默认为false，Request Headers中查看host，浏览器他不会直观给你看，始终都是本地服务的host，但其实设置生效了，在后端request.getHeader(&quot;Host&quot;)可以获取到】</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="comment">// 配置代理</span></span><br><span class="line">  &#125;, <span class="comment">// 注意这个是没有先后顺序，个人习惯写在这里</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="webpack-prod-config-js文件代码如下"><a href="#webpack-prod-config-js文件代码如下" class="headerlink" title="webpack.prod.config.js文件代码如下"></a><code>webpack.prod.config.js</code>文件代码如下</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们需要从clean-webpack-plugin插件中取出CleanWebpackPlugin类，因为插件一般给它封装成class</span></span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="comment">// 复制功能copy-webpack-plugin插件</span></span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;copy-webpack-plugin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意webpack是运行在node环境下，使用require导入merge函数【commonJS规范】</span></span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack-merge&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入公共配置</span></span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">&quot;./webpack.comm.config&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意使用merge函数合并一下</span></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonConfig, &#123;</span><br><span class="line">  <span class="comment">// 设置模式</span></span><br><span class="line">  <span class="comment">// development 开发阶段，会设置development</span></span><br><span class="line">  <span class="comment">// production 准备打包上线的时候，设置production</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>, <span class="comment">// 开发模式，我们可以看到打包的js文件里有很多eval函数，这是因为devtool默认为eval</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(), <span class="comment">// 格式：根据CleanWebpackPlugin类创建出对象</span></span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">from</span>: <span class="string">&quot;./public&quot;</span>, <span class="comment">// 从哪个文件夹里复制</span></span><br><span class="line">          <span class="attr">to</span>: <span class="string">&quot;./&quot;</span>, <span class="comment">// 复制到哪个文件夹【注意它是在打包文件夹基础上，这里也可以不写，默认就是打包文件夹】</span></span><br><span class="line">          <span class="attr">globOptions</span>: &#123;</span><br><span class="line">            <span class="attr">ignore</span>: [</span><br><span class="line">              <span class="string">&quot;**/index.html&quot;</span> <span class="comment">// 注意这两个**表示当前public文件夹下index.html以及子文件夹下的index.html</span></span><br><span class="line">            ]</span><br><span class="line">          &#125; <span class="comment">// globOptions.ignore忽略某个文件，可以过滤掉某些不需要复制的文件如index.html模板</span></span><br><span class="line">        &#125;</span><br><span class="line">      ] <span class="comment">// patterns匹配的意思</span></span><br><span class="line">    &#125;), <span class="comment">// 复制功能插件</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote><p>至此，<code>webpack5</code>告一段落了❤</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack5-server篇(七)</title>
      <link href="/archives/73e47a95.html"/>
      <url>/archives/73e47a95.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <p>💻Installation<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/coding327/learn_webpack5.git</span><br></pre></td></tr></table></figure></p><h2 id="webpack-server篇"><a href="#webpack-server篇" class="headerlink" title="webpack-server篇"></a>webpack-server篇</h2><blockquote><p>为什么要搭建本地服务器?</p></blockquote><p>这里我先补充一下，<code>vscode</code>要安装一个<code>live server</code>插件，因为它不需要我们去刷新页面，我们将它与<code>webpack</code>搭配使用<br>我们每次修改了源代码，比如在<code>main.js</code>中多了一行打印，我们还要再次手动打包，在浏览器中打开，这样很麻烦</p><p>通过搭建<code>server</code>我们想达到的效果：</p><ul><li><code>src</code>为咱们源代码文件夹，其中源代码是随时都可能进行修改，当它修改后我希望实时的能够在浏览器上看到对应的效果;</li><li>那么我打算对这个源代码做一个实时的更新，一旦你代码发生改变的时候，<code>webpack</code>可以自动的来做一个编译，并且立马给我反应到浏览器上<blockquote><p>搭建<code>server</code></p></blockquote></li></ul><p>为了完成自动编译，<code>webpack</code>提供了几种可选的方式:</p><ul><li><code>webpack watch mode</code> ;</li><li><code>webpack-dev-server</code>(常用）;</li><li><code>webpack-dev-middleware</code> ;</li></ul><h2 id="Webpack-watch【真实开发使用不多】"><a href="#Webpack-watch【真实开发使用不多】" class="headerlink" title="Webpack watch【真实开发使用不多】"></a>Webpack watch【真实开发使用不多】</h2><p><code>webpack</code>给我们提供了<code>watch</code>模式:</p><ul><li>在该模式下，<code>webpack</code>依赖图中的所有文件，只要有一个发生了更新，那么代码将被重新编译;</li><li>我们<strong>不需要手动</strong>去运行<code>npm run build</code>指令了;</li></ul><p>如何开启<code>watch</code>呢?两种方式:</p><ul><li>方式一︰ 在启动<code>webpack</code>的命令中，添加<code>--watch</code>的标识 ;</li><li>方式二︰ 在导出的配置中，添加<code>watch: true</code> ;</li></ul><ol><li><p>演示方式一<br>回到<code>package.json</code>文件中，我们需要给打包执行的脚本添加<code>--watch</code>的标识</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack --watch&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你添加上这个<code>--watch</code>的标识后，它会被<code>webpack-cli</code>处理，把这个选型变成一个配置，就是导出的<code>watch: true</code><br>然后进行打包，使用<code>live server</code>打开<code>index.html</code>文件，运行正常，这时我们再到<code>main.js</code>文件中编写一行打印<code>123</code>，发现浏览器也更新<br>其实我们也能发现<code>--watch</code>相当于监听源代码，而<code>live server</code>不需要我们再刷新页面，它其实是在监听打包后的代码【<code>live server</code>本身就是监听你所打开的文件】</p></li><li><p>演示方式二<br>这里我们先把<code>package.json</code>里的<code>--watch</code>去掉，回到<code>webpack.config.js</code>文件中，添加配置选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>, <span class="comment">// 默认为eval包裹着源代码，一般我们是设置为source-map，作用是在生成打包文件时，它也会生成source-map文件，再次打包发现项目根目录多了个main.js.map文件，它其实就是个映射文件，它可以把打包的js文件映射到真实开发环境的源代码里面</span></span><br><span class="line">  <span class="attr">watch</span>: <span class="literal">true</span>, <span class="comment">// 监听源代码是否发生改变，改变就重新进行编译，而不需要再手动打包</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>然后再次打包，测试一下，正常</p><h2 id="webpack-dev-server【推荐】"><a href="#webpack-dev-server【推荐】" class="headerlink" title="webpack-dev-server【推荐】"></a>webpack-dev-server【推荐】</h2><p>关于<code>watch</code>上面的方式可以监听到文件的变化，但是事实上它本身是没有自动刷新浏览器的功能的:</p><ul><li>当然，目前我们可以在<code>VSCode</code>中使用<code>live-server</code>来完成这样的功能;</li><li>但是，我们希望在不使用<code>live-server</code>的情况下，可以具备<code>live reloading</code>(实时重新加载）的功能;</li><li>另外一方面我使用<code>watch</code>感觉它有延迟，并且监听不及时，效率不高;<br>安装<code>webpack-dev-server</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure></li></ul><p>在我们早期<code>webpack3</code>之前的时候，启动<code>webpack</code>的时候是需要从<code>webpack-dev-server</code>中启动，但是现在有了<code>webpack-cli</code>，启动不需要从<code>webpack-dev-server</code>中启动</p><p>如果你做过<code>vue</code>或者<code>react</code>开发的话，我们一般情况下会在这个<code>package.json</code>文件中有两个脚本：</p><ul><li><code>build</code>: 对我们当前代码来打包，最终交付给部署人员上线用;</li><li><code>serve</code>或者<code>dev</code>: 给我们开启一个本地服务，方便进行本地开发的;</li></ul><p>目前在我们的脚本里面就一个<code>build</code>，现在我们可以在它下面添加一个脚本<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;serve&quot;</span>: <span class="string">&quot;webpack serve&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最终它内部是会找到这个<code>dev-server</code>，帮助我们启动本地服务<br>执行这个新脚本<code>npm run serve</code>，我的终端显示成功，并且它给了一个运行地址，浏览器上运行正常，但是<code>build</code>文件夹下没有任何文件【为什么没文件，后面细节里会专门谈到】，然后在终端发现有如下警告：<br><code>No need to use the &#39;serve&#39; command together with &#39;&#123; watch: true &#125;&#39; configuration, it does not make sense.</code></p><p>意思是：现在如果使用<code>serve</code>这个东西，不需要和我们<code>watch</code>一起来使用，所以把我们之前在<code>webpack.config.js</code>文件中配置的<code>watch</code>选项移除掉【当然这里我是注释掉了】</p><p>重新再来运行一下<code>npm run serve</code>，也是给了个地址，运行正常，也能实时更新</p><p>我们访问的这个地址<code>localhost:8080</code>不再是<code>live server</code>帮助我们开启的，而是我们当前<code>dev-server</code>自动给我们搭建了一个本地服务器，其实是基于<code>express</code>框架搭建的一个本地服务器，相当于去访问我们这个地址的时候，它就会来到框架搭建的这个服务器里面，去找到我们刚才打包的这些静态资源，把这些静态资源返回给我们的浏览器，浏览器对这些静态资源做一个展示</p><h2 id="关于dev-server一些细节"><a href="#关于dev-server一些细节" class="headerlink" title="关于dev-server一些细节"></a>关于dev-server一些细节</h2><ol><li><p>我们当前<code>dev-server</code>是没有做任何的配置，我们只是在<code>webpack</code>后面加了个<code>serve</code>参数，它就能自动启动了，这个自动启动其实也是通过我们的<code>webpack-cli</code>发现有这么一个<code>serve</code>参数，就会利用<code>dev-server</code>帮助我们启动一个本地服务了</p></li><li><p>由于会利用这个<code>dev-server</code>启动本地服务，这个<code>dev-server</code>不会对我们源代码打包之后生成我们的目标代码的，打开这个<code>build</code>打包文件夹里面没有任何内容，就意味着对于源代码打包之后并没有输出打包文件，那我们静态资源是如何进行访问呢？<br>其实<code>webpack-dev-server</code>他也依然是有对于我们的源代码进行编译和打包的，只是它没有做文件输出【文件写入】，而这个打包好的文件它其实是放在内存里面，通过<code>express</code>服务器去访问我们之前打包到内存里的这些静态资源，从浏览器访问它也是从内存里面直接去读取我们对应的一个资源，然后再返回给浏览器的</p></li><li><p>它不做输出主要是因为假如说我们现在打包完之后，先给它输出到<code>build</code>文件夹里面了，如果用户进行访问了，你得让<code>express</code>服务器先从文件系统里面把我们对应的资源读取到内存里面再转化为一些数据流再返回给浏览器，但是<code>webpack-dev-server</code>为了提高开发效率，它会直接把打包之后对应得资源直接放到内存里面，相当于少了一个从文件读取到内存的一个过程，这样提供服务的一个服务器效率更高一点</p></li><li><p>它保存到内存中实际上用了一个库叫<code>memfs</code>(<code>memory-fs</code>, <code>webpack</code>自己写的)</p></li></ol><h2 id="关于dev-server的配置"><a href="#关于dev-server的配置" class="headerlink" title="关于dev-server的配置"></a>关于dev-server的配置</h2><p><a href="https://webpack.js.org/guides/development/#using-webpack-dev-server">dev-server官方文档</a></p><h2 id="static配置项"><a href="#static配置项" class="headerlink" title="static配置项"></a>static配置项</h2><ol><li>第一个配置项是<code>static</code>，以前是<code>contentBase</code>但是已经被废弃了<br>做这个配置，回到<code>webpack.config.js</code>文件中<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;./build/&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/main.js&quot;</span>,</span><br><span class="line">    <span class="comment">// assetModuleFilename: &#x27;img/[name]_[hash:6][ext][query]&#x27;, // webpack5最新自定义文件名，generator.filename优先级比它高</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">static</span>: <span class="string">&quot;./public&quot;</span>, <span class="comment">// 【这个一般都是public】之前public文件夹里的内容用了复制插件，复制到打包文件夹下的，但是一般在开发环境我们不使用这个复制插件，每次复制很费性能，但这样其中文件就无法访问到，而这里指定的public到时候服务访问不到的文件就会访问这个文件夹里的内容</span></span><br><span class="line">  &#125;, <span class="comment">// 注意这个是没有先后顺序，个人习惯写在这里</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这个<code>static</code>主要作用是之前<code>public</code>文件夹里的内容用了复制插件，复制到打包文件夹下的，但是一般在开发环境我们不使用这个复制插件，每次复制很费性能，但这样其中文件就无法访问到，而这里指定的<code>public</code>到时候服务访问不到就访问这个文件夹里的内容</p><p>如果把复制功能插件注释掉，运行服务，肯定是有些内容无法显示，如<code>favicon.ico</code>，但是配置了<code>static: &quot;./public&quot;</code>再运行服务，就能正常显示了，因为它会去指定的这个<code>public</code>文件夹下找对应的文件</p><h2 id="认识模块热替换-HMR"><a href="#认识模块热替换-HMR" class="headerlink" title="认识模块热替换(HMR)"></a>认识模块热替换(HMR)</h2><blockquote><p>什么是<code>HMR</code>呢?</p></blockquote><ul><li><code>HMR</code>的全称是 <strong><code>Hot Module Replacement</code></strong>，翻译为<strong>模块热替换</strong> ;</li><li>模块热替换是指在<strong>应用程序运行过程中，替换、添加、删除模块</strong>，而<strong>无需重新刷新整个页面</strong> ;</li></ul><blockquote><p>为什么需要热替换？</p></blockquote><ul><li>像之前的配置，其实每次修改源代码之后，<code>dev-server</code>它都会帮我们刷新页面，但如果是登陆状态【实际开发这种状态是很多的】，我想保持这个登陆状态，而去修改其它地方源代码，那么它肯定会刷新，这个登陆状态不就相当于重置了吗，所以需要热替换</li><li>性能问题，我修改的仅是一处，如果项目比较大，那么就需要浏览器去加载我们整个页面里面所有的内容，那肯定非常消耗性能</li></ul><p><code>HMR</code>通过如下几种方式，来提高开发的速度:</p><ul><li>不重新加载整个页面，这样可以保留某些应用程序的状态不丢失;</li><li>只更新需要变化的内容，节省开发的时间;</li><li>修改了<code>css</code>、<code>js</code>源代码，会立即在浏览器更新，相当于直接在浏览器的<code>devtools</code>中直接修改样式;</li></ul><blockquote><p>如何使用<code>HMR</code>呢?</p></blockquote><ul><li>默认情况下，<code>webpack-dev-server</code>已经支持<code>HMR</code>，我们只需要开启即可;</li><li>在不开启<code>HMR</code>的情况下，当我们修改了源代码之后，整个页面会自动刷新，使用的是<code>live reloading</code>;</li></ul><p>回到<code>webpack.config.js</code>文件中进行配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;web&quot;</span>, <span class="comment">// 如果是为node环境打包的就写上node,一般是为web环境打包，因为我们项目代码跑在web环境下面【与热替换搭配使用才能保证热替换没有任何问题，万无一失】</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;./build/&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/main.js&quot;</span>,</span><br><span class="line">    <span class="comment">// assetModuleFilename: &#x27;img/[name]_[hash:6][ext][query]&#x27;, // webpack5最新自定义文件名，generator.filename优先级比它高</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">static</span>: <span class="string">&quot;./public&quot;</span>, <span class="comment">// 【这个一般都是public】之前public文件夹里的内容用了复制插件，复制到打包文件夹下的，但是一般在开发环境我们不使用这个复制插件，每次复制很费性能，但这样其中文件就无法访问到，而这里指定的public到时候服务访问不到的文件就会访问这个文件夹里的内容</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 开启模块热替换【注意要与target搭配才是最好的，不然只开启会有点问题，target一般放最上面】</span></span><br><span class="line">  &#125;, <span class="comment">// 注意这个是没有先后顺序，个人习惯写在这里</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重新运行一下服务，这里我们先注意一下我们控制台里面有这样一个<code>log</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[HMR] Waiting for update signal from WDS...</span><br></pre></td></tr></table></figure><br><code>HMR</code>正在等待更新信号从<code>webpack-dev-server</code><br>这时候我们在<code>element.js</code>文件里添加个打印123，正常打印123，接着我们在把这个123修改为456，也是没问题<br>那么它是通过<code>HMR</code>做了个替换呢，还是刷新整个浏览器了？<br>其实它是刷新整个浏览器了，这里我们可以通过打印就能判断出，因为打印123消失了，控制台没有，这是原因之一，同时，在我们更改打印的值时，我们可以快速切换至浏览器，观察发现它其实是有一个刷新的效果的</p><p>明明设置了热替换，为什么没有其起效果呢？<br><code>webpack</code>默认情况下，它不知道对哪些模块做热替换，相当于它认为现在所有模块改变都是要刷新浏览器的，有某个模块你想要做模块热替换，导入这个模块的时候你还需要使用一个<code>accept</code>方法也指定这个模块，比如<code>element.js</code>这个模块，我想做模块热替换，我们需要在<code>main.js</code>文件中处理<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 使用import引入文件，和main.js产生依赖关系</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./js/element&quot;</span></span><br><span class="line"><span class="comment">// 对element.js模块做模块热替换【module是全局的对象】</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123; <span class="comment">// 判断有没有开启模块热替换</span></span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">&quot;./js/element.js&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模块更新的时候会触发这个回调，你可以做一些自己想做的事情</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;element.js模块发生更新了&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>重新运行服务，修改打印的值，就可以看到控制台留下很多之前打印的值，并且<code>HMR</code>也有手动信号<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[HMR] Checking for updates on the server...</span><br></pre></td></tr></table></figure><br>那么其它模块也要做替换呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 使用import引入文件，和main.js产生依赖关系</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./js/element&quot;</span></span><br><span class="line"><span class="comment">// 【module是全局的对象】</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123; <span class="comment">// 判断有没有开启模块热替换</span></span><br><span class="line">  <span class="comment">// 对element.js模块做模块热替换</span></span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">&quot;./js/element.js&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模块更新的时候会触发这个回调，你可以做一些自己想做的事情【也可以不传递回调】</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;element.js模块发生更新了&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 对xx模块做模块热替换</span></span><br><span class="line">  <span class="comment">// module.hot.accept(&quot;xxx&quot;, () =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   // 模块更新的时候会触发这个回调，你可以做一些自己想做的事情【也可以不传递回调】</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>但是在真实开发里面不可能这么麻烦，写这么多热替换代码</p><h2 id="框架的HMR"><a href="#框架的HMR" class="headerlink" title="框架的HMR"></a>框架的HMR</h2><p>有一个问题: 在开发其他项目时，我们是否需要经常手动去写入<code>module.hot.accept</code>相关的<code>API</code>呢?</p><ul><li>比如开发<code>Vue</code>、<code>React</code>项目，我们修改了组件，希望进行热更新，这个时候应该如何去操作呢?</li><li>事实上社区已经针对这些有很成熟的解决方案了;</li><li>比如<code>vue</code>开发中，我们使用<code>vue-loader</code>，此<code>loader</code>支持<code>vue</code>组件的<code>HMR</code>，提供开箱即用的体验;</li><li>比如<code>react</code>开发中，有<code>React Hot Loader</code>，实时调整<code>react</code>组件（目前<code>React</code>官方已经弃用了，改成使用<code>react-refresh</code> );</li></ul><p>接下来我们来演示一下<code>Vue</code>实现一下<code>HMR</code>功能<br>重新运行服务，我们去<code>App.vue</code>中，更改<code>message</code>，浏览器控制台是有这么几条打印的结果的<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[HMR]  - ./src/vue/App.vue?vue&amp;type=script&amp;lang=js</span><br><span class="line">log.js:24 [HMR]  - ./src/vue/App.vue?vue&amp;type=script&amp;lang=js</span><br><span class="line">log.js:24 [HMR]  - ./src/vue/App.vue</span><br><span class="line">log.js:16 [HMR]  - ./src/vue/App.vue?vue&amp;type=template&amp;id=5e019a2f&amp;scoped=true</span><br><span class="line">log.js:24 [HMR]  - ./src/vue/App.vue?vue&amp;type=template&amp;id=5e019a2f&amp;scoped=true</span><br><span class="line">log.js:16 [HMR]  - ./src/vue/App.vue?vue&amp;type=style&amp;index=0&amp;id=5e019a2f&amp;scoped=true&amp;lang=css</span><br><span class="line">log.js:24 [HMR] App is up to date.</span><br></pre></td></tr></table></figure></p><p>这就是<code>vue</code>的模块热替换，其实它是被<code>vue-loader</code>已经内置了，开箱即用</p><h2 id="HMR的原理"><a href="#HMR的原理" class="headerlink" title="HMR的原理"></a>HMR的原理</h2><p>那么<code>HMR</code>的原理是什么呢?如何可以做到只更新一个模块中的内容呢?</p><ul><li><code>webpack-dev-server</code>会创建两个服务∶提供静态资源的服务(<code>express</code>)和<code>Socket</code>服务(<code>net.Socket</code>);</li><li><code>express server</code>负责直接提供静态资源的服务(打包后的资源直接被浏览器请求和解析);</li></ul><p><code>HMR Socket Server</code>，是一个<code>socket</code>的长连接:</p><ul><li>长连接有一个最好的好处是建立连接后双方可以通信（服务器可以直接发送文件到客户端);</li><li>当服务器监听到对应的模块发生变化时，会生成两个文件<code>.json</code>(<code>manifest</code>文件)和<code>.js</code>文件(update chunk)</li><li>通过长连接，可以直接将这两个文件主动发送给客户端(浏览器);</li><li>浏览器拿到两个新的文件后，通过<code>HMR runtime</code>机制，加载这两个文件，并且针对修改的模块进行更新;</li></ul><h2 id="HMR的原理图"><a href="#HMR的原理图" class="headerlink" title="HMR的原理图"></a>HMR的原理图</h2><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10181.jpg" alt="10181"></p><ul><li><p>一旦开启<code>HMR</code>，它会另外开启一个<code>HMR Server</code>模块热替换的服务，这个服务的本质是<code>Socket Server</code>，它主要是用于建立长连接的，一般用于即使通信【微信、直播里的聊天、送礼物】</p></li><li><p>一般<code>Http</code>服务器建立的是<code>Http</code>连接，也称为短连接，短连接一般有这么一个过程，客户端发送<code>http</code>请求—&gt;和服务器建立连接—&gt;服务器做出响应—&gt;断开连接，为什么断开连接呢？<br>因为我们服务器一般能承受的连接数是有限的，如果同一时刻有很多的连接向我们的服务器请求资源，服务器的压力太大了，所以一般情况下就会断开连接</p></li></ul><h2 id="hotOnly、host配置项"><a href="#hotOnly、host配置项" class="headerlink" title="hotOnly、host配置项"></a>hotOnly、host配置项</h2><p><code>host</code>设置主机地址:</p><ul><li>默认值是<code>localhost</code> ;</li><li>如果希望其他地方也可以访问，可以设置为<code>0.0.0.0</code>;</li></ul><p><code>localhost</code>和<code>0.0.0.0</code>的区别:</p><ul><li><code>localhost</code>: 本质上是一个域名，通常情况下会被解析成<code>127.0.0.1</code>;</li><li><code>127.0.0.1</code>: 回环地址(<code>Loop Back Address</code>)，表达的意思其实是我们主机自己发出去的包，直接被自己接收;<ul><li>正常的数据库包经常应用层–传输层–网络层–数据链路层–物理层;</li><li>而回环地址，是在网络层直接就被获取到了，是不会经常数据链路层和物理层的;</li><li>比如我们监听<code>127.0.0.1</code>时，在同一个网段下的主机中，通过<code>ip</code>地址是不能访问的;</li></ul></li><li><code>0.0.0.0</code>∶ 监听<code>IPV4</code>上所有的地址，再根据端口找到不同的应用程序;<ul><li>比如我们监听<code>0.0.0.0</code>时，在同一个网段下的主机中，通过<code>ip</code>地址是可以访问的;</li></ul></li></ul><p>将<code>webpack</code>中的<code>host</code>配置成<code>0.0.0.0</code>的好处是访问项目既可以使用 <code>localhost</code> 又能使用<code>ip</code>访问，这样不需要来回修改<code>host</code>，因为给别人访问时，必须使用<code>ip</code>才行，这样不限定<code>ip</code>能让团队每个开发都保持一致</p><p>这里我和下面端口号一起演示，只要配置一下<code>host</code>即可，一般我们都是不设置就用默认的<code>localhost</code><br>主要是因为<code>webpack</code>最新版本不需要设置<code>host: &#39;0.0.0.0&#39;</code>，默认就用<code>localhost</code>，这个<code>0.0.0.0</code>是在同一个网段下，另外一台电脑也能通过<code>ip</code>来访问我们应用【我使用时测试了一下，不设置<code>host: &#39;0.0.0.0&#39;</code>也能在另外一个台电脑上通过<code>ip</code>来访问，这个功能相当于在<code>webpack5</code>内置了】</p><h2 id="port、open、compress配置项"><a href="#port、open、compress配置项" class="headerlink" title="port、open、compress配置项"></a>port、open、compress配置项</h2><p><code>port</code>设置监听的端口，默认情况下是<code>8080</code><br><code>open</code>是否打开浏览器:</p><ul><li>默认值是<code>false</code>，设置为<code>true</code>会打开浏览器;</li><li>也可以设置为类似于<code>Google Chrome</code>等值;</li><li>这个值还可以设置在脚本中，即<code>&quot;serve&quot;: &quot;webpack serve --open&quot;</code>，当然类似这种参数都会被<code>webpack-cli</code>解析为<code>dev-server</code>的配置项<br><code>compress</code>是否为静态文件开启<code>gzip compression</code>:</li><li>默认值是<code>false</code>，可以设置为<code>true</code> ;</li><li><code>bundle.js</code>【我这里是<code>main.js</code>】做一个<code>gzip</code>压缩【<code>index.html</code>没有做压缩】，浏览器请求到后他识别到是<code>gzip</code>就会对其解压，把我们解压之后的内容做一个展示，做了这个压缩会让它传输更快一点</li></ul><p>回到<code>webpack.config.js</code>把以上配置项配置一下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;web&quot;</span>, <span class="comment">// 如果是为node环境打包的就写上node,一般是为web环境打包，因为我们项目代码跑在web环境下面【与热替换搭配使用才能保证热替换没有任何问题，万无一失】</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;./build/&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/main.js&quot;</span>,</span><br><span class="line">    <span class="comment">// assetModuleFilename: &#x27;img/[name]_[hash:6][ext][query]&#x27;, // webpack5最新自定义文件名，generator.filename优先级比它高</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">static</span>: <span class="string">&quot;./public&quot;</span>, <span class="comment">// 【这个一般都是public】之前public文件夹里的内容用了复制插件，复制到打包文件夹下的，但是一般在开发环境我们不使用这个复制插件，每次复制很费性能，但这样其中文件就无法访问到，而这里指定的public到时候服务访问不到某些文件就会访问这个文件夹里的内容</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 开启模块热替换【注意要与target搭配才是最好的，不然只开启会有点问题，target一般我习惯放在最上面】</span></span><br><span class="line">    <span class="comment">// host: &#x27;0.0.0.0&#x27;, // webpack最新版本不需要设置host: &#x27;0.0.0.0&#x27;，默认就用localhost，这个0.0.0.0是在同一个网段下，另外一台电脑也能访问我们应用【我使用时测试了一下，不设置&#x27;0.0.0.0&#x27;也能在另外一个台电脑上通过ip来访问，一般不需要配置】</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">7777</span>, <span class="comment">// 端口号，某些情况下可能出现端口号会被占用，那么可以配置其它的端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 默认打开浏览器，也可以设置为类似于`Google Chrome`等值</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>, <span class="comment">// 默认值是false，gzip压缩，能够提高传输速度【一般不用配置，因为我们本地访问，还要压缩成本】</span></span><br><span class="line">  &#125;, <span class="comment">// 注意这个是没有先后顺序，个人习惯写在这里</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>浏览器控制台我们来查看一下是否有做<code>gzip</code>压缩：<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10182.png" alt="10182"></p><h2 id="Proxy代理配置项"><a href="#Proxy代理配置项" class="headerlink" title="Proxy代理配置项"></a>Proxy代理配置项</h2><p><code>proxy</code>是我们开发中非常常用的一个配置选项，它的目的设置代理来解决跨域访问的问题:</p><ul><li>比如我们的一个<code>api</code>请求是<code>http://localhost:8888</code>，但是本地启动服务器的域名是<code>http://localhost:7777</code>，这个时候发送网络请求就会出现跨域的问题;</li><li>那么我们可以将请求先发送到一个代理服务器，代理服务器和<code>API</code>服务器没有跨域的问题，就可以解决我们的跨域问题了;</li></ul><p>跨域：在我们当前页面发送请求<code>axios</code>，比如<code>http://localhost:7777</code>向<code>http://localhost:8000</code>发送请求端口号不一样，肯定会出现跨域，不会响应数据，报错跨域<br>解决方法：</p><ul><li>可以把我们当前页面静态资源和<code>api</code>服务器部署到一块去，比如都是同一个<code>tomcat</code>服务器、<code>express</code>服务器、<code>koa</code>服务器</li><li>服务器可能为了安全起见，就不会在同一个服务器，我们后端人员可以设置允许哪些来源跨域访问</li><li>可以搞个<code>nginx</code>代理，我们静态资源或者<code>api</code>都是通过这个<code>nginx</code>访问，再由<code>nginx</code>去访问我们静态资源和<code>api</code></li><li>以上解决方法都需要后端人员配合的，但在开发阶段，可能后端不会帮我们解决，我们会使用<code>proxy</code></li></ul><p>为了方便演示，这里安装一个<code>axios</code>库，用它来发请求<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios -S</span><br></pre></td></tr></table></figure></p><p>进入<code>main.js</code>中，发请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 导入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">&quot;http://localhost:8888/comment&quot;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>当我们这样去请求，肯定会报跨域错误<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XNLHttpRequest at &#x27;http://localhost:8888/comments&#x27; from origin &#x27;http://localhost:7777&#x27; has been blocked by CORS policy:No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure></p><p>配置<code>proxy</code>，回到<code>webpack.config.js</code>文件中在<code>devServer</code>中配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;web&quot;</span>, <span class="comment">// 如果是为node环境打包的就写上node,一般是为web环境打包，因为我们项目代码跑在web环境下面【与热替换搭配使用才能保证热替换没有任何问题，万无一失】</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;./build/&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/main.js&quot;</span>,</span><br><span class="line">    <span class="comment">// assetModuleFilename: &#x27;img/[name]_[hash:6][ext][query]&#x27;, // webpack5最新自定义文件名，generator.filename优先级比它高</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">static</span>: <span class="string">&quot;./public&quot;</span>, <span class="comment">// 【这个一般都是public】之前public文件夹里的内容用了复制插件，复制到打包文件夹下的，但是一般在开发环境我们不使用这个复制插件，每次复制很费性能，但这样其中文件就无法访问到，而这里指定的public到时候服务访问不到某些文件就会访问这个文件夹里的内容</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 开启模块热替换【注意要与target搭配才是最好的，不然只开启会有点问题，target一般我习惯放在最上面】</span></span><br><span class="line">    <span class="comment">// host: &#x27;0.0.0.0&#x27;, // webpack最新版本不需要设置host: &#x27;0.0.0.0&#x27;，默认就用localhost，这个0.0.0.0是在同一个网段下，另外一台电脑也能访问我们应用【我使用时测试了一下，不设置&#x27;0.0.0.0&#x27;也能在另外一个台电脑上通过ip来访问，一般不需要配置】</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">7777</span>, <span class="comment">// 端口号，某些情况下可能出现端口号会被占用，那么可以配置其它的端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 默认打开浏览器，也可以设置为类似于`Google Chrome`等值</span></span><br><span class="line">    <span class="comment">// compress: true, // 默认值是false，gzip压缩，能够提高传输速度【一般不用配置，因为我们本地访问，还要压缩成本】</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: <span class="string">&quot;http://localhost:8888&quot;</span>, <span class="comment">// &quot;/api&quot;是个映射，如果现在请求的是/api，到时候可以代理到配置的这个地址，这也是为什么我们在发请求时里面请求地址是/api/comments，值是API服务器地址【但是这个字符串写法会有问题】</span></span><br><span class="line">    &#125; <span class="comment">// 配置代理</span></span><br><span class="line">  &#125;, <span class="comment">// 注意这个是没有先后顺序，个人习惯写在这里</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于这个<code>devServer</code>就是一个本地服务，它就是一个<code>express</code>服务器，当服务器向另外一台服务器发送请求是没有跨域问题的，因为跨域问题最主要还是浏览器的一个同源策略限制，等到另外一台服务器把数据给我返回回来，再由我们这个<code>devServer</code>的<code>express</code>服务器，再返回给我们浏览器<br>当然这是开发阶段，最终部署阶段肯定还是要和后端开发人员商定的</p><p>接着说上面代理，其中<code>/api</code>是个映射，如果现在请求的是<code>/api</code>，到时候可以代理到配置的这个地址，这也是为什么我们在发请求时里面请求地址是<code>/api/comments</code>，但是这个字符串写法会有问题<br>项目运行一下，可以发现浏览器控制台跨域报错已经没有了，但是却发现另外一个报错，资源加载不到当前服务响应是<code>404</code><br>加载不到的原因是由于这个请求做了代理，我们发请求的地址<code>/api/comments</code>会因为映射的原因[识别/api开头]，最终是会与代理的地址做拼接的，变成<code>http://localhost:8888/api/comments</code>，很显然中间多了个<code>/api</code>，这个官方文档也有说明，而这个地址最终本地服务器会向这个地址发请求</p><p><a href="https://webpack.js.org/configuration/dev-server/#devserverproxy">proxy配置项官方文档</a></p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10183.png" alt="10183"></p><p>所以在开发中，我们应该像下面这样写，去掉其中的<code>/api</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">proxy: &#123;</span><br><span class="line">  <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&quot;http://localhost:8888&quot;</span>, <span class="comment">// API服务器地址</span></span><br><span class="line">    <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">      <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> <span class="comment">// 这个主要是去掉映射时拼接的地址中间多个/api</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">secure</span>: <span class="literal">false</span>, <span class="comment">// 默认情况下不接收转发到https的服务器上，如果希望支持，可以设置为false</span></span><br><span class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 它表示是否更新代理后请求的headers中host地址为target【在vue-cli3中默认为true，vue-cli2默认为false，Request Headers中查看host，浏览器他不会直观给你看，始终都是本地服务的host，但其实设置生效了，在后端request.getHeader(&quot;Host&quot;)可以获取到】</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">// 配置代理</span></span><br></pre></td></tr></table></figure></p><p>额外补充两个参数：</p><ul><li><code>secure</code>: false; 默认情况下不接收转发到<code>https</code>的服务器上，如果希望支持，可以设置为<code>false</code> ;</li><li><code>changeOrigin</code>: true; 它表示是否更新代理后请求的<code>headers</code>中<code>host</code>地址【服务器会做校验，请求的源(协议域名端口号)恢复到header中，防止拿的是源代码里的请求地址源，源代码里的请求地址是<code>http://localhost:7777/api/comments</code>，本地服务器拿这个地址源肯定会失败，设置为true，更新为代理地址<code>http://localhost:8888/comments</code>的源就没问题了，因为服务器地址就是<code>http://localhost:8888</code>】，源码它是这样实现的，判断设置为true，直接就拿target放到header中 ;</li></ul><p>以上代理就设置成功了，运行一下，数据也能成功接收<br>这里我说一个细节，做了代理后，我们可以在浏览器控制台看到请求地址<code>http://localhost:7777/api/comments</code>，当前页面地址是<code>http://localhost:7777</code>，它们都来自于本地服务器，自然没有跨域问题，请求地址实际上是本地服务器帮我们做的拼接</p><h2 id="historyApiFallback配置项"><a href="#historyApiFallback配置项" class="headerlink" title="historyApiFallback配置项"></a>historyApiFallback配置项</h2><ul><li><code>historyApiFallback</code>是开发中一个非常常见的属性，它主要的作用是解决<code>SPA</code>页面在路由跳转之后，进行页面刷新时，返回404的错误。</li><li><code>boolean</code>值: 默认是<code>false</code><ul><li>如果设置为<code>true</code>，那么在刷新时，返回404错误时，会自动返回<code>index.html</code>的内容;</li></ul></li><li><code>object</code>类型的值，可以配置<code>rewrites</code>属性（了解）∶<ul><li>可以配置<code>from</code>来匹配路径，决定要跳转到哪一个页面;</li></ul></li><li>事实上<code>devServer</code>中实现<code>historyApiFallback</code>功能是通过<code>connect-history-api-fallback</code>库的∶<ul><li>可以查看<a href="https://github.com/bripkens/connect-history-api-fallback/blob/main/README.md">connect-history-api-fallback</a>文档</li></ul></li></ul><h2 id="以上devServer就差不多结束了"><a href="#以上devServer就差不多结束了" class="headerlink" title="以上devServer就差不多结束了"></a>以上devServer就差不多结束了</h2><h2 id="resolve模块解析"><a href="#resolve模块解析" class="headerlink" title="resolve模块解析"></a>resolve模块解析</h2><p><code>resolve</code>用于设置模块如何被解析∶</p><ul><li>在开发中我们会有各种各样的模块依赖，这些模块可能来自于自己编写的代码，也可能来自第三方库;</li><li><code>resolve</code>可以帮助<code>webpack</code>从每个<code>require/import</code>语句中，找到需要引入到合适的模块代码﹔</li><li><code>webpack</code>使用<code>enhanced-resolve</code>来解析文件路径﹔</li></ul><p><code>webpack</code>能解析三种文件路径:</p><ul><li>绝对路径: 由于已经获得文件的绝对路径，因此不需要再做进一步解析。</li><li>相对路径<ul><li>在这种情况下，使用<code>import</code>或<code>require</code>的资源文件所处的目录，被认为是上下文目录</li><li>在<code>import/require</code>中给定的相对路径，会拼接此上下文路径，来生成模块的绝对路径;</li></ul></li><li>模块路径<ul><li>在<code>resolve.modules</code>中指定的所有目录检索模块;</li><li>默认值是<code>[&#39;node_modules&#39;]</code>，所以默认会从<code>node_modules</code>中查找文件;</li><li>我们可以通过设置别名的方式来替换初识模块路径，具体后面讲解<code>alias</code>的配置;</li></ul></li></ul><p>回到webpack.config.js文件配置：注意它与<code>devServer</code>同级<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  <span class="attr">modules</span>: [<span class="string">&quot;node_modules&quot;</span>], <span class="comment">// 像vue它就会从这里面找【当然这个node_modules就是默认的，我们不需要设置】</span></span><br><span class="line">&#125;, <span class="comment">// 配置模块解析</span></span><br></pre></td></tr></table></figure></p><h2 id="extensions配置项确定文件还是文件夹"><a href="#extensions配置项确定文件还是文件夹" class="headerlink" title="extensions配置项确定文件还是文件夹"></a>extensions配置项确定文件还是文件夹</h2><p>如果是一个文件:</p><ul><li>如果文件具有扩展名，则直接打包文件;</li><li>否则，将使用<code>resolve.extensions</code>选项作为文件扩展名解析;<br>如果是一个文件夹:</li><li>会在文件夹中根据<code>resolve.mainFiles</code>配置选项中指定的文件顺序查找;<ul><li><code>resolve.mainFiles</code>的默认值是<code>[&#39;index&#39;]</code>;</li><li>再根据<code>resolve.extensions</code>来解析扩展名;</li></ul></li></ul><p>之前提到过，在导入时，<code>js</code>文件的后缀名是可以不用跟上的，但是<code>vue</code>文件的后缀名必须跟上【默认<code>extensions</code>数组里面没有<code>.vue</code>】，主要是因为<code>js</code>文件它会使用使用<code>resolve.extensions</code>选项作为文件扩展名解析，<code>extensions</code>就是个数组，里面放的是文件扩展名，从里面取出后缀名再和导入文件拼接，如果能匹配对应的文件就直接加载了，没有匹配到就把下一个后缀名加上去再匹配</p><p>回到<code>webpack.config.js</code>文件中配置，注意它是<code>resolve</code>的属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  <span class="comment">// modules: [&quot;node_modules&quot;], // 像vue它就会从这里面找【当然这个node_modules就是默认的，我们不需要设置】</span></span><br><span class="line">  <span class="comment">// extensions: [&quot;.js&quot;, &quot;.json&quot;, &quot;.wasm&quot;], // 从里面取出后缀名再和导入文件拼接，如果能匹配对应的文件就直接加载了，没有匹配到就把下一个后缀名加上去再匹配【我这里写的也是它默认的，不写，它其实就是这个数组】</span></span><br><span class="line">  <span class="attr">extensions</span>: [<span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.json&quot;</span>, <span class="string">&quot;.wasm&quot;</span>, <span class="string">&quot;.vue&quot;</span>, <span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.jsx&quot;</span>, <span class="string">&quot;.tsx&quot;</span>], <span class="comment">// 这样导入这些文件时就都不用添加后缀名</span></span><br><span class="line">&#125;, <span class="comment">// 配置模块解析</span></span><br></pre></td></tr></table></figure></p><p>如果是文件夹时，我们在<code>src</code>文件夹下创建一个<code>util</code>文件夹，里面创建个<code>index.js</code>文件，然后在<code>main.js</code>文件中以如下方式导入，不需要跟上<code>index.js</code>文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./util&quot;</span></span><br></pre></td></tr></table></figure></p><p>因为<code>webpack</code>里面的库它提供一个功能，它会自动的去找我们的<code>mainFiles</code>里面，这个我们一般不配置，它已经有个默认值了，它就会找到<code>index</code>，然后再根据上面<code>extensions</code>，相当于再加上后缀名，即<code>index.js</code></p><p>回到<code>main.js</code>文件中，把<code>.vue</code>后缀名去掉，重新运行一下，浏览器显示正常</p><h2 id="alias配置项起别名"><a href="#alias配置项起别名" class="headerlink" title="alias配置项起别名"></a>alias配置项起别名</h2><p>这个依旧是在<code>resolve</code>中配置，避免文件层级太深，路径写起来太长<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  <span class="comment">// modules: [&quot;node_modules&quot;], // 像vue它就会从这里面找【当然这个node_modules就是默认的，我们不需要设置】</span></span><br><span class="line">  <span class="comment">// extensions: [&quot;.js&quot;, &quot;.json&quot;, &quot;.wasm&quot;], // 从里面取出后缀名再和导入文件拼接，如果能匹配对应的文件就直接加载了，没有匹配到就把下一个后缀名加上去再匹配【我这里写的也是它默认的，不写，它其实就是这个数组】</span></span><br><span class="line">  <span class="attr">extensions</span>: [<span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.json&quot;</span>, <span class="string">&quot;.wasm&quot;</span>, <span class="string">&quot;.vue&quot;</span>, <span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.jsx&quot;</span>, <span class="string">&quot;.tsx&quot;</span>], <span class="comment">// 这样导入这些文件时就都不用添加后缀名</span></span><br><span class="line">  <span class="attr">alias</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src&quot;</span>), <span class="comment">// 一般用@来代表src</span></span><br><span class="line">    <span class="string">&quot;js&quot;</span>: path.resolve(__dirname, <span class="string">&quot;./src/js&quot;</span>)</span><br><span class="line">  &#125; <span class="comment">// 起别名</span></span><br><span class="line">&#125;, <span class="comment">// 配置模块解析</span></span><br></pre></td></tr></table></figure></p><p>我们可以在<code>main.js</code>文件中路径替换一下，运行测试也是没有问题的</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote><p>至此，<code>webpack5</code>的配置差不多说完了，配置过程中发现了有些地方<code>webpack5</code>还是有一点点小的问题，但是它并不影响我们开发项目，个人认为还是比较稳定的！</p></blockquote><p>下一篇应该就是最后一篇了，环境的分离~~~</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack5-vue篇(六)</title>
      <link href="/archives/ec0cf016.html"/>
      <url>/archives/ec0cf016.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <p>💻Installation<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/coding327/learn_webpack5.git</span><br></pre></td></tr></table></figure></p><h2 id="webpack-vue篇"><a href="#webpack-vue篇" class="headerlink" title="webpack-vue篇"></a>webpack-vue篇</h2><p>前面我们已经对于<code>js</code>代码进行打包了，其实我们编写的<code>vue</code>代码也是属于<code>js</code>代码<br>在<code>webpack</code>中，我们是通过<strong>模块</strong>去安装<code>vue</code>来使用它，这和<code>CDN</code>引入或者说把<code>vue</code>下载到本地，通过<code>script</code>再引入使用有点不同<br>因为在<code>webpack</code>我们是通过模块的方式来使用<code>vue</code>，所以这里我们安装一下<code>vue</code>核心代码包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vue3已经是默认版本了，所以这里没指定版本号，另外-S可以省略是因为npm5.0+开始默认会加入到生产环境</span></span><br><span class="line"><span class="comment"># 这里解释一下生产环境，最终打包部署到静态服务器，用户下载的时候还是需要vue相关的核心代码的</span></span><br><span class="line">npm install vue</span><br></pre></td></tr></table></figure></p><p>接着进入<code>src/main.js</code>文件中，去使用<code>vue</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在webpack中文件后缀可以省略，它会自动帮我们加上去</span></span><br><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&quot;./js/math&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从vue中引入createApp</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;priceFormat&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./js/format&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用import引入文件，和main.js产生依赖关系</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./js/element&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">20</span>, <span class="number">30</span>))</span><br><span class="line"><span class="built_in">console</span>.log(priceFormat())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于已经拿到createApp，这里我们就可以使用了</span></span><br><span class="line"><span class="comment">// 编写vue代码</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;h2&gt;Hello World&lt;/h2&gt;`</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 由于index.html中已经有咱们的挂载容器了，直接放选择器在里面</span></span><br><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure><br>我们写的这一系列<code>vue</code>代码是写在<strong><code>js</code>文件</strong>【先不说<code>vue</code>文件】中的，它本质也是<code>js</code>代码，所以应该是可以打包的<br>来打包测试一下，运行咱们打包文件夹里的<code>index.html</code>，并没有把我们模板里的<code>Hello World</code>给渲染出来，但是打包没有报错，也就是说渲染显示有问题<br>然后打开浏览器控制台再来看一下，发现有两条信息，<br>报错信息如下：<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10179.png" alt="10179"></p><p>这里直接说一下第一个并不是主要原因，先看第二个有<code>warn</code>的警告信息<br>大概意思就是：组件提供了模板选项，但是<code>runtime compilation</code>不支持打包的<code>vue</code>，然后需要配置<br>个人解释：我们编写的代码里面有个<code>template</code>，<code>Vue</code>源代码会对其进行解析，其实<code>Vue</code>源代码给我们提供了特别多的这个版本，所有的版本又把它分为了以下两类：</p><ul><li><code>Vue</code>版本一：<strong><code>runtime+compiler</code></strong></li><li><code>Vue</code>版本二：<strong><code>runtime-only</code></strong></li></ul><p>这个版本一中的<code>compiler</code>它的功能就是对<code>template</code>来做编译的，但是它默认用的是版本二，这个<code>runtime-only</code>不包含对<code>template</code>的编译</p><p>关于它<code>Vue</code>的这个源代码打包后，它可不止两个版本，这个我们可以去<code>node_modules/vue</code>下找到这个打包的<code>dist</code>文件夹，里面就有很多不同的版本</p><h2 id="Vue源代码打包后不同版本解析"><a href="#Vue源代码打包后不同版本解析" class="headerlink" title="Vue源代码打包后不同版本解析"></a>Vue源代码打包后不同版本解析</h2><ul><li><strong><code>vue(.runtime).global(.prod).js</code></strong> :<ul><li>通过浏览器中的<code>&lt;script src= &quot;.”&gt;</code>直接使用【<code>vue.global.js</code>】;</li><li>我们之前通过<code>CDN</code>引入和下载的<code>Vue</code>版本就是这个版本【<code>vue.global.js</code>】;</li><li>会暴露一个全局的<code>Vue</code>来使用;</li><li>关于<code>(.runtime)</code>即<code>vue.runtime.global.js</code>，<code>(.runtime)</code>可有可无，本来的包是<code>vue.global.js</code>，但是如果你只想用<code>runtime</code>的版本不包含<code>compiler</code>【不需要对<code>template</code>做编译】，打包的时候它就会更小一点，到时候引入【<code>vue.runtime.global.js</code>】;</li><li>关于<code>(.prod)</code>即<code>vue.global.prod.js</code>，<code>(.prod)</code>可有可无，<code>prod</code>表示的是<code>production</code>版本，它是做过压缩的 ;</li></ul></li><li><strong><code>vue(.runtime).esm-browser(.prod).js</code></strong> :<ul><li>用于通过原生<code>ES</code>模块导入使用(在浏览器中通过<code>&lt;script type=&quot;module&quot;&gt;</code>来使用) ;</li></ul></li><li><strong><code>vue(.runtime).esm-bundler.js</code></strong> :<ul><li>用于<code>webpack</code>，<code>rollup</code>和<code>parcel</code>等构建工具 ;</li><li>构建工具中默认是<code>vue.runtime.esm-bundler.js</code> ;</li><li>如果我们需要解析模板<code>template</code>，那么需要手动指定<code>vue.esm-bundler.js</code> ;</li></ul></li><li><strong><code>vue.cjs(.prod).js</code></strong> :<ul><li>服务器端渲染使用 ;</li><li>通过<code>require()</code>在<code>Node.js</code>中使用 ;</li></ul></li></ul><p>这里我们就去指定版本，回到<code>main.js</code>文件中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从vue中引入createApp，这里指定一下版本</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue/dist/vue.esm-bundler&quot;</span></span><br></pre></td></tr></table></figure></p><p>这时我们再重新打包运行一下，发现咱们的模板就显示出来了</p><h2 id="运行时-编译器-vs-仅运行时"><a href="#运行时-编译器-vs-仅运行时" class="headerlink" title="运行时+编译器 vs 仅运行时"></a>运行时+编译器 vs 仅运行时</h2><ul><li>在<code>Vue</code>的开发过程中我们有<strong>三种方式</strong>来编写<code>DOM</code>元素︰<ul><li>方式一: <code>template</code>模板的方式(之前经常使用的方式);</li><li>方式二: <code>render</code>函数的方式，使用<code>h</code>函数来编写渲染的内容;</li><li>方式三: 通过<code>.vue</code>文件中的<code>template</code>来编写模板;</li></ul></li><li>它们的模板分别是如何处理的呢?<ul><li>方式二中的<code>h</code>函数可以直接返回一个<strong>虚拟节点</strong>，也就是<code>Vnode</code>节点;</li><li>方式一和方式三的<code>template</code>都需要有<strong>特定的代码</strong>来对其进行解析∶<ul><li>方式三<code>.vue</code>文件中的<code>template</code>可以通过在<strong><code>vue-loader</code></strong>对其进行编译和处理</li><li>方式一中的<code>template</code>我们必须要<strong>通过源码中一部分代码</strong>来进行编译;</li></ul></li></ul></li><li>所以，<code>Vue</code>在让我们选择版本的时候分为<strong>运行时+编译器 vs 仅运行时</strong><ul><li><strong>运行时+编译器</strong>包含了对<code>template</code>模板的编译代码，更加完整，但是也更大一些;</li><li><strong>仅运行时</strong>没有包含对<code>template</code>版本的编译代码，相对更小一些;</li></ul></li></ul><blockquote><p>真实开发中，我们是不可能在配置项里的<code>template</code>中写很多代码的，既没有代码高亮，太多堆积在配置项中也不好</p></blockquote><p>所以这里我们先尝试把这个<code>template</code>中的这么多模板代码转移到<code>public/index.html</code>中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X一UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;TE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;my-app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- built files will be auto injected--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>接着我们还要做一个绑定，回到<code>main.js</code>文件中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 由于已经拿到createApp，这里我们就可以使用了</span></span><br><span class="line"><span class="comment">// 编写vue代码</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">  <span class="comment">// template: `&lt;h2&gt;Hello World&lt;/h2&gt;`,</span></span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;#my-app&quot;</span>, <span class="comment">// 把上面模板代码抽到index.html中，同时做绑定</span></span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 由于index.html中已经有咱们的挂载容器了，直接放选择器在里面</span></span><br><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure></p><p>接着进行打包，打包成功，浏览器运行也没有什么问题<br>但是它还是有弊端，一个是在<code>html</code>文件里面，一个是在<code>main.js</code>文件里面，这个源代码相当于分开的，当我们在数据仓库中添加数据时，还要跑到另外一个文件中去编写，并且当我们组件比较多时，还要在<code>html</code>文件中写一大堆<code>template</code>，结构就会太混乱了</p><p>之前也说过<code>createApp</code>里的配置项就是个<strong>组件</strong>【并且它还是个<strong>根组件</strong>】，我们想把这个根组件里的模板，加上逻辑，以及样式，把这三个整合到一个文件里面，也就是<code>.vue</code>文件，这个文件也称为<code>SFC</code>文件【<code>single-file-components</code>(单文件组件)】</p><h2 id="VSCode对SFC文件的支持"><a href="#VSCode对SFC文件的支持" class="headerlink" title="VSCode对SFC文件的支持"></a>VSCode对SFC文件的支持</h2><ul><li>在前面我们提到过，真实开发中多数情况下我们都是使用<code>SFC</code> ( <code>single-file components</code>(单文件组件) )</li><li>我们先说一下<code>VSCode</code>对<code>SFC</code>的支持:<ul><li>插件一: <code>Vetur</code>，从<code>Vue2</code>开发就一直在使用的<code>VSCode</code>支持<code>Vue</code>的插件 ;</li><li>插件二: <code>Vue Language Features(Volar)</code>，官方推荐的插件（后续会基于<code>Vue Language Features(Volar)</code>开发官方的<code>VSCode</code>插件）;</li></ul></li></ul><blockquote><p>补充几个插件使用注意事项：<br><code>Vetur</code>、<code>Vuter</code>和<code>Vue Language Features(Volar)</code>插件<br><code>vue2</code>我们使用的插件是<code>vetur</code>或<code>vuter</code>，<code>vue3</code>使用的是<code>Vue Language Features(Volar)</code>这个插件，注意使用哪个<code>vue</code>版本就使用哪个插件</p></blockquote><p>我们在<code>src</code>下创建一个<code>vue</code>文件夹，接着创建一个<code>App.vue</code>文件，在这里面可以编写模板(<code>template</code>)、逻辑(<code>script</code>)、样式(<code>style</code>)<br>把代码转移到这个<code>vue</code>文件中:</p><ol><li>把我们<code>index.html</code>之前写的模板中的内容移到<code>App.vue</code>文件中；</li><li>把<code>main.js</code>文件中<code>data</code>配置项移到<code>App.vue</code>文件中；</li></ol><p><code>App.vue</code>代码如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;Hello World&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        message: &quot;Hello World&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  h2 &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><ol><li><code>main.js</code>导入根组件并作为配置项传入<code>createApp</code>中；<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在webpack中文件后缀可以省略，它会自动帮我们加上去</span></span><br><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&quot;./js/math&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从vue中引入createApp，这里指定一下版本</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue/dist/vue.esm-bundler&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入根组件【注意后缀名.vue不要掉】</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./vue/App.vue&quot;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line"><span class="comment">// 由于index.html中已经有咱们的挂载容器了，直接放选择器在里面</span></span><br><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><p>重新打包，发现报错，其实我们也能想明白，你现在是一个<code>.vue</code>文件，<code>webpack</code>肯定是不识别的，就像之前<code>css</code>文件，也就是需要<code>loader</code>，就是<code>vue-loader</code></p><h2 id="关于vue-loader"><a href="#关于vue-loader" class="headerlink" title="关于vue-loader"></a>关于vue-loader</h2><p>安装<code>vue-loader</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-loader -D</span><br></pre></td></tr></table></figure></p><p>安装完<code>vue-loader</code>，就需要去配置<code>rules</code>，回到<code>webpack.config.js</code>文件中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">  loader: <span class="string">&quot;vue-loader&quot;</span></span><br><span class="line">&#125;, <span class="comment">// 加载vue所需规则</span></span><br></pre></td></tr></table></figure></p><p>再次打包，发现如下报错信息<br><code>vue-loader was used without the corresponding plugin. Make sure to include VueLoaderPlugin in your webpack config.</code></p><p>大致意思是说，确保你的<code>webpack</code>配置中包含<code>VueLoaderPlugin</code>插件<br>这里我们需要从<code>vue-loader</code>里面引入这个插件，并使用这个插件，回到<code>webpack.config.js</code>文件中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 引入VueLoaderPlugin插件，插件贯穿于整个webpack生命周期，它可以帮助vue-loader做一些事情</span></span><br><span class="line"><span class="keyword">const</span> &#123; VueLoaderPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;vue-loader/dist/index&quot;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">module</span>: &#123; <span class="comment">// 配置module</span></span><br><span class="line">    <span class="attr">rules</span>: [ <span class="comment">// 注意rules是数组，以后会有多个规则</span></span><br><span class="line">      ...</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">&quot;vue-loader&quot;</span></span><br><span class="line">      &#125;, <span class="comment">// 加载vue所需规则</span></span><br><span class="line">      &#123;&#125;, <span class="comment">// 加载ts需要规则</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /\.(css|less)$/,</span></span><br><span class="line">      <span class="comment">//   use: [</span></span><br><span class="line">      <span class="comment">//     &quot;style-loader&quot;,</span></span><br><span class="line">      <span class="comment">//     &quot;css-loader&quot;,</span></span><br><span class="line">      <span class="comment">//     &quot;less-loader&quot;</span></span><br><span class="line">      <span class="comment">//   ]</span></span><br><span class="line">      <span class="comment">// &#125;, // css、less合并写法</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(), <span class="comment">// 格式：根据CleanWebpackPlugin类创建出对象</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;巧克力真美味&quot;</span> <span class="comment">// 模板里的htmlWebpackPlugin.options.title中的htmlWebpackPlugin是new出来的对象，options就是传入的配置项，title就是我们这里配置的title</span></span><br><span class="line">    &#125;), <span class="comment">// 可以传入一个指定模板【不指定它有个默认模板】</span></span><br><span class="line">    <span class="keyword">new</span> DefinePlugin(&#123;</span><br><span class="line">      <span class="attr">BASE_URL</span>: <span class="string">&#x27;&quot;./&quot;&#x27;</span></span><br><span class="line">    &#125;), <span class="comment">// 定义BASE_URL的值，注意这个引号里还要再加个引号，有点类似eval，会把引号里面内容当js语法解析</span></span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">from</span>: <span class="string">&quot;public&quot;</span>, <span class="comment">// 从哪个文件夹里复制</span></span><br><span class="line">          <span class="attr">to</span>: <span class="string">&quot;./&quot;</span>, <span class="comment">// 复制到哪个文件夹【注意它是在打包文件夹基础上，这里也可以不写，默认就是打包文件夹】</span></span><br><span class="line">          <span class="attr">globOptions</span>: &#123;</span><br><span class="line">            <span class="attr">ignore</span>: [</span><br><span class="line">              <span class="string">&quot;**/index.html&quot;</span> <span class="comment">// 注意这两个**表示当前public文件夹下index.html以及子文件夹下的index.html</span></span><br><span class="line">            ]</span><br><span class="line">          &#125; <span class="comment">// globOptions.ignore忽略某个文件，可以过滤掉某些不需要复制的文件如index.html模板</span></span><br><span class="line">        &#125;</span><br><span class="line">      ] <span class="comment">// patterns匹配的意思</span></span><br><span class="line">    &#125;), <span class="comment">// 复制功能插件</span></span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin() <span class="comment">// vue-loader插件，帮助vue-loader做一些事情</span></span><br><span class="line">  ] <span class="comment">// plugins是个数组【这个不用管顺序】，里面放的是一个个插件对象【其实它源码里面是拿到我们导出的这个大的对象，然后去取到我们所有的plugins，之后对它做了个for循环，for循环后对它做个注入，到时候就可以根据不同的hook的生命周期来回调这个插件里面对象的某个方法】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后重新打包就能成功了，浏览器运行显示正常</p><p>真实开发是按照组件化开发，这里我们可以接着在<code>vue</code>文件夹参创建一个<code>HelloWorld</code>组件，注意组件名要使用大驼峰，编写一点代码</p><blockquote><p>我打算把它先作为全局组件：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 使用 scoped 后，父组件的样式将不会渗透到子组件中。不过，子组件的根节点会同时被父组件的作用域样式和子组件的作用域样式影响。 --&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Hello World，我是全局组件&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>接着我们选择全局注册</p><ul><li>全局注册是在<code>main.js</code>文件中，需要使用到<code>app</code>应用实例的扩展方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入根组件【注意后缀名.vue不要掉】</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./vue/App.vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入HelloWorld组件</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&quot;./vue/HelloWorld.vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line"><span class="comment">// 注册全局组件</span></span><br><span class="line">app.component(<span class="string">&quot;HelloWorld&quot;</span>, HelloWorld)</span><br><span class="line"><span class="comment">// 由于index.html中已经有咱们的挂载容器了，直接放选择器在里面</span></span><br><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><p>在<code>App.vue</code>根组件中使用，注意官方文档有说过，大驼峰命名的组件在使用组件标签时是可以使用短横线连接的<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;Hello World&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;hello-world&gt;&lt;/hello-world&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>重新打包，在浏览器运行正常</p><blockquote><p>在到<code>vue</code>文件夹中创建一个<code>NavBar.vue</code>组件，来作为局部组件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 使用 scoped 后，父组件的样式将不会渗透到子组件中。不过，子组件的根节点会同时被父组件的作用域样式和子组件的作用域样式影响。 --&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Hello World，我是局部组件&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在<code>App.vue</code>文件中进行局部注册并使用<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;Hello World&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;hello-world&gt;&lt;/hello-world&gt;</span><br><span class="line">  &lt;NavBarVue /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import NavBarVue from &#x27;./NavBar.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    NavBarVue</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &quot;Hello World&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h2 &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>重新打包，在浏览器运行正常</p><h2 id="最后，还有一个问题，就是浏览控制台一直有一个警告，如下"><a href="#最后，还有一个问题，就是浏览控制台一直有一个警告，如下" class="headerlink" title="最后，还有一个问题，就是浏览控制台一直有一个警告，如下"></a>最后，还有一个问题，就是浏览控制台一直有一个警告，如下</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Feature flags __VUE_OPTIONS_API__, __VUE_PROD_DEVTOOLS__ are not explicitly defined.</span><br><span class="line">You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.</span><br><span class="line"></span><br><span class="line">For more details, see https://link.vuejs.org/feature-flags.</span><br></pre></td></tr></table></figure><p>通过他给的链接，我们可以了解到：<br><code>Bundler</code> 构建功能标志<br>从 <code>3.0.0-rc.3</code> 开始，<code>esm-bundler</code>构建现在公开了可以在编译时覆盖的全局功能标志：</p><ul><li><code>__VUE_OPTIONS_API__</code>（启用/禁用选项 <code>API</code> 支持，默认值<code>true</code>：）</li><li><code>__VUE_PROD_DEVTOOLS__</code>（在生产中启用/禁用 <code>devtools</code> 支持，默认值<code>false</code>：）</li></ul><p>该构建将在不配置这些标志的情况下工作，但是强烈建议正确配置它们以便在最终捆绑包中获得正确的 <code>tree-shaking</code>。要配置这些标志：</p><ul><li><code>webpack</code>：使用<code>DefinePlugin</code></li><li>汇总：使用<code>@rollup/plugin-replace</code></li><li><code>Vite</code>：默认配置，但可以使用<code>define</code>选项覆盖<br>注意：替换值必须是布尔值，不能是字符串，否则捆绑器/压缩器将无法正确评估条件。</li></ul><p><code>__VUE_OPTIONS_API__</code>：它是来对<code>vue2</code>做适配的，其实现在写的<code>template</code>和<code>data</code>都是<code>options api</code>，在<code>vue3</code>写的比较少，用的是<code>setup</code>，那么在我们项目里面到底有没有这个东西呢，它默认情况下是<code>true</code>，即是有这个东西的，那么到时候<code>vue</code>源代码里面是有一部分来做这个<code>options api</code>解析的代码的，但是如果你<code>vue3</code>写的都是<code>setup</code>代码，我就不需要<code>options api</code>这部分代码了，它推荐我们可以设置为<code>false</code>，它到时候可以做<code>tree-shaking</code>，警告里面有这个词，<code>tree-shaking</code>它在真正打包的时候可以把我们这部分代码本来是有的但是我发现你不需要有这个东西，它就会把我们这部分代码从我们源代码里面删除掉，那我们代码就可以变得更小一点</p><p><code>__VUE_PROD_DEVTOOLS__</code>：生产环境要不要做<code>devtool</code>，它其实是一个<code>vue</code>调试工具，调试工具一般在开发阶段使用，生产环境一般是不需要让它生效的，它刚好默认值就是<code>false</code>，如果你想要生产环境生效就设置为<code>true</code></p><p>怎么去除这个警告呢？<br>其实它上面也有写，<code>webpack</code>：使用<code>DefinePlugin</code>，这个<code>DefinePlugin</code>之前我们有给<code>index.html</code>设置<code>BASE_URL</code>即<code>favicon.ico</code>，这里回到<code>webpack.config.js</code>文件中配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// `DefinePlugin`插件，这个插件是`webpack`内置的一个插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; DefinePlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">new</span> DefinePlugin(&#123;</span><br><span class="line">      <span class="attr">BASE_URL</span>: <span class="string">&#x27;&quot;./&quot;&#x27;</span>,</span><br><span class="line">      <span class="attr">__VUE_OPTIONS_API__</span>: <span class="literal">true</span>, <span class="comment">// 这个就是开启options api，如果都是setup，vue3代码，可以关闭，减小vue源码体积</span></span><br><span class="line">      <span class="attr">__VUE_PROD_DEVTOOLS__</span>: <span class="literal">false</span> <span class="comment">// 这个默认就是false，可以不用设置</span></span><br><span class="line">    &#125;), <span class="comment">// 定义BASE_URL的值，注意这个引号里还要再加个引号，有点类似eval，会把引号里面内容当js语法解析</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这时候我们再次打包就发现警告消除了</p><h2 id="小细节说一下"><a href="#小细节说一下" class="headerlink" title="小细节说一下"></a>小细节说一下</h2><p>在我们以<code>.vue</code>文件书写模板时，<code>template</code>不再是那种原先的配置项中的属性了【它原先解析还需要依靠特定的版本】，这种<code>.vue</code>文件最主要的是，他那个<code>vue-loader</code>会依赖一个<code>@vue/compiler-sfc</code>它会去解析<code>template</code>标签及里面的内容，所以在打包我们的源代码时，它加载就已经做了解析，就不再需要再多做一次解析了，所以从<code>vue</code>引入<code>createApp</code>那里可以改一下了<br><code>main.js</code>文件<code>diff</code>如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 从vue中引入createApp，这里指定一下版本</span></span><br><span class="line"><span class="comment">// import &#123; createApp &#125; from &quot;vue/dist/vue.esm-bundler&quot;</span></span><br><span class="line"><span class="comment">// 加载.vue文件可以直接从vue中引入，因为它不需要上面那个做解析，自己使用vue-loader依赖的@vue/compiler-sfc做解析</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>重新打包，浏览器运行显示正常，控制台也没有报错</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack5-babel篇(五)</title>
      <link href="/archives/cfda1718.html"/>
      <url>/archives/cfda1718.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <p>💻Installation<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/coding327/learn_webpack5.git</span><br></pre></td></tr></table></figure></p><h2 id="webpack-babel工具"><a href="#webpack-babel工具" class="headerlink" title="webpack-babel工具"></a>webpack-babel工具</h2><blockquote><p>这里我们先引入一个工具<code>babel</code></p></blockquote><p><a href="https://babeljs.io">babel官网</a></p><ul><li>事实上，在开发中我们很少直接去接触<code>babel</code>，但是<strong><code>babel</code>对于前端开发</strong>来说，目前是<strong>不可缺少的一部分</strong>:<ul><li>开发中，我们想要使用<strong><code>ES6+</code></strong>的语法，想要使用<strong><code>TypeScript</code></strong>，开发<strong><code>React</code>项目</strong>，它们<strong>都是离不开<code>Babel</code></strong>的;</li><li>所以，<strong>学习<code>Babel</code></strong>对于我们理解代码从编写到线上的转变过程至关重要;</li></ul></li><li>那么，<code>Babel</code>到底是什么呢?<ul><li><code>Babel</code>是一个<strong>工具链</strong>，主要用于旧浏览器或者环境中将<strong>ECMAScript 2015+</strong>代码转换为向后兼容版本的<strong>JavaScript</strong>;</li><li>包括:语法转换、源代码转换等;<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function">(<span class="params">n</span>) =&gt;</span>n+ <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Babel命令行使用-不推荐"><a href="#Babel命令行使用-不推荐" class="headerlink" title="Babel命令行使用[不推荐]"></a>Babel命令行使用[不推荐]</h2><ul><li><code>babel</code>本身可以作为一个独立的工具（和<code>postcss</code>一样)，不和<code>webpack</code>等构建工具配置来单独使用。</li><li>如果我们希望在命令行尝试使用<code>babel</code>，需要安装如下库:<ul><li><code>@babel/core</code>: <code>babel</code>的核心代码，必须安装;</li><li><code>@babel/cli</code>: 可以让我们在<strong>命令行【如果是在webpack中配置使用是不需要安装的】</strong>使用<code>babel</code>;</li></ul></li><li>使用<code>babel</code>来处理我们的源代码:<ul><li><code>src</code>∶ 是源文件的目录;</li><li><code>--out-dir</code>: 指定要输出的文件夹<code>dist</code>;</li><li><code>--out-file</code>: 指定要输出的文件如<code>demo.js</code></li></ul></li></ul><p>安装以上两个库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/core @babel/cli -D</span><br></pre></td></tr></table></figure></p><p>我们在项目根目录下创建一个<code>demo.js</code>文件，在里面写点<code>ES6</code>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 书写ES6代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line"></span><br><span class="line">names.forEach(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">console</span>.log(item))</span><br></pre></td></tr></table></figure></p><p>这里我们想用<code>babel</code>把以上<code>ES6</code>代码转换为<code>ES5</code>代码，局部安装<code>babel</code>，它是在咱们的<code>node_modules/.bin</code>下的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx babel demo.js --out-dir dist</span><br></pre></td></tr></table></figure></p><p>但是会发现<code>dist</code>下的<code>demo.js</code>依旧还是之前<code>ES6</code>代码<br>主要是因为在我们使用<code>babel</code>的时候，如果你想要把我们的某些语法做一个转化，这个时候的话你必须对应的使用一个插件</p><h2 id="babel工具插件的使用"><a href="#babel工具插件的使用" class="headerlink" title="babel工具插件的使用"></a>babel工具插件的使用</h2><p>比如我们需要转换箭头函数，那么我们就可以使用箭头函数转换相关的插件:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/plugin-transform-arrow-functions -D</span><br></pre></td></tr></table></figure></p><p>使用该插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx babel demo.js --out-dir dist --plugins=@babel/plugin-transform-arrow-functions</span><br></pre></td></tr></table></figure></p><p>这时候我们再去看<code>dist</code>下的<code>demo.js</code>，发现箭头函数就被转换为<code>ES5</code>代码了<br>但是<code>const</code>没有做转换，这时候我们也可以使用以下这个插件【转换let、const这种块级作用域的定义的关键字】来做转换<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/plugin-transform-block-scoping -D</span><br></pre></td></tr></table></figure></p><p>使用该插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多个插件用,隔开</span></span><br><span class="line">npx babel demo.js --out-dir dist --plugins=@babel/plugin-transform-arrow-functions,@babel/plugin-transform-block-scoping</span><br></pre></td></tr></table></figure></p><p>这时我们就发现转换成功了</p><blockquote><p>但是<code>ES6</code>语法这么多还有<code>ES7</code>、<code>ES8</code>、<code>ES9</code>、<code>ES10</code>等等，一个一个插件安装太费劲了<br>正是因为麻烦，所以<code>babel</code>它给我们提供了另外一个东西<strong><code>preset</code></strong></p></blockquote><h2 id="babel的预设preset"><a href="#babel的预设preset" class="headerlink" title="babel的预设preset"></a>babel的预设preset</h2><p>把我们常用的那些插件相当于集合到了一起<br>安装<code>@babel/preset-env</code>预设:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/preset-env -D</span><br></pre></td></tr></table></figure></p><p>使用预设：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预设可能是有多个的，所以后面会有个s，像react的预设或者ts的预设，它们都有对应的预设的</span></span><br><span class="line">npx babel demo.js --out-dir dist --presets=@babel/preset-env</span><br></pre></td></tr></table></figure><br>为了方便观察，可以把<code>dist</code>删掉，再执行，发现转换成功</p><h2 id="Babel的底层原理"><a href="#Babel的底层原理" class="headerlink" title="Babel的底层原理"></a>Babel的底层原理</h2><p><code>babel</code>是如何做到将我们的<strong>一段代码(<code>ES6</code>、<code>TypeScript</code>、<code>React</code>)</strong>转成<strong>另外一段代码(<code>ES5</code>)</strong>的呢?</p><ul><li>从一种<strong>源代码（原生语言）</strong>转换成<strong>另一种源代码（目标语言）</strong>，这是什么的工作呢?</li><li>就是<strong>编译器</strong>，事实上我们可以将<code>babel</code>看成就是一个编译器。</li><li><code>Babel</code>编译器的作用就是<strong>将我们的源代码</strong>，转换成浏览器可以直接识别的<strong>另外一段源代码</strong>;<br><strong><code>Babel</code>也拥有编译器的工作流程:</strong></li><li>解析阶段(<code>Parsing</code>)</li><li>转换阶段(<code>Transformation</code>)</li><li>生成阶段(<code>Code Generation</code>)</li></ul><h2 id="Babel编译器执行原理"><a href="#Babel编译器执行原理" class="headerlink" title="Babel编译器执行原理"></a>Babel编译器执行原理</h2><blockquote><p><code>Babel</code>的执行阶段</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10176.png" alt="10176"></p><blockquote><p>当然，这只是一个简化版的编译器工具流程，在每个阶段又会有自己具体的工作:</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10177.png" alt="10177"></p><h2 id="webpack中如何配置babel"><a href="#webpack中如何配置babel" class="headerlink" title="webpack中如何配置babel"></a>webpack中如何配置babel</h2><h2 id="认识babel-loader"><a href="#认识babel-loader" class="headerlink" title="认识babel-loader"></a>认识babel-loader</h2><blockquote><p>webpack并没有将我们的ES6代码转为ES5代码</p></blockquote><p>这里我们可以验证一下：<br>把之前<code>demo.js</code>文件里的代码添加到<code>main.js</code>文件中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 书写ES6代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line"></span><br><span class="line">names.forEach(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">console</span>.log(item))</span><br><span class="line"><span class="built_in">console</span>.log(message)</span><br></pre></td></tr></table></figure></p><p>然后我们打包试一下，在打包文件夹下找到<code>main.js</code>文件，直接搜索<code>message</code>就能找到，发现仍然是ES6代码，<code>webpack</code>并没有帮我们做转换<br>因为这不属于<code>webpack</code>的工作，<code>webpack</code>是一个<strong>模块化</strong>的打包工具，它是不负责语法转换这个工作的，但是它负责每个文件当成一个模块，支持<code>esmodule</code>、<code>commonjs</code>、<code>amd</code><br>这个时候我们就需要使用<code>babel</code>，将<code>ES6</code>及以上的语法转换为<code>ES5</code>代码<br>那么什么时候使用<code>babel</code>呢？<br>很显然就是在<code>webpack</code>解析【加载】我们的<code>js</code>代码时，使用这个<code>babel-loader</code></p><p>安装<code>babel-loader</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-loader -D</span><br></pre></td></tr></table></figure></p><p>回到<code>webpack.config.js</code>配置文件中，配置<code>rules</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  use: &#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="string">&quot;@babel/plugin-transform-arrow-functions&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@babel/plugin-transform-block-scoping&quot;</span>,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="comment">// 加载js所需要规则【配置项未抽离版】</span></span><br></pre></td></tr></table></figure></p><p>然后再打包，就发现语法转换成功<br>但是有个弊端，每次写插件过于麻烦，我们可以使用预设<code>preset</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  use: &#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="comment">// plugins: [</span></span><br><span class="line">      <span class="comment">//   &quot;@babel/plugin-transform-arrow-functions&quot;,</span></span><br><span class="line">      <span class="comment">//   &quot;@babel/plugin-transform-block-scoping&quot;,</span></span><br><span class="line">      <span class="comment">// ]</span></span><br><span class="line">      <span class="attr">presets</span>: [</span><br><span class="line">        <span class="string">&quot;@babel/preset-env&quot;</span></span><br><span class="line">        <span class="comment">// [&quot;@babel/preset-env&quot;, &#123;</span></span><br><span class="line">        <span class="comment">//   // 配置项</span></span><br><span class="line">        <span class="comment">// &#125;] // 这个写法是补充的，因为有可能在其它地方需要传入配置项</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="comment">// 加载js所需要规则【配置项未抽离版】</span></span><br></pre></td></tr></table></figure></p><p>重新打包发现也是转换成功了</p><p>之前<code>postcss</code>我们把配置可以<strong>抽离</strong>到独立的文件里，<code>babel</code>也是可以的</p><h2 id="Babel的配置文件"><a href="#Babel的配置文件" class="headerlink" title="Babel的配置文件"></a>Babel的配置文件</h2><p>像之前一样，我们可以将<code>babel</code>的配置信息放到一个独立的文件中，<code>babel</code>给我们提供了两种配置文件的编写︰</p><ul><li><code>babel.config.json</code>（或者<code>js</code> ，<code>.cjs</code> , <code>.mjs</code> )文件;</li><li><code>.babelrc.json</code>(或者<code>.babelrc</code> , <code>.js</code> , <code>.cjs</code> , <code>.mjs</code> )文件;<br>以上第二个多个<code>rc</code>，这个<code>rc</code>可以理解为<code>runtime compiler</code>，运行时编译</li></ul><p>它们两个有什么区别呢﹖目前很多的项目都采用了多包管理的方式( <code>babel</code>本身、<code>element-plus</code>、<code>umi</code>等);</p><ul><li><code>.babelrc.json</code> ( 早期 ): 早期使用较多的配置方式，但是对于配置<code>Monorepos</code>项目是比较麻烦的;</li><li><code>babel.config.json</code> ( <code>babel7</code>开始 ): 可以直接作用于<code>Monorepos</code>项目的子包，更加推荐;</li></ul><h2 id="编写babel的配置文件"><a href="#编写babel的配置文件" class="headerlink" title="编写babel的配置文件"></a>编写babel的配置文件</h2><p>在项目根目录下新建<code>babel.config.js</code>文件，当然也可以是<code>json</code>后缀名，个人比较喜欢<code>js</code>写<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    <span class="string">&quot;@babel/preset-env&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回到<code>webpack.config.js</code>文件中重新进行配置，由于配置被抽离出去了，只需要使用<code>loader</code>即可<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  loader: <span class="string">&quot;babel-loader&quot;</span> <span class="comment">// 这里没写use用loader让阅读性更强</span></span><br><span class="line">&#125;, <span class="comment">// 加载js所需要规则【配置项抽离版】</span></span><br></pre></td></tr></table></figure><br>再次打包，发现转换成功</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack5-插件篇(四)</title>
      <link href="/archives/3bc3a4c6.html"/>
      <url>/archives/3bc3a4c6.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <p>💻Installation<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/coding327/learn_webpack5.git</span><br></pre></td></tr></table></figure></p><h2 id="webpack插件"><a href="#webpack插件" class="headerlink" title="webpack插件"></a>webpack插件</h2><blockquote><p>经过前面一系列操作基本上大部分结构都有了，但是这里还有一些不太好的地方</p></blockquote><ol><li>每次打包生成的<code>build</code>文件夹，下次打包时还要删掉原来的<code>build</code>再打包</li><li>观察我们的<code>build</code>文件夹，可以看到里面有<code>font</code>、<code>img</code>、<code>main.js</code>，但是缺少<code>index.html</code>作为我们整个静态资源的入口，注意外面的<code>index.html</code>并不是的，因为最后部署的是<code>build</code>文件夹，这里的<code>index.html</code>还需要打包</li></ol><blockquote><p>先解决第一个问题，，每次打包时自动删除<code>build</code>文件夹</p></blockquote><p>注意这里不是使用<code>loader</code>，<code>loader</code>仅是加载某个模块时候使用，这个时候需要的是<code>Plugin</code>即插件</p><h2 id="认识Plugin"><a href="#认识Plugin" class="headerlink" title="认识Plugin"></a>认识Plugin</h2><p><code>Webpack</code>的另一个核心是<code>Plugin</code>，官方有这样一段对<code>Plugin</code>的描述:</p><ul><li><code>While loaders are used to transform certain types of modules, plugins can be leveraged to perform awider range of tasks like bundle optimization, asset management and injection of environmentvariables.</code><br>上面表达的含义翻译过来就是∶</li><li><code>Loader</code>是用于特定的模块类型进行转换;</li><li><code>Plugin</code>可以用于执行更加广泛的任务，比如打包优化、资源管理、环境变量注入等;</li></ul><p><code>Plugin</code>就相当于<code>loader</code>解决不了的，由<code>Plugin</code>来处理，插件功能非常强大，贯穿了整个<code>webpack</code>生命周期，很多地方都会用到插件</p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10174.png" alt="认识plugin"></p><p>其实我们可以发现，浏览器审查这个<code>index.html</code>时，样式<code>style</code>是插入进去的，它也是可以通过插件把这个样式给它分离出去的【这里不细说】</p><h2 id="清理打包文件夹的CleanWebpackPlugin插件"><a href="#清理打包文件夹的CleanWebpackPlugin插件" class="headerlink" title="清理打包文件夹的CleanWebpackPlugin插件"></a>清理打包文件夹的CleanWebpackPlugin插件</h2><p>前面我们演示的过程中，每次修改了一些配置，重新打包时，都需要<strong>手动删除打包文件夹</strong>:</p><ul><li>我们可以借助于一个插件来帮助我们完成，这个插件就是<strong><code>CleanWebpackPlugin</code></strong>;</li></ul><p>安装<code>CleanWebpackPlugin</code>插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install clean-webpack-plugin -D</span><br></pre></td></tr></table></figure></p><p>回到<code>webpack.config.js</code>文件中配置，注意这个配置不是在<code>rules</code>里面配置，它是在最外面引入<code>CleanWebpackPlugin</code>类，然后再到导出里面配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// 我们需要从clean-webpack-plugin插件中取出CleanWebpackPlugin类，因为插件一般给它封装成class</span></span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack是运行在node环境下的，不要使用ES6 module导出【如果非要使用它还需要做额外配置】</span></span><br><span class="line"><span class="comment">// 注意出口文件中的path得是绝对路径，需要使用到path模块，做路径拼接即可，__dirname就是当前编写代码文件所在目录【绝对路径】</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin() <span class="comment">// 格式：根据CleanWebpackPlugin类创建出对象</span></span><br><span class="line">  ] <span class="comment">// plugins是个数组【这个不用管顺序】，里面放的是一个个插件对象【其实它源码里面是拿到我们导出的这个大的对象，然后去取到我们所有的plugins，之后对它做了个for循环，for循环后对它做个注入，到时候就可以根据不同的hook的生命周期来回调这个插件里面对象的某个方法】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以在<code>build</code>打包文件夹里面新建个<code>abc.txt</code>文件，然后打包就可以发现<code>abc.txt</code>文件没用了，说明配置没有问题<br>它其实会自动去读取上下文里面的<code>output</code>找到打包文件夹从而删除掉</p><p>一句话总结<code>loader</code>和<code>Plugin</code>的区别？</p><ul><li><code>loader</code>只是在加载模块的时候，它通过我们的一个<code>test</code>去匹配这个模块，然后去使用不同的<code>loader</code>来处理这个模块，这就是<code>loader</code></li><li><code>plugin</code>可以在我们的<code>webpack</code>里面做任何的事情，因为它是贯穿于整个<code>webpack</code>的生命周期的</li></ul><blockquote><p>接着解决第二个问题</p></blockquote><h2 id="帮助生成HTML模板的HtmlWebpackPlugin插件"><a href="#帮助生成HTML模板的HtmlWebpackPlugin插件" class="headerlink" title="帮助生成HTML模板的HtmlWebpackPlugin插件"></a>帮助生成HTML模板的HtmlWebpackPlugin插件</h2><p>还有一个不太规范的地方:</p><ul><li>我们的<code>HTML</code>文件是编写在根目录下的，而最终打包的<code>build</code>文件夹中是没有<code>index.html</code>文件的;</li><li>在进行项目部署的时，必然也是需要有对应的入口文件 <code>index.html</code> ;</li><li>所以我们也需要对<code>index.html</code>进行打包处理;</li></ul><p>对<code>HTML</code>进行打包处理我们可以使用另外一个插件: <strong><code>HtmlWebpackPlugin</code></strong> ;<br>安装<code>HtmlWebpackPlugin</code>插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure></p><p>当我们有了这个插件之后，我们这个项目根目录下的<code>index.html</code>可以删掉了，因为最后会把它往<code>build</code>文件夹里打包一个的，主要原因是在这个插件里面有个<code>EJS</code>模板，它会根据那个<code>EJS</code>模板自动在我们打包文件夹里生成对应的<code>html</code>的</p><p>使用<code>HtmlWebpackPlugin</code>插件，做配置<br>回到<code>webpack.config.js</code>文件中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// 我们需要从clean-webpack-plugin插件中取出CleanWebpackPlugin类，因为插件一般给它封装成class</span></span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="comment">// 这个HtmlWebpackPlugin插件不需要做解构，因为它导出的就是一个类，不同的插件有不同的封装方式，而且这种第三方的很难统一规范的</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack是运行在node环境下的，不要使用ES6 module导出【如果非要使用它还需要做额外配置】</span></span><br><span class="line"><span class="comment">// 注意出口文件中的path得是绝对路径，需要使用到path模块，做路径拼接即可，__dirname就是当前编写代码文件所在目录【绝对路径】</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(), <span class="comment">// 格式：根据CleanWebpackPlugin类创建出对象</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin()</span><br><span class="line">  ] <span class="comment">// plugins是个数组【这个不用管顺序】，里面放的是一个个插件对象【其实它源码里面是拿到我们导出的这个大的对象，然后去取到我们所有的plugins，之后对它做了个for循环，for循环后对它做个注入，到时候就可以根据不同的hook的生命周期来回调这个插件里面对象的某个方法】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后进行打包，我们就会发现打包文件夹里会多出来一个<code>html</code>文件，而且你把这个文件在浏览器打开是可以正常显示的</p><p>我们项目根目录下发现还有个<code>js</code>文件，一般<code>js</code>文件也会单独放到一个<code>js</code>文件夹里面，所以这里我们可以对<code>js</code>文件进行优化<br>回到<code>webpack.config.js</code>文件中，对于打包出口文件夹<code>filename</code>添加个<code>js</code>文件夹即可<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;./build/&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/main.js&quot;</span>,</span><br><span class="line">    <span class="comment">// assetModuleFilename: &#x27;img/[name]_[hash:6][ext][query]&#x27;, // webpack5最新自定义文件名，generator.filename优先级比它高</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再次打包，这样这个目录层次和原生的目录层次其实差别不大<br>上面就是<code>HtmlWebpackPlugin</code>插件基本使用，但是在真实开发里面，一般情况下，我们用的不是<code>HtmlWebpackPlugin</code>插件默认给的那个模板，而是自定义一个模板</p><p>这里就不得不说一下，<code>vue</code>或者是<code>react</code>脚手架创建的项目了，不难发现它们这些项目下面都会有个<code>public</code>文件夹，而其中有个<code>index.html</code>，没错就是这个<code>index.html</code>它就是自定义的一个模板</p><p>那么我们就来仿照它这种，在我们<code>webpack</code>创建的项目下，新建一个<code>public</code>文件夹，再新建一个<code>index.html</code>，其中的内容我们把<code>vue3</code>创建项目的<code>public/index.html</code>里的内容拿过来<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X一UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;TE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- built files will be auto injected--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>那么如何去使用咱们这个模板呢？<br>回到<code>webpack.config.js</code>文件中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// 我们需要从clean-webpack-plugin插件中取出CleanWebpackPlugin类，因为插件一般给它封装成class</span></span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="comment">// 这个HtmlWebpackPlugin插件不需要做解构，因为它导出的就是一个类，不同的插件有不同的封装方式，而且这种第三方的很难统一规范的</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack是运行在node环境下的，不要使用ES6 module导出【如果非要使用它还需要做额外配置】</span></span><br><span class="line"><span class="comment">// 注意出口文件中的path得是绝对路径，需要使用到path模块，做路径拼接即可，__dirname就是当前编写代码文件所在目录【绝对路径】</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(), <span class="comment">// 格式：根据CleanWebpackPlugin类创建出对象</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span></span><br><span class="line">    &#125;) <span class="comment">// 可以传入一个指定模板【不指定它有个默认模板】</span></span><br><span class="line">  ] <span class="comment">// plugins是个数组【这个不用管顺序】，里面放的是一个个插件对象【其实它源码里面是拿到我们导出的这个大的对象，然后去取到我们所有的plugins，之后对它做了个for循环，for循环后对它做个注入，到时候就可以根据不同的hook的生命周期来回调这个插件里面对象的某个方法】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着进行打包，我们发现控制台报错，报错信息如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="keyword">in</span> Template execution failed: ReferenceError: BASE_URL is not defined</span><br><span class="line"></span><br><span class="line">ERROR <span class="keyword">in</span>   ReferenceError: BASE_URL is not defined</span><br></pre></td></tr></table></figure></p><p>大概意思是说<code>BASE_URL</code>没有定义，这个其实是我们<code>html</code>模板里面的那个<code>favicon</code>图标，我们在模板里面是有如下代码的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这个其实就涉及到<code>webpack</code>的一些细节了，上面<code>href</code>里面用的是<code>EJS</code>语法填充数据，但是这个<code>BASE_URL</code>常量我们并没有在哪定义过，那么到时候它就不知道怎么填充数据，所以就报错<br>解决方法：</p><ol><li>把这行代码删掉，就不报错了，然后就可以正常打包【不推荐】</li><li>这时候就涉及到一个<code>DefinePlugin</code>插件，这个插件是<code>webpack</code>内置的一个插件</li></ol><p>我们这里采用方案2，进入<code>webpack.config.js</code>文件中配置，同时提前准备了一个<code>favicon.ico</code>放在<code>public</code>文件夹下【顺便把<code>title</code>配置了】<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// 我们需要从clean-webpack-plugin插件中取出CleanWebpackPlugin类，因为插件一般给它封装成class</span></span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="comment">// 这个HtmlWebpackPlugin插件不需要做解构，因为它导出的就是一个类，不同的插件有不同的封装方式，而且这种第三方的很难统一规范的</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="comment">// `DefinePlugin`插件，这个插件是`webpack`内置的一个插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; DefinePlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack是运行在node环境下的，不要使用ES6 module导出【如果非要使用它还需要做额外配置】</span></span><br><span class="line"><span class="comment">// 注意出口文件中的path得是绝对路径，需要使用到path模块，做路径拼接即可，__dirname就是当前编写代码文件所在目录【绝对路径】</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(), <span class="comment">// 格式：根据CleanWebpackPlugin类创建出对象</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">      <span class="attr">favicon</span>: <span class="string">&quot;./public/favicon.ico&quot;</span>, <span class="comment">// 配置favicon</span></span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;巧克力真美味&quot;</span> <span class="comment">// 模板里的htmlWebpackPlugin.options.title中的htmlWebpackPlugin是new出来的对象，options就是传入的配置项，title就是我们这里配置的title</span></span><br><span class="line">    &#125;), <span class="comment">// 可以传入一个指定模板【不指定它有个默认模板】</span></span><br><span class="line">    <span class="keyword">new</span> DefinePlugin(&#123;</span><br><span class="line">      <span class="attr">BASE_URL</span>: <span class="string">&#x27;&quot;./&quot;&#x27;</span></span><br><span class="line">    &#125;) <span class="comment">// 定义BASE_URL的值，注意这个引号里还要再加个引号，有点类似eval，会把引号里面内容当js语法解析</span></span><br><span class="line">  ] <span class="comment">// plugins是个数组【这个不用管顺序】，里面放的是一个个插件对象【其实它源码里面是拿到我们导出的这个大的对象，然后去取到我们所有的plugins，之后对它做了个for循环，for循环后对它做个注入，到时候就可以根据不同的hook的生命周期来回调这个插件里面对象的某个方法】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重新打包，我们再看看刚刚那个代码以及<code>title</code>变成了什么<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./favicon.ico&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>巧克力真美味<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后在浏览器上看看效果，发现<code>favicon.ico</code>没效果，因为打包文件夹下没这个文件，但是我们发现<code>vue</code>脚手架打包，它的打包文件夹下怎么就有这个文件呢，当然网上也有别人在配置项里配置<code>favicon</code>后面配个路径，但是它会在<code>html</code>文件里添加一行<code>link</code>引入这样代码，会造成两行，可能有的人说把模板里的那个删掉，反正它自己会生成一行<code>link</code>，这也是一个办法，但我们这里主要是想看<code>vue</code>脚手架它是怎么做的！！！<br>这个<code>favicon.ico</code>它其实是复制过去的，在vue脚手架创建项目中，像<code>public</code>这个文件夹里的文件<strong>除<code>index.html</code>模板外</strong>其实最后都是会被复制到打包文件夹里，那么想实现复制这种功能就需要用到<code>copy-webpack-plugin</code>插件<br>其实这里我们也能慢慢发现，想要某个功能<code>webpack</code>就有，而不需要我们再去造轮子，<code>webpack</code>这个生态、社区还是相当强大的</p><h2 id="复制功能copy-webpack-plugin插件"><a href="#复制功能copy-webpack-plugin插件" class="headerlink" title="复制功能copy-webpack-plugin插件"></a>复制功能copy-webpack-plugin插件</h2><p>局部安装该插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install copy-webpack-plugin -D</span><br></pre></td></tr></table></figure><br>回到<code>webpack.config.js</code>文件中，进行配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// 我们需要从clean-webpack-plugin插件中取出CleanWebpackPlugin类，因为插件一般给它封装成class</span></span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="comment">// 这个HtmlWebpackPlugin插件不需要做解构，因为它导出的就是一个类，不同的插件有不同的封装方式，而且这种第三方的很难统一规范的</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="comment">// `DefinePlugin`插件，这个插件是`webpack`内置的一个插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; DefinePlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>)</span><br><span class="line"><span class="comment">// 复制功能copy-webpack-plugin插件</span></span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;copy-webpack-plugin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack是运行在node环境下的，不要使用ES6 module导出【如果非要使用它还需要做额外配置】</span></span><br><span class="line"><span class="comment">// 注意出口文件中的path得是绝对路径，需要使用到path模块，做路径拼接即可，__dirname就是当前编写代码文件所在目录【绝对路径】</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(), <span class="comment">// 格式：根据CleanWebpackPlugin类创建出对象</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;巧克力真美味&quot;</span> <span class="comment">// 模板里的htmlWebpackPlugin.options.title中的htmlWebpackPlugin是new出来的对象，options就是传入的配置项，title就是我们这里配置的title</span></span><br><span class="line">    &#125;), <span class="comment">// 可以传入一个指定模板【不指定它有个默认模板】</span></span><br><span class="line">    <span class="keyword">new</span> DefinePlugin(&#123;</span><br><span class="line">      <span class="attr">BASE_URL</span>: <span class="string">&#x27;&quot;./&quot;&#x27;</span></span><br><span class="line">    &#125;), <span class="comment">// 定义BASE_URL的值，注意这个引号里还要再加个引号，有点类似eval，会把引号里面内容当js语法解析</span></span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">from</span>: <span class="string">&quot;public&quot;</span>, <span class="comment">// 从哪个文件夹里复制</span></span><br><span class="line">          <span class="attr">to</span>: <span class="string">&quot;./&quot;</span>, <span class="comment">// 复制到哪个文件夹【注意它是在打包文件夹基础上，这里也可以不写，默认就是打包文件夹】</span></span><br><span class="line">          <span class="attr">globOptions</span>: &#123;</span><br><span class="line">            <span class="attr">ignore</span>: [</span><br><span class="line">              <span class="string">&quot;**/index.html&quot;</span> <span class="comment">// 注意这两个**表示当前public文件夹下index.html以及子文件夹下的index.html</span></span><br><span class="line">            ]</span><br><span class="line">          &#125; <span class="comment">// globOptions.ignore忽略某个文件，可以过滤掉某些不需要复制的文件如index.html模板</span></span><br><span class="line">        &#125;</span><br><span class="line">      ] <span class="comment">// patterns匹配的意思</span></span><br><span class="line">    &#125;) <span class="comment">// 复制功能插件</span></span><br><span class="line">  ] <span class="comment">// plugins是个数组【这个不用管顺序】，里面放的是一个个插件对象【其实它源码里面是拿到我们导出的这个大的对象，然后去取到我们所有的plugins，之后对它做了个for循环，for循环后对它做个注入，到时候就可以根据不同的hook的生命周期来回调这个插件里面对象的某个方法】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后打包，就可以看到打包文件夹下就有<code>favicon.ico</code>文件，浏览器运行正常</p><h2 id="webpack的mode和devtool"><a href="#webpack的mode和devtool" class="headerlink" title="webpack的mode和devtool"></a>webpack的mode和devtool</h2><p>进入我们的打包好的<code>main.js</code>文件中，可以发现文件非常大，它其实是会出现一个警告的，我们也能在终端看到最后一个警告，它希望我们做个代码分割，这里我们可以把图片限制改为10KB，然后还有一个警告，说我们这个图片太大了，建议图片大小244KB，这个只是建议，不用管它<br>这个打包的<code>main.js</code>有个问题，如果我们代码出错了，那么方便调试，找到源代码吗？<br>进入<code>element.js</code>文件中，加上如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试错误代码</span></span><br><span class="line"><span class="built_in">console</span>.log(content.length)</span><br></pre></td></tr></table></figure></p><p>我们重新打包一下，然后在浏览器打开，控制台报错，但是这个时候我们想知道代码哪里写的有问题，然后点进去，发现是那个打包压缩的代码，很难看懂<br>这个时候我们回到<code>webpack.config.js</code>文件中进行配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 设置模式</span></span><br><span class="line">  <span class="comment">// development 开发阶段，会设置development</span></span><br><span class="line">  <span class="comment">// production 准备打包上线的时候，设置production</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>, <span class="comment">// 开发模式，我们可以看到打包的js文件里有很多eval函数，这是因为devtool默认为eval</span></span><br><span class="line">  <span class="comment">// 设置source-map，建立js映射文件，方便调试代码和错误</span></span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>, <span class="comment">// 默认为eval包裹着源代码，一般我们是设置为source-map，作用是在生成打包文件时，它也会生成source-map文件，再次打包发现项目根目录多了个main.js.map文件，它其实就是个映射文件，它可以把打包的js文件映射到真实开发环境的源代码里面</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;./build/&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/main.js&quot;</span>,</span><br><span class="line">    <span class="comment">// assetModuleFilename: &#x27;img/[name]_[hash:6][ext][query]&#x27;, // webpack5最新自定义文件名，generator.filename优先级比它高</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后重新打包，打开浏览器控制台，点击右侧报错文件，我们可以直接进入到真实开发环境的源代码里进行调试</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack5-资源篇(三)</title>
      <link href="/archives/681e1b85.html"/>
      <url>/archives/681e1b85.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <p>💻Installation<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/coding327/learn_webpack5.git</span><br></pre></td></tr></table></figure></p><h2 id="webpack资源模块"><a href="#webpack资源模块" class="headerlink" title="webpack资源模块"></a>webpack资源模块</h2><p><a href="https://webpack.docschina.org/guides/asset-modules/">webpack5资源模块</a><br>在我们真实开发中，<code>src</code>目录下肯定还要有<code>img</code>目录，里面存放图片，当然资源肯定还包括音频、视频、字体图标等等</p><h2 id="图片的处理"><a href="#图片的处理" class="headerlink" title="图片的处理"></a>图片的处理</h2><p>在项目中，使用图片方式：</p><ol><li>通过<code>css</code>的<code>background-image: url(&#39;路径&#39;)</code></li><li>通过<code>img</code>标签的<code>src</code>属性</li></ol><h2 id="webpack5之前需要loader"><a href="#webpack5之前需要loader" class="headerlink" title="webpack5之前需要loader"></a>webpack5之前需要loader</h2><blockquote><p>由于最新的<code>webpack5</code>已经内置资源模块，而不再需要<code>loader</code>，这里扩展一下<code>file-loader</code>和<code>url-loader</code></p></blockquote><h2 id="认识file-loader"><a href="#认识file-loader" class="headerlink" title="认识file-loader"></a>认识file-loader</h2><ul><li>要处理<code>jpg</code>、<code>png</code>等格式的图片，我们也需要有对应的<code>loader</code>：<strong><code>file-loader</code></strong><ul><li><code>file-loader</code>的作用就是帮助我们处理<code>**import/require()/url()**</code>方式引入的一个文件资源，并且会将它放到我们<strong>输出的文件夹</strong>中;</li><li>当然我们待会儿可以学习如何修改它的名字和所在文件夹;</li></ul></li></ul><h2 id="局部安装file-loader"><a href="#局部安装file-loader" class="headerlink" title="局部安装file-loader"></a>局部安装file-loader</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-loader -D</span><br></pre></td></tr></table></figure><h2 id="配置rules"><a href="#配置rules" class="headerlink" title="配置rules"></a>配置rules</h2><p><code>webpack.config.js</code>中的图片配置如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(jpe?g|png|gif|svg)$/</span>,</span><br><span class="line">  use: <span class="string">&quot;file-loader&quot;</span></span><br><span class="line">&#125;, <span class="comment">// 图片资源【webpack5之前借助file-loader】</span></span><br></pre></td></tr></table></figure></p><ul><li>在<code>src/js/element.js</code>文件中，创建一个<code>div</code>标签，再打包一下，这样这个元素就先创建好了</li><li>接着在<code>src/css</code>目录下创建一个<code>image.css</code>文件，输入以下代码：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.image-bg</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;../img/img1.jpg&#x27;</span>) no-repeat center center/contain;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把<code>image.css</code>加入依赖图中【webpack才会去打包这个文件】，这里<code>element.js--&gt;image.css</code>，所以直接用<code>import</code>导入到<code>element.js</code>文件中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入背景图css【把image.css加入依赖图中】</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../css/image.css&quot;</span></span><br></pre></td></tr></table></figure><br>接着进行打包，会发现并没有报错，图片资源成功打包，同时浏览器也能成功运行显示图片</p><blockquote><p>以上我们使用图片的方式是<code>background-image: url(路径)</code><br>接下来我们使用第二种<code>img</code>的<code>src</code>来使用图片，<code>element.js</code>代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import &quot;css-loader!../css/style.css&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../css/style.css&quot;</span></span><br><span class="line"><span class="comment">// 引入less文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../css/title.less&quot;</span></span><br><span class="line"><span class="comment">// 引入背景图css【把image.css加入依赖图中】</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../css/image.css&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> divEl = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">divEl.className = <span class="string">&quot;title&quot;</span></span><br><span class="line">divEl.innerHTML = <span class="string">&quot;你好啊，詹姆斯&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置背景图片</span></span><br><span class="line"><span class="keyword">const</span> bgDivEl = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">bgDivEl.className = <span class="string">&quot;image-bg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置img元素的src</span></span><br><span class="line"><span class="keyword">const</span> imgEl = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">imgEl.src = <span class="string">&quot;../img/img2.png&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(divEl)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(bgDivEl)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(imgEl)</span><br></pre></td></tr></table></figure></p></blockquote><p>接着打包，并未报错，但是浏览器无法显示图片，其实通过审查元素我们能发现，这个<code>img</code>标签确实被插入到<code>index.html</code>中，但是它的<code>src</code>却还是用着之前相对路径，而之前相对路径是我们在<code>element.js</code>文件中使用的，两个文件层级就不同，<code>index.html</code>通过这个相对路径并不能找到图片</p><p>还有一个问题，在打包文件夹中，也没找到这个打包的图片，其实通过<code>img</code>这种<code>src</code>赋值一个相对路径，它右边赋的值是个字符串，那么这个<code>src</code>就永远是一个字符串，如果是相对路径就永远都是这个相对路径，它并不会根据我们的这个路径找到这个图片资源所在的位置的<br>为了让它根据我们的这个路径去找到这个图片资源所在的位置，我们就需要像一个模块一样去使用它，而这个模块对应的就是那个图片资源<br>当我们使用<code>import/require</code>时就会把它当成模块使用<br>进入<code>element.js</code>文件中，使用<code>import</code>引入图片模块<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入图片模块</span></span><br><span class="line"><span class="keyword">import</span> img2 <span class="keyword">from</span> <span class="string">&#x27;../img/img2.png&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新赋值</span></span><br><span class="line">imgEl.src = img2</span><br></pre></td></tr></table></figure></p><p>重新打包，打包文件夹打包了该图片，同时浏览器显示正常</p><blockquote><p>考虑到打包后的图片名字特别长同时和打包的js文件混在一块，为了解决这个问题我们来了解一下文件命名规则</p></blockquote><p>文件的命名规则</p><ul><li>有时候我们处理后的<strong>文件名称</strong>按照一定的规则进行显示∶<ul><li>比如保留原来的<strong>文件名</strong>、<strong>扩展名</strong>，同时为了防止重复，包含一个<strong><code>hash值</code></strong>等;</li></ul></li><li>这个时候我们可以使用<code>PlaceHolders</code>来完成，<code>webpack</code>给我们提供了大量的<code>PlaceHolders</code>来显示不同的内容:<ul><li><a href="https://webpack.js.org/loaders/file-loader/#placeholders">PlaceHolders链接地址</a></li><li>我们可以在文档中查阅自己需要的<code>placeholder</code>;</li></ul></li><li>我们这里介绍几个最常用的<code>placeholder</code>:<ul><li><code>[ext]</code>：处理文件的扩展名净</li><li><code>[name]</code>：处理文件的名称【记录原来文件的名字】;</li><li><code>[hash]</code>：文件的内容，使用<code>MD4</code>的散列函数处理，生成的一个128位的<code>hash值</code>(32个十六进制);</li><li><code>[contentHash]</code>：在<code>file-loader</code>中和<code>[hash]</code>结果是一致的（在<code>webpack</code>的一些其他地方不一样，后面会提到）</li><li><code>[hash:&lt;length&gt;]</code>：截取<code>hash</code>的长度，默认32个字符太长了;</li><li><code>[path]</code>：文件相对于<code>webpack</code>配置文件的路径;</li><li><code>[folder]</code>：文件所在的原来的文件夹</li></ul></li></ul><p>进入<code>webpack.config.js</code>重新配置<code>rules</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(jpe?g|png|gif|svg)$/</span>,</span><br><span class="line">  use: &#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&quot;file-loader&quot;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="comment">// outputPath: &quot;img&quot;, // 输出目录</span></span><br><span class="line">      <span class="comment">// name: &quot;[name]_[hash:6].[ext]&quot; // 注意这里不能写死，需要了解下placeholders就懂了，[name]是文件原来的文件名，中间下划线换成短横线都行，主要是方便划分前面name和后面hash，而这个hash值是为了保证图片不会重复同时截取hash值的前6位，[ext]表示原来文件扩展名【后缀名】，补充一个[folder]表示所在的原来的文件夹</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;img/[name]_[hash:6].[ext]&quot;</span> <span class="comment">// outputPath可以省略【简写】</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="comment">// 图片资源【webpack5之前借助file-loader】</span></span><br></pre></td></tr></table></figure></p><p>重新打包，打包文件夹打包了该图片，同时文件夹及文件名和扩展名都和原来保持一致</p><h2 id="认识url-loader"><a href="#认识url-loader" class="headerlink" title="认识url-loader"></a>认识url-loader</h2><p><code>url-loader</code>和<code>file-loader</code>的工作方式是相似的，但是它可以将较小的文件，转成<strong><code>base64</code>的<code>URI</code></strong></p><p>在说这个<code>base64</code>之前，首先我们打包好的<code>main.js</code>、图片1、图片2、<code>index.html</code>【这里我们还没做处理】，这四个文件最终是要放到服务器上去的，然后浏览器访问我们服务器上的资源，请求到<code>index.html</code>，然后是<code>main.js</code>、接着是<code>background</code>的<code>url</code>请求图片1，最后<code>img</code>标签的<code>src</code>请求图片2，一共会发送4次请求，那么与<code>base64</code>有什么联系呢？<br>在我们实际开发中图片肯定是非常非常多的，比如说有几十张小的图片，如果这些图片都是分开的，那么我们万一要去请求这些图片【相当于是几十次请求】对于服务器是有很大压力的【高并发，在同一事件能应付的并发请求数是有限的】，这种情况我们的解决方法：</p><ol><li>使用精灵图、雪碧图【相当于只发一次请求，之后再通过背景定位来显示不同的内容就行了】；</li><li>使用字体图标【相当于下载下来一个字体，使用这个字体，然后直接设置class即可，显示这个图片，而且对应的是矢量图】</li><li>对于小的图片进行编码—&gt;<code>base64</code>的<code>URI</code>，【这个<code>URI</code>会被嵌入到打包好的<code>main.js</code>中，如果图片提取到<code>css</code>就会在<code>css</code>里面，没有就在打包好的<code>main.js</code>中，不管是否提取，它都会随着之前请求打包的<code>main.js</code>一起加载，而浏览器可以直接解析<code>base64</code>的，最后通过解析直接把这个图片显示出来】<br>以上这三种其实都是对服务器一种高并发的性能上的优化</li></ol><h2 id="局部安装url-loader"><a href="#局部安装url-loader" class="headerlink" title="局部安装url-loader"></a>局部安装url-loader</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install url-loader -D</span><br></pre></td></tr></table></figure><h2 id="使用url-loader，配置rules"><a href="#使用url-loader，配置rules" class="headerlink" title="使用url-loader，配置rules"></a>使用url-loader，配置rules</h2><p>由于<code>url-loader</code>和<code>file-loader</code>差不多，其实只需要在<code>file-loader</code>基础上改一下使用的<code>loader</code>名字即可<br>接着就是配置一个<code>base64</code>编码限制，超过多少的不进行<code>base64</code>编码，直接进行打包，一般大的图片，我们不会对其进行<code>base64</code>编码，因为编码之后也很大，影响这个浏览器加载这个打包的<code>main.js</code>文件【如果你不做这个限制，那么它就会把这个所有图片都进行<code>base64</code>编码，这个可以自己试一下就知道了】<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(jpe?g|png|gif|svg)$/</span>,</span><br><span class="line">  use: &#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&quot;url-loader&quot;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="comment">// outputPath: &quot;img&quot;, // 输出目录</span></span><br><span class="line">      <span class="comment">// name: &quot;[name]_[hash:6].[ext]&quot; // 注意这里不能写死，需要了解下placeholders就懂了，[name]是文件原来的文件名，中间下划线换成短横线都行，主要是方便划分前面name和后面hash，而这个hash值是为了保证图片不会重复同时截取hash值的前6位，[ext]表示原来文件扩展名【后缀名】，补充一个[folder]表示所在的原来的文件夹</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;img/[name]_[hash:6].[ext]&quot;</span>, <span class="comment">// outputPath可以省略【简写】</span></span><br><span class="line">      <span class="attr">limit</span>: <span class="number">100</span> * <span class="number">1024</span> <span class="comment">// 这个limit是以字节为单位，这里我写的就是100KB，小于100KB就做base64编码，大于它的就不做base64编码，直接打包</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="comment">// 图片资源【webpack5之前借助url-loader】</span></span><br></pre></td></tr></table></figure></p><p>然后打包，发现<code>img1</code>是被编码了，而<code>img2</code>并没有被编码，浏览器上显示也没有问题</p><h2 id="webpack5开始内置资源模块"><a href="#webpack5开始内置资源模块" class="headerlink" title="webpack5开始内置资源模块"></a>webpack5开始内置资源模块</h2><p>官方文档描述：<br>最新的<code>webpack5</code>已经内置资源模块，而不再需要<code>loader</code><br>资源模块(<code>asset module</code>)是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 <code>loader</code>。<br>在 <code>webpack5</code> 之前，通常使用：</p><ul><li><code>raw-loader</code> 将文件导入为字符串</li><li><code>url-loader</code> 将文件作为 <code>data URI</code> 内联到 <code>bundle</code> 中</li><li><code>file-loader</code> 将文件发送到输出目录<br>资源模块类型(<code>asset module type</code>)，通过添加 <strong>4</strong> 种新的模块类型，来替换所有这些 <code>loader</code>：</li><li><code>asset/resource</code> 发送一个单独的文件并导出 <code>URL</code>。在这之前通过使用 <code>file-loader</code> 实现。</li><li><code>asset/inline</code> 导出一个资源的 <code>data URI</code>。之前通过使用 <code>url-loader</code> 实现。</li><li><code>asset/source</code> 导出资源的源代码。之前通过使用 <code>raw-loader</code> 实现。</li><li><code>asset</code> 在导出一个 <code>data URI</code> 和发送一个单独的文件之间自动选择。之前通过使用 <code>url-loader</code>，并且配置资源体积限制实现。</li></ul><p>上面<code>asset</code>其实是我们实际开发中用的最多的<br>所有图片包括自定义文件名如下配置<code>webpack.config.js</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(jpe?g|png|gif|svg)$/</span>,</span><br><span class="line">  type: <span class="string">&#x27;asset&#x27;</span>, <span class="comment">// 这个其实是我们实际开发中用的最多的</span></span><br><span class="line">  <span class="attr">generator</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;img/[name]_[hash:6][ext]&quot;</span> <span class="comment">// 注意在这个内置模块里[ext]是包含了.而file-loader和url-loader不包含.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">parser</span>: &#123;</span><br><span class="line">    <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">      <span class="attr">maxSize</span>: <span class="number">100</span> * <span class="number">1024</span> <span class="comment">// 这个maxSize是以字节为单位，这里我写的就是100KB，小于100KB就做base64编码，大于它的就不做base64编码，直接打包</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="comment">// 做限制需要在parser里面有个数据url条件，配置最大限制</span></span><br><span class="line">&#125;, <span class="comment">// 图片资源【webpack5开始内置资源模块】</span></span><br></pre></td></tr></table></figure></p><p>然后打包，测试一下发现<code>img1</code>是被编码了，而<code>img2</code>并没有被编码，浏览器上显示也没有问题</p><p>这个自定义文件名还有一种写在<code>output</code>里面但是很少，了解一下即可：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">assetModuleFilename</span>: <span class="string">&#x27;img/[name]_[hash:6][ext][query]&#x27;</span>, <span class="comment">// webpack5最新自定义文件名，generator.filename优先级比它高</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(jpe?g|png|gif|svg)$/</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset&#x27;</span>, <span class="comment">// 这个其实是我们实际开发中用的最多的</span></span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">100</span> * <span class="number">1024</span> <span class="comment">// 这个maxSize是以字节为单位，这里我写的就是100KB，小于100KB就做base64编码，大于它的就不做base64编码，直接打包</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="comment">// 做限制需要在parser里面有个数据url条件，配置最大限制</span></span><br><span class="line">      &#125;, <span class="comment">// 图片资源【webpack5开始内置资源模块】</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>然后打包，测试一下发现<code>img1</code>是被编码了，而<code>img2</code>并没有被编码，浏览器上显示也没有问题</p><h2 id="字体文件的处理"><a href="#字体文件的处理" class="headerlink" title="字体文件的处理"></a>字体文件的处理</h2><p>加载字体文件</p><ul><li>如果我们需要使用某些<strong>特殊的字体或者字体图标</strong>，那么我们会引入很多<strong>字体相关的文件</strong>，这些文件的处理也是一样的。</li></ul><p>这里我从阿里图标库中下载了几个字体图标，在<code>src</code>文件夹下创建一个<code>font</code>文件夹，把字体图标文件放里面</p><p>回到<code>element.js</code>文件中，来创建一个<code>i</code>标签，通过类名方式来使用这个字体图标<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// i元素，字体图标</span></span><br><span class="line"><span class="keyword">const</span> iEl = <span class="built_in">document</span>.createElement(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">iEl.className = <span class="string">&quot;iconfont icon-dianshijiB&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(iEl)</span><br></pre></td></tr></table></figure></p><p>注意把字体图标的css样式文件放入依赖图里面即<code>iconfont.css</code>，而这个文件里依赖的其它字体文件如<code>ttf</code>、<code>woff2</code>也会加入依赖图，根据这个依赖<code>webpack</code>就会去打包这些资源<br><code>element.js</code>引入<code>iconfont.css</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入字体文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../font/iconfont.css&quot;</span></span><br></pre></td></tr></table></figure></p><p>这个时候我们尝试打包，是可以打包成功的，但是之前这个<code>woff2</code>其实是无法进行模块解析的，也会让我们使用一个<code>loader</code>，当然它这里应该是内置了，这个<code>loader</code>，我们可以学习一下，<code>webpack4</code>可能会使用</p><h2 id="webpack5之前关于字体打包"><a href="#webpack5之前关于字体打包" class="headerlink" title="webpack5之前关于字体打包"></a>webpack5之前关于字体打包</h2><p>回到<code>webpack.config.js</code>文件中配置<code>rules</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(eot|ttf|woff2?)$/</span>,</span><br><span class="line">  use: &#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&quot;file-loader&quot;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;font/[name]_[hash:6].[ext]&quot;</span> <span class="comment">// 注意这里是name，如果写成filename它不会去读文件夹【输出这个文件夹】</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="comment">// 字体资源【webpack5开始内置这个资源模块】</span></span><br></pre></td></tr></table></figure></p><p>以上打包就能成功，当然这是<code>webpack5</code>之前的方案</p><h2 id="webpack5开始关于字体打包"><a href="#webpack5开始关于字体打包" class="headerlink" title="webpack5开始关于字体打包"></a>webpack5开始关于字体打包</h2><p><code>webpack5</code>已经内置，其实就是一种<code>asset module type</code><br>重新配置一下字体文件的规则<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(eot|ttf|woff2?)$/</span>,</span><br><span class="line">  type: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">  <span class="attr">generator</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;font/[name]_[hash:6][ext]&#x27;</span>, <span class="comment">// 注意内置模块得filename里得[ext]包含.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="comment">// 字体资源【webpack5开始内置这个资源模块】</span></span><br></pre></td></tr></table></figure><br>下方其实一直会有个警告，关于<code>limit</code>即做<code>base64</code>编码，这个<strong>一般</strong>字体文件是不需要做编码的，当然具体得看公司</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack5-样式篇(二)</title>
      <link href="/archives/f06c04f5.html"/>
      <url>/archives/f06c04f5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <p>💻Installation<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/coding327/learn_webpack5.git</span><br></pre></td></tr></table></figure></p><h2 id="认识css-loader"><a href="#认识css-loader" class="headerlink" title="认识css-loader"></a>认识css-loader</h2><p>由于<code>webpack</code>社区很强大，这个<code>loader</code>不需要我们去编写，对于<code>css</code>在社区有个很强大的<code>css-loader</code>，我们只需要使用<code>npm</code>安装上即可，同时<code>loader</code>只在<strong>开发环境</strong>使用安装时可以加上参数<code>-D</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader -D</span><br></pre></td></tr></table></figure><br>安装了不代表就能直接使用，还需要配置</p><h2 id="css-loader使用方案"><a href="#css-loader使用方案" class="headerlink" title="css-loader使用方案"></a>css-loader使用方案</h2><p>如何使用这个loader来加载css文件呢?有三种方式:</p><ul><li>内联方式;</li><li>CLI方式 ( webpack5中不再使用）;</li><li>配置方式;</li></ul><ol><li>内联方式<br>由于<code>abc.js--&gt;abc.css</code>我们可以在<code>abc.js</code>文件中配置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;css-loader!../css/abc.css&quot;</span></span><br></pre></td></tr></table></figure>注意！一定要加上，它是起分割作用的<br>之后打包，没有报错，但是这个样式文件没有生效，浏览器审查元素发现样式没加上去啊，其实一个<code>loader</code>还不够，我们还需要其它<code>loader</code>把样式添加到元素上面去</li></ol><ul><li>内联方式：内联方式使用较少，因为不方便管理<ul><li>在引入的样式前加上使用的<code>loader</code>，并且使用！分割；</li></ul></li><li><code>CLI</code>方式<ul><li>在<code>webpack5</code>的文档中已经没有了<code>--module-bind</code>；</li><li>实际应用中也比较少使用，因为不方便管理；</li></ul></li><li><code>loader</code>配置方式【在我们的<code>webpack.config.js</code>文件中写明配置信息】<ul><li><code>module.rules</code>中允许我们配置多个<code>loader</code>(因为我们也会继续使用其他的<code>loader</code>，来完成其他文件的加载）;</li><li>这种方式可以更好的表示<code>loader</code>的配置，也方便后期的维护，同时也让你对各个<code>Loader</code>有一个全局的概览;</li></ul></li></ul><p>进入<code>webpack.config.js</code>文件中配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack是运行在node环境下的，不要使用ES6 module导出【如果非要使用它还需要做额外配置】</span></span><br><span class="line"><span class="comment">// 注意出口文件中的path得是绝对路径，需要使用到path模块，做路径拼接即可，__dirname就是当前编写代码文件所在目录【绝对路径】</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;./build/&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123; <span class="comment">// 配置module</span></span><br><span class="line">    <span class="attr">rules</span>: [ <span class="comment">// 注意rules是数组，以后会有多个规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 正则表达式，由于.在正则表达式中有特殊含义，使用反斜杠转义</span></span><br><span class="line">        <span class="comment">// 1. loader的写法(语法糖，是use: &quot;css-loader&quot;的简写，use可以写字符串、对象及数组)</span></span><br><span class="line">        <span class="comment">// loader: &quot;css-loader&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// use: &quot;css-loader&quot;</span></span><br><span class="line">        <span class="comment">// use: &#123;</span></span><br><span class="line">        <span class="comment">//   loader: &quot;xxx-loader&quot;,</span></span><br><span class="line">        <span class="comment">//   options: xxx</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 完整的写法【数组】</span></span><br><span class="line">        <span class="comment">// 但是一个loader是搞不定的，use这里一般是放数组</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 对象写法语法格式【一般对象都是作为配置项】</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;xxx-loader&quot;, options: xxx&#125;</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;css-loader&quot;&#125;</span></span><br><span class="line">          <span class="comment">// 如果loader没有其它参数配置，一般可以写下面这种</span></span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;, <span class="comment">// 加载css需要规则</span></span><br><span class="line">      &#123;&#125;, <span class="comment">// 加载less需要规则</span></span><br><span class="line">      &#123;&#125;, <span class="comment">// 加载js以后可能也需要规则</span></span><br><span class="line">      &#123;&#125;, <span class="comment">// 加载ts需要规则</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>以上便是<code>css-loader</code>的最终使用方案【当然还需要其它<code>loader</code>把样式插入到<code>html</code>页面中】</p><h2 id="认识style-loader"><a href="#认识style-loader" class="headerlink" title="认识style-loader"></a>认识style-loader</h2><ul><li>我们已经可以通过<code>css-loader</code>来加载<code>css</code>文件了<ul><li>但是你会发现这个<code>css</code>在我们的代码中并没有生效（页面没有效果)。</li></ul></li><li>这是为什么呢?<ul><li>因为<code>css-loader</code>只是负责将<code>.css</code>文件进行解析，并不会将解析之后的<code>css</code>插入到页面中;</li><li>如果我们希望再完成插入<code>style</code>的操作，那么我们还需要另外一个<code>loader</code>，就是<code>style-loader</code>;</li></ul></li><li>安装<code>style-loader</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader -D</span><br></pre></td></tr></table></figure></li></ul><p>安装完，在<code>rules</code>中添加<code>style-loader</code>，其中的细节我已经写在注释里面了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack是运行在node环境下的，不要使用ES6 module导出【如果非要使用它还需要做额外配置】</span></span><br><span class="line"><span class="comment">// 注意出口文件中的path得是绝对路径，需要使用到path模块，做路径拼接即可，__dirname就是当前编写代码文件所在目录【绝对路径】</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;./build/&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123; <span class="comment">// 配置module</span></span><br><span class="line">    <span class="attr">rules</span>: [ <span class="comment">// 注意rules是数组，以后会有多个规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 正则表达式，由于.在正则表达式中有特殊含义，使用反斜杠转义</span></span><br><span class="line">        <span class="comment">// 1. loader的写法(语法糖，是use: &quot;css-loader&quot;的简写，use可以写字符串、对象及数组)</span></span><br><span class="line">        <span class="comment">// loader: &quot;css-loader&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// use: &quot;css-loader&quot;</span></span><br><span class="line">        <span class="comment">// use: &#123;</span></span><br><span class="line">        <span class="comment">//   loader: &quot;xxx-loader&quot;,</span></span><br><span class="line">        <span class="comment">//   options: xxx</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 完整的写法【数组】，注意这里数组它是从后往前执行loader，而对于css应该先使用加载loader再使用插入loader，这里的执行顺序一定要注意</span></span><br><span class="line">        <span class="comment">// 但是一个loader是搞不定的，use这里一般是放数组</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 对象写法语法格式【一般对象都是作为配置项】</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;xxx-loader&quot;, options: xxx&#125;</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;style-loader&quot;&#125;,</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;css-loader&quot;&#125;</span></span><br><span class="line">          <span class="comment">// 如果loader没有其它参数配置，一般可以写下面这种</span></span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;, <span class="comment">// 加载css需要规则</span></span><br><span class="line">      &#123;&#125;, <span class="comment">// 加载less需要规则</span></span><br><span class="line">      &#123;&#125;, <span class="comment">// 加载js以后可能也需要规则</span></span><br><span class="line">      &#123;&#125;, <span class="comment">// 加载ts需要规则</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个<code>style-loader</code>它是怎么做的呢？</p><ul><li>其实就是在<code>head</code>中创建一个<code>style</code>标签，把我们的样式给它放到<code>style</code>标签里面</li><li>在开发里面我们一般是把它提取到专门的css文件里面，然后给它<code>link</code>进来，后面再说，其实就是通过一个插件完成的</li></ul><h2 id="如何处理less文件？"><a href="#如何处理less文件？" class="headerlink" title="如何处理less文件？"></a>如何处理less文件？</h2><p>在平时开发中，我们可能会喜欢写<code>sass</code>、<code>less</code>，相比于<code>css</code>，可以说是增强了，比如定义变量、嵌套关系<br>这时候我们写一个<code>less</code>文件，并把它加入到依赖图里【element.js—&gt;title.less】<br>我们尝试进行打包，发现报错<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Module parse failed: Unexpected character <span class="string">&#x27;@&#x27;</span> (2:0)</span><br><span class="line">You may need an appropriate loader to handle this file <span class="built_in">type</span>, currently no loaders are configured to process this file. See https://webpack.js.org/concepts<span class="comment">#loaders</span></span><br></pre></td></tr></table></figure></p><p>如果写个原生项目并使用过<code>sass</code>或者<code>less</code>，我们之前都是会使用工具【vscode也有这种插件，需要配置】将它们转换为原始的<code>css</code>，因为浏览器它不认识<code>sass</code>和<code>less</code></p><p>由于有<code>npm</code>，我们可以使用<code>lessc</code>这个工具，当然有的时候也可以直接使用这个<code>less</code>，它会自己去找这个<code>lessc</code>的<br><code>lessc</code>完整的应该叫<code>less compiler</code></p><p>全局安装<code>lessc</code>工具【注意安装的虽然是<code>less</code>但是它会帮我们安装<code>lessc</code>工具】<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less -g</span><br></pre></td></tr></table></figure></p><p>局部安装<code>lessc</code>工具【注意安装的虽然是<code>less</code>但是它会帮我们安装<code>lessc</code>工具】<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less -D</span><br></pre></td></tr></table></figure></p><p>安装成功后，我们可以在<code>node_modules/.bin</code>找到这个<code>lessc</code>文件<br>我们可以在项目根目录创建一个<code>test.less</code>文件，并写一点<code>less</code>代码<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义两个变量</span></span><br><span class="line"><span class="variable">@bgColor:</span> blue;</span><br><span class="line"><span class="variable">@textDecoration:</span> underline;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@bgColor</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: <span class="variable">@textDecoration</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后使用<code>npx</code>命令来对这个<code>less</code>文件进行转换【使用<code>npx</code>命令，它自己会去<code>node_modules</code>下找<code>lessc</code>】<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx lessc ./test.less demo.css</span><br></pre></td></tr></table></figure><br><code>demo.css</code>是输出文件</p><p>运行完之后，项目根目录就会多一个<code>demo.css</code>文件，打开<code>demo.css</code>，其中代码就是原始<code>css</code>代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实际开发中，不可能每次都去找这个<code>less</code>文件相对路径，那么如何在<code>webpack</code>中，把<code>less</code>文件的处理和<code>lessc</code>工具结合起来呢？<br>这个时候需要一个<code>less-loader</code>这样的一个工具<br>其实在安装<code>less-loader</code>的时候，我们还需要安装<code>less</code>这个工具<br>它本质是依赖于<code>lessc</code>的。<br>局部安装<code>less-loader</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less-loader -D</span><br></pre></td></tr></table></figure></p><p>回到webpack.config.js文件里，配置<code>rules</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack是运行在node环境下的，不要使用ES6 module导出【如果非要使用它还需要做额外配置】</span></span><br><span class="line"><span class="comment">// 注意出口文件中的path得是绝对路径，需要使用到path模块，做路径拼接即可，__dirname就是当前编写代码文件所在目录【绝对路径】</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;./build/&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123; <span class="comment">// 配置module</span></span><br><span class="line">    <span class="attr">rules</span>: [ <span class="comment">// 注意rules是数组，以后会有多个规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 正则表达式，由于.在正则表达式中有特殊含义，使用反斜杠转义</span></span><br><span class="line">        <span class="comment">// 1. loader的写法(语法糖，是use: &quot;css-loader&quot;的简写，use可以写字符串、对象及数组)</span></span><br><span class="line">        <span class="comment">// loader: &quot;css-loader&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// use: &quot;css-loader&quot;</span></span><br><span class="line">        <span class="comment">// use: &#123;</span></span><br><span class="line">        <span class="comment">//   loader: &quot;xxx-loader&quot;,</span></span><br><span class="line">        <span class="comment">//   options: xxx</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 完整的写法【数组】，注意这里数组它是从后往前执行loader，而对于css应该先使用加载loader再使用插入loader，这里的执行顺序一定要注意</span></span><br><span class="line">        <span class="comment">// 但是一个loader是搞不定的，use这里一般是放数组</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 对象写法语法格式【一般对象都是作为配置项】</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;xxx-loader&quot;, options: xxx&#125;</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;style-loader&quot;&#125;,</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;css-loader&quot;&#125;</span></span><br><span class="line">          <span class="comment">// 如果loader没有其它参数配置，一般可以写下面这种</span></span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;, <span class="comment">// 加载css需要规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="comment">// less文件</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>, <span class="comment">// 解析了css代码，但是样式并未插入到index.html中，所以还需要style-loader，把css代码插入到index.html文件中，其实就是创建style标签把css代码放里面</span></span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>, <span class="comment">// less代码转为了css代码，但是webpack也无法加载解析css，所以需要css-loader</span></span><br><span class="line">          <span class="string">&quot;less-loader&quot;</span> <span class="comment">// lessc独立于webpack，使用less-loader它不仅处理了less文件的import依赖关系【webpack并不识别除js以外的文件，无法加载解析除js以外的文件】，同时使用lessc帮我们将less代码转换为css代码</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;, <span class="comment">// 加载less需要规则</span></span><br><span class="line">      &#123;&#125;, <span class="comment">// 加载js以后可能也需要规则</span></span><br><span class="line">      &#123;&#125;, <span class="comment">// 加载ts需要规则</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于<code>less</code>文件处理，需要安装的包有<code>less</code>和<code>less-loader</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i less less-loader -D</span><br></pre></td></tr></table></figure></p><h2 id="认识PostCSS工具"><a href="#认识PostCSS工具" class="headerlink" title="认识PostCSS工具"></a>认识PostCSS工具</h2><blockquote><p>什么是PostCSS呢?</p></blockquote><ul><li>PostCSS是一个通过JavaScript来转换样式的工具;<ul><li>这个工具可以帮助我们进行一些CSS的转换和适配，比如自动添加浏览器前缀、css样式的重置;</li><li>但是实现这些功能，我们需要借助于PostCSS对应的插件;</li></ul></li><li>如何使用PostCSS呢?主要就是两个步骤︰<ul><li>第一步:查找PostCSS在构建工具中的扩展，比如webpack中的postcss-loader;</li><li>第二步:选择可以添加你需要的PostCSS相关的插件;</li></ul></li></ul><h2 id="命令行使用postcss"><a href="#命令行使用postcss" class="headerlink" title="命令行使用postcss"></a>命令行使用postcss</h2><ul><li>当然，我们能不能也直接在终端使用<code>PostCSS</code>呢?<ul><li>也是可以的，但是我们需要单独安装一个工具<code>postcss-cli</code>;</li></ul></li><li>我们可以安装一下它们:<code>postcss</code>、<code>postcss-cli</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss postcss-cli -D</span><br></pre></td></tr></table></figure><ul><li>我们编写一个需要添加前缀的<code>css</code>:<ul><li><a href="https://autoprefixer.github.io/">https://autoprefixer.github.io/</a></li><li>我们可以在上面的网站中查询一些添加<code>css</code>属性的样式;</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:fullscreen</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="autoprefixer插件"><a href="#autoprefixer插件" class="headerlink" title="autoprefixer插件"></a>autoprefixer插件</h2><p><code>autoprefixer</code>自动添加浏览器前缀的插件</p><ul><li>因为我们需要添加前缀，所以要安装<code>autoprefixer</code>:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install autoprefixer -D</span><br></pre></td></tr></table></figure></li><li>直接使用使用<code>postcss</code>工具，并且制定使用<code>autoprefixer</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx postcss --use autoprefixer -o end.css ./src/css/style.css</span><br></pre></td></tr></table></figure><code>--use</code>是使用什么插件<br><code>-o</code>输出到哪里<br>最后一个是入口文件</li></ul><p>我们可以在项目根目录创建一个<code>test.css</code>文件，并输入如下需要添加浏览器前缀的代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="comment">/* 这个代码是需要添加浏览器前缀的 */</span></span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>局部安装<code>postcss</code>、<code>postcss-cli</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss postcss-cli -D</span><br></pre></td></tr></table></figure><br>经过一系列转换，最终要输出为有浏览器前缀的代码<br><code>postcss</code>这个工具还需要一个自动添加浏览器前缀的<code>plugins</code>插件—&gt;autoprefixer</p><p>局部安装自动添加浏览器前缀<code>autoprefixer</code>插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install autoprefixer -D</span><br></pre></td></tr></table></figure></p><p>在终端使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx postcss --use autoprefixer -o demo.css test.css</span><br></pre></td></tr></table></figure></p><p><code>demo.css</code>中代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  -webkit-user-select: none;</span><br><span class="line">     -moz-user-select: none;</span><br><span class="line">          user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了方便接下来测试，我们进入<code>src/css/style.css</code>文件中添加<code>user-select: none;</code>代码，这个代码其实是需要添加浏览器前缀的<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="comment">/* 这个代码是需要添加浏览器前缀的 */</span></span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>实际开发肯定不是这样在终端里面还要输入文件路径，很麻烦，那么在<code>webpack</code>中应该怎么使用<code>postcss</code>呢？</p></blockquote><p>同样也是需要使用一个<code>loader</code>工具—&gt;postcss-loader<br>主要是<code>webpack</code>它也不识别<code>postcss</code>，安装这个插件<code>webpack</code>就能使用<code>postcss</code><br>局部安装<code>postcss-loader</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-loader -D</span><br></pre></td></tr></table></figure></p><p>和之前一样，安装完这个插件肯定还需要配置<code>rules</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack是运行在node环境下的，不要使用ES6 module导出【如果非要使用它还需要做额外配置】</span></span><br><span class="line"><span class="comment">// 注意出口文件中的path得是绝对路径，需要使用到path模块，做路径拼接即可，__dirname就是当前编写代码文件所在目录【绝对路径】</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;./build/&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123; <span class="comment">// 配置module</span></span><br><span class="line">    <span class="attr">rules</span>: [ <span class="comment">// 注意rules是数组，以后会有多个规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 正则表达式，由于.在正则表达式中有特殊含义，使用反斜杠转义</span></span><br><span class="line">        <span class="comment">// 1. loader的写法(语法糖，是use: &quot;css-loader&quot;的简写，use可以写字符串、对象及数组)</span></span><br><span class="line">        <span class="comment">// loader: &quot;css-loader&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// use: &quot;css-loader&quot;</span></span><br><span class="line">        <span class="comment">// use: &#123;</span></span><br><span class="line">        <span class="comment">//   loader: &quot;xxx-loader&quot;,</span></span><br><span class="line">        <span class="comment">//   options: xxx</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 完整的写法【数组】，注意这里数组它是从后往前执行loader，而对于css应该先使用加载loader再使用插入loader，这里的执行顺序一定要注意</span></span><br><span class="line">        <span class="comment">// 但是一个loader是搞不定的，use这里一般是放数组</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 对象写法语法格式【一般对象都是作为配置项】</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;xxx-loader&quot;, options: xxx&#125;</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;style-loader&quot;&#125;,</span></span><br><span class="line">          <span class="comment">// &#123;loader: &quot;css-loader&quot;&#125;</span></span><br><span class="line">          <span class="comment">// 如果loader没有其它参数配置，一般可以写下面这种</span></span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>, <span class="comment">// 这个比较特殊，它使用了autoprefixer插件，需要做配置项</span></span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                  <span class="built_in">require</span>(<span class="string">&quot;autoprefixer&quot;</span>)</span><br><span class="line">                ]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;, <span class="comment">// 加载css需要规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="comment">// less文件</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>, <span class="comment">// 解析了css代码，但是样式并未插入到index.html中，所以还需要style-loader，把css代码插入到index.html文件中，其实就是创建style标签把css代码放里面</span></span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>, <span class="comment">// less代码转为了css代码，但是webpack也无法加载解析css，所以需要css-loader</span></span><br><span class="line">          <span class="string">&quot;less-loader&quot;</span> <span class="comment">// lessc独立于webpack，使用less-loader它不仅处理了less文件的import依赖关系【webpack并不识别除js以外的文件，无法加载解析除js以外的文件】，同时使用lessc帮我们将less代码转换为css代码</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;, <span class="comment">// 加载less需要规则</span></span><br><span class="line">      &#123;&#125;, <span class="comment">// 加载js以后可能也需要规则</span></span><br><span class="line">      &#123;&#125;, <span class="comment">// 加载ts需要规则</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后<code>npm run build</code>，在浏览器上运行，通过审查元素，我们可以快速找到样式，发现浏览器前缀已经成功添加上了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 这个代码是需要浏览器前缀的 */</span></span></span><br><span class="line"><span class="css">  -webkit-user-select: none;</span></span><br><span class="line"><span class="css">     -moz-user-select: none;</span></span><br><span class="line"><span class="css">          user-select: none;</span></span><br><span class="line"><span class="css">&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>但是我们发现这个<code>postcss-loader</code>需要额外配置有一大堆，那么有没有其它简便方式呢？<br>把配置信息抽取出去：</p><ul><li>首先我们在<code>webpack.config.js</code>文件中依旧像之前一样使用字符串语法糖写法</li><li>其实我们还可以在项目根目录创建一个<code>postcss.config.js</code>，然后在其中输入以下代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 把插件抽离到这里</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&quot;autoprefixer&quot;</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>然后重新打包，运行咱们文件，审查元素，发现浏览器前缀依旧添加成功</p><blockquote><p>那么它是如何做到的呢？</p></blockquote><p>其实它默认是会在<code>webpack.config.js</code>的那个<code>postcss-loader</code>那里先看看有没有配置信息，如果没有它就会在当前项目根目录去找这个<code>postcss.config.js</code>，接着会查看这个文件有没有导出对象，如果有它就会把这个导出的对象当成配置信息</p><p>以上其实我们只需要安装如下几个插件，<code>postcss-cli</code>其实并不需要，那个是测试我们在终端使用<code>postcss</code>命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss postcss-loader autoprefixer -D</span><br></pre></td></tr></table></figure></p><h2 id="postcss-preset-env插件"><a href="#postcss-preset-env插件" class="headerlink" title="postcss-preset-env插件"></a>postcss-preset-env插件</h2><ul><li>事实上，在配置<code>postcss-loader</code>时，我们配置插件并不需要使用<code>autoprefixer</code></li><li>我们可以使用另外一个插件：<code>postcss-preset-env</code><ul><li><code>postcss-preset-env</code>也是一个<code>postcss</code>的插件;</li><li>它可以帮助我们将一些现代的<code>CSS</code>特性，转成大多数浏览器认识的<code>CSS</code>，并且会根据目标浏览器或者运行时环境添加所需的<code>polyfill</code>;</li><li>也包括会自动帮助我们添加<code>autoprefixer</code>(所以相当于已经内置了<code>autoprefixer</code>) ;</li></ul></li></ul><h2 id="局部安装插件"><a href="#局部安装插件" class="headerlink" title="局部安装插件"></a>局部安装插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-preset-env -D</span><br></pre></td></tr></table></figure><p>由于<code>postcss-preset-env</code>插件已经内置<code>autoprefixer</code>我们可以去<code>postcss.config.js</code>文件中<code>require</code>这个<code>postcss-preset-env</code>插件即可<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 把插件抽离到这里</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// require(&quot;autoprefixer&quot;)</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&quot;postcss-preset-env&quot;</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后打包，我们可以在浏览器发现浏览器前缀是添加成功了的</p><p>接着测试它是否能把<code>css</code>新特性转换为大多数浏览器认识的<code>css</code>，进入<code>src/css/style.css文件中</code>，添加css颜色8位写法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="comment">/* color: red; */</span></span><br><span class="line">  <span class="comment">/* css新特性支持8位，最后两位是透明度 */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#123456</span>78;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="comment">/* 这个代码是需要浏览器前缀的 */</span></span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们重新打包，运行在浏览器，我们发现颜色由8位转为<code>rgba</code>—&gt;大多数浏览器能识别的css代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="comment">/* color: red; */</span></span><br><span class="line">  <span class="comment">/* css新特性支持8位，最后两位是透明度 */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">18</span>,<span class="number">52</span>,<span class="number">86</span>,<span class="number">0.47059</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="comment">/* 这个代码是需要浏览器前缀的 */</span></span><br><span class="line">  -webkit-user-select: none;</span><br><span class="line">     -moz-user-select: none;</span><br><span class="line">          user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后<code>postcss</code>需要安装插件归为以下几个<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss postcss-loader postcss-preset-env -D</span><br></pre></td></tr></table></figure></p><p>最后补充一个知识点：<br>我们在写那个<code>rules</code>时，<code>test</code>那个正则是可以把css、less写在一块的，这样可以不用分开写<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">    <span class="string">&quot;less-loader&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;, <span class="comment">// css、less合并写法</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack5-初识篇(一)</title>
      <link href="/archives/93e9d0fa.html"/>
      <url>/archives/93e9d0fa.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <p>💻Installation</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/coding327/learn_webpack5.git</span><br></pre></td></tr></table></figure><h2 id="webpack5-初识"><a href="#webpack5-初识" class="headerlink" title="webpack5 初识"></a>webpack5 初识</h2><blockquote><p>在学习之前确保你已经有<code>node</code>环境，并且推荐<code>node</code>版本在 14.xx.xx 即可</p></blockquote><p>像<code>vue【vue-cli】</code>、<code>react【create-react-app】</code>和<code>angular【angular-cli】</code>它们的脚手架都是基于<code>webpack</code>开发的，所以学习<code>webpack</code>更方便我们了解脚手架</p><h2 id="为什么需要-webpack"><a href="#为什么需要-webpack" class="headerlink" title="为什么需要 webpack?"></a>为什么需要 webpack?</h2><ol><li>解决作用域问题【方便可读性和可维护性】</li></ol><ul><li>因为原生项目加载太多脚本会导致网络瓶颈。同时如果你不小心更改了<code>JavaScript</code>文件的加载顺序，这个项目可能要崩溃</li></ul><ol><li>解决代码拆分问题【webpack 支持模块】</li></ol><ul><li><code>CommonJS</code> 没有浏览器支持。没有 <code>live binding(实时绑定)</code>。循环引用存在问题。同步执行的模块解析加载器速度很慢。虽然 <code>CommonJS</code> 是 <code>Node.js</code> 项目的绝佳解决方案，但浏览器不支持模块</li></ul><h2 id="webpack-安装"><a href="#webpack-安装" class="headerlink" title="webpack 安装"></a>webpack 安装</h2><blockquote><p>全局安装【不推荐全局安装，实际开发中，每个项目对应的<code>webpack</code>版本是不同的，推荐局部安装】</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli -g</span><br></pre></td></tr></table></figure><blockquote><p>局部安装【注意打包工具是安装开发环境即可—&gt;大写 D】</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure><h2 id="webpack-使用"><a href="#webpack-使用" class="headerlink" title="webpack 使用"></a>webpack 使用</h2><blockquote><p>在<strong>项目根目录</strong>输入以下命令，它会去你的<strong>当前文件夹里以及全局安装下</strong>找<code>webpack</code>，而不是你局部安装的<code>webpack</code>【局部安装<code>node-modules</code>下是有个<code>.bin</code>文件夹里面就是软链接文件，我们所使用的命令其实就是软链接文件名】</p></blockquote><p>控制台或者<code>CMD</code>窗口下执行命令都有一个特点，它会去你当前文件夹里找，找不到再去全局安装下找，若找不到就报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure><blockquote><p><code>webpack</code>包局部安装在<code>node_modules/.bin/webpack</code>，那么可以执行它，它就会为我们打包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/.bin/webpack</span><br></pre></td></tr></table></figure><blockquote><p>但是这样很麻烦，还要找到它安装位置，<code>npm</code>为我们提供了一个<code>npx</code>，当执行<code>npx webpack</code>时，它就会去<code>node_modules</code>下找<code>webpack</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><blockquote><p>除了以上这种做法，其实我们在项目中，一般是在<code>package.json</code>编写<code>scripts</code>脚本，它也会去<code>node_modules</code>下找<code>webpack</code></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们只需要使用<code>npm run build</code>运行脚本即可</p><h2 id="问题：以上打包我们并没有指定入口文件，它为什么就可以打包了呢？难道有默认入口？"><a href="#问题：以上打包我们并没有指定入口文件，它为什么就可以打包了呢？难道有默认入口？" class="headerlink" title="问题：以上打包我们并没有指定入口文件，它为什么就可以打包了呢？难道有默认入口？"></a>问题：以上打包我们并没有指定入口文件，它为什么就可以打包了呢？难道有默认入口？</h2><p>关于<code>webpack</code>打包默认入口文件和出口文件，它是有一个入口文件的，从你当前项目根目录下去找<code>src</code>下的<code>index.js</code>文件，对它<code>index.js</code>依赖的其它文件也会和它自己一起打包输出到出口文件中]进行打包，如果你改成<code>main.js</code>或者其它文件名就会报错，出口默认打包到项目根目录下的<code>dist</code>下的<code>main.js</code>文件中</p><h2 id="指定打包的入口文件和出口文件"><a href="#指定打包的入口文件和出口文件" class="headerlink" title="指定打包的入口文件和出口文件"></a>指定打包的入口文件和出口文件</h2><p>一般项目中结构是<code>src/main.js</code>，打包目录个人经常会用<code>build</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack --entry ./src/main.js --output-path ./build</span><br></pre></td></tr></table></figure><p>当然以上方法我们也可以在脚本中指定</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack --entry ./src/main.js --output-path ./build&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们发现命令太长了，而且<code>webpack</code>配置肯定不是一个或者两个，而是会有一大堆的配置的，把所有配置信息写到命令后面肯定不太现实，不方便做管理；<br>所以真实开发中，不建议在上面写上入口文件和出口文件，我们会在当前项目根目录下创建一个<code>webpack.config.js</code>文件，默认文件名就叫这个，当然也可以改，但是需要做额外配置<br>这个文件它其实会被<code>webpack</code>默认读取，这样打包时入口出口我们只需要在其中进行配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack是运行在node环境下的，不要使用ES6 module导出【如果非要使用它还需要做额外配置】</span></span><br><span class="line"><span class="comment">// 注意出口文件中的path得是绝对路径，需要使用到path模块，做路径拼接即可，__dirname就是当前编写代码文件所在目录【绝对路径】</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;./build/&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这其中的入口、出口文件名都是可以自己指定的</p><p>这里我们来修改<code>webpack.config.js</code>文件名，如改为<code>abc.config.js</code>，那么我们就需要做额外配置<br>回到<code>package.json</code>文件中，指定<code>webpack</code>配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack --config abc.config.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后<code>npm run build</code>即可<br>但是一般不建议修改，默认使用<code>webpack.config.js</code>文件名即可</p><h2 id="webpack-的依赖图"><a href="#webpack-的依赖图" class="headerlink" title="webpack 的依赖图"></a>webpack 的依赖图</h2><blockquote><p><code>webpack</code>到底是如何对我们的项目进行打包的呢?</p></blockquote><ol><li>事实上<code>webpack</code>在处理应用程序时，它会根据命令或者配置文件找到入口文件;</li><li>从入口开始，会生成一个<strong>依赖关系图</strong>，这个<strong>依赖关系图</strong>会包含应用程序中所需的所有模块（比如 js 文件、css 文件、图片、字体等）；</li><li>然后遍历图结构，打包一个个模块（根据文件的不同使用不同的 loader 来解析)；<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10170.png" alt="webpack的依赖图"></li></ol><p>为了和我们打包<code>main.js</code>产生依赖关系，样式文件或其它<code>js</code>文件，可以直接使用<code>import &#39;文件相对路径&#39;</code><br>这样它就会帮我们打包【从强关联角度，如果样式是为了添加到其它<code>js</code>文件的，可以通过<code>import &#39;文件相对路径&#39;</code>引入到对应的<code>js</code>文件中，也是可以打包的—&gt;其依赖关系为<code>main.js--&gt;abc.js--&gt;abc.css</code>】</p><blockquote><p>然后我们再次打包，发现报错了</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Module parse failed: Unexpected token (1:0)</span><br><span class="line">You may need an appropriate loader to handle this file <span class="built_in">type</span>, currently no loaders are configured to process this file. See https://webpack.js.org/concepts<span class="comment">#loaders</span></span><br></pre></td></tr></table></figure><p>以上报错信息说模块解析失败，你可能需要一个合适的<code>loader</code>来加载这个<code>css</code>文件，但是<code>loader</code>是什么呢？</p><ul><li><code>loader</code>可以用于对<strong>模块的源代码</strong>进行转换【解析】;</li><li>我们可以<strong>将<code>css</code>文件也看成是一个模块</strong>，我们是<strong>通过<code>import</code>来加载这个模块</strong>的;</li><li>在加载这个模块时，<strong><code>webpack</code>其实并不知道如何对其进行加载</strong>，我们必须制定对应的<code>loader</code>来完成这个功能;</li></ul><p>具体的<code>loader</code>使用，我将它们放到下一篇中<br><div class="tag link"><a class="link-card" title="webpack5样式篇(二)" href="https://blog.coding327.top/archives/f06c04f5.html"><div class="left"><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10172.jpg"/></div><div class="right"><p class="text">webpack5样式篇(二)</p><p class="url">https://blog.coding327.top/archives/f06c04f5.html</p></div></a></div></p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序项目实战(六)</title>
      <link href="/archives/120edf87.html"/>
      <url>/archives/120edf87.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <p>💻Installation<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/coding327/mymovies.git</span><br></pre></td></tr></table></figure></p><h2 id="关于页及授权登录的实现"><a href="#关于页及授权登录的实现" class="headerlink" title="关于页及授权登录的实现"></a>关于页及授权登录的实现</h2><h3 id="绘制关于页面"><a href="#绘制关于页面" class="headerlink" title="绘制关于页面"></a>绘制关于页面</h3><p>这里<code>wxml</code>和<code>wxss</code>代码我就不做展示了，可以到<code>about</code>文件夹下查看</p><h3 id="用户授权登陆"><a href="#用户授权登陆" class="headerlink" title="用户授权登陆"></a>用户授权登陆</h3><p>使用按钮里绑定的<code>getUserProfile</code>函数，用户信息拿到了将它存储到数据仓库中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面的初始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">userInfo</span>: <span class="literal">null</span>, <span class="comment">// 存储局部用户信息</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">getUserProfile</span>(<span class="params">e</span>)</span> &#123; <span class="comment">// 获取用户信息【这个事件对象建议带上】</span></span><br><span class="line">    <span class="comment">// 【注意wx.getUserProfile必须搭配点击事件才能使用】推荐使用 wx.getUserProfile 获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认</span></span><br><span class="line">    <span class="comment">// 开发者妥善保管用户快速填写的头像昵称，避免重复弹窗</span></span><br><span class="line">    wx.getUserProfile(&#123;</span><br><span class="line">      <span class="attr">desc</span>: <span class="string">&#x27;用于完善用户个人信息&#x27;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//   console.log(res);</span></span><br><span class="line">          <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">              <span class="attr">userInfo</span>: res.userInfo</span><br><span class="line">          &#125;)</span><br><span class="line">          app.userInfo = res.userInfo <span class="comment">// 考虑到很多页面会使用用户信息，添加到全局实例中</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>回到<code>about.wxml</code>文件中展示用户信息，需要使用或运算符，只有当数据仓库中有用户信息才展示用户信息，没有显示默认的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用户信息 start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;userinfo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;user-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; userInfo.avatarUrl || &#x27;/imgs/user.png&#x27; &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 昵称默认没授权不显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123; userInfo &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;user-nickname&quot;</span>&gt;</span>&#123;&#123; userInfo.nickName &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- plain镂空 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">wx:else</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span> <span class="attr">plain</span> <span class="attr">bindtap</span>=<span class="string">&quot;getUserProfile&quot;</span>&gt;</span>点击授权登陆<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用户信息 end --&gt;</span></span><br></pre></td></tr></table></figure><br>需要注意一个问题，如果授权登陆了，数据是会存储到本地缓存中的，但是下次再进来还要再点一下按钮才能显示用户头像和昵称？<br>【原先的<code>getUserInfo</code>解决方案】<br>也就是说当小程序启动时就要尝试去获取本地缓存中的用户信息，如果用户已经授权过了，用户进入<code>about</code>页面就要直接展示用户头像和昵称，小程序启动是在<code>app.js</code>，进入<code>app.js</code>文件中，启动时获取到的用户信息，咱们需要把这个用户信息定义为全局的，全局存储这个用户信息，然后再到<code>about.js</code>文件中，当<code>about</code>页面加载时，判断全局用户信息有没有，如果有就获取并放到<code>about</code>里的局部用户信息中，注意需要获取全局实例<code>app</code>才能拿到用户信息；考虑到用户信息很多页面可能会用到，所以添加到全局实例中，需要注意一个问题，小程序启动过程中有个获取用户信息，而获取用户信息是个异步的过程，可能出现关于页面还拿着全局用户信息<code>null</code>直接加载完了页面，显然这是小程序和页面加载时机的问题，解决方法就是给全局实例绑定回调，然后判断有没有这个<code>callback</code>，如果有就调用并把结果作为实参传递进去。</p><p>【目前直接用同步缓存<code>wx.setStorageSync</code>和<code>wx.getStorageSync</code>方法】<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> userInfo = wx.getStorageSync(<span class="string">&#x27;userInfo&#x27;</span>) <span class="comment">// 从本地存储中获取用户信息</span></span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">        userInfo</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">getUserProfile</span>(<span class="params">e</span>)</span> &#123; <span class="comment">// 获取用户信息【这个事件对象可传可不传】</span></span><br><span class="line"><span class="comment">// 【注意wx.getUserProfile必须搭配点击事件才能使用】推荐使用 wx.getUserProfile 获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认</span></span><br><span class="line"><span class="comment">// 开发者妥善保管用户快速填写的头像昵称，避免重复弹窗</span></span><br><span class="line">wx.getUserProfile(&#123;</span><br><span class="line">      <span class="attr">desc</span>: <span class="string">&#x27;用于完善用户个人信息&#x27;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//   console.log(res);</span></span><br><span class="line">            <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">                <span class="attr">userInfo</span>: res.userInfo,</span><br><span class="line">                <span class="attr">hasUserInfo</span>: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">            app.userInfo = res.userInfo <span class="comment">// 考虑到很多页面会使用用户信息，添加到全局实例中</span></span><br><span class="line">            wx.setStorageSync(<span class="string">&#x27;userInfo&#x27;</span>, res.userInfo) <span class="comment">// 将用户信息保存到本地存储中</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="添加收藏到本地缓存"><a href="#添加收藏到本地缓存" class="headerlink" title="添加收藏到本地缓存"></a>添加收藏到本地缓存</h3><p>当我们到详情页点击收藏了，关于页面需要展示出来，我们可以使用小程序里的缓存，把数据存到本地缓存中，这样就可以实现多页面之间数据的共享<br>先到<code>about</code>页面，定义一个收藏电影信息的属性，考虑到每个电影有个唯一<code>id</code>，方便删除操作，这里定义为对象比较合适<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面的初始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">userInfo</span>: <span class="literal">null</span>, <span class="comment">// 存储局部用户信息</span></span><br><span class="line">    <span class="attr">favorites</span>: &#123;&#125;, <span class="comment">// 存储收藏的电影信息</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>进入<code>about.wxml</code>展示页面，直接遍历这个收藏电影对象，如果为空就显示不会收藏电影，从而显示下面暂无收藏，当有电影时得让暂无收藏消失，这时可以使用一个变量，最开始默认是没有收藏的，设置为<code>true</code>，让它显示暂无收藏【这个开关的控制阀门在哪后面再处理】<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    <span class="attr">userInfo</span>: <span class="literal">null</span>, <span class="comment">// 存储局部用户信息</span></span><br><span class="line">    <span class="attr">favorites</span>: &#123;&#125;, <span class="comment">// 存储收藏的电影信息</span></span><br><span class="line">    <span class="attr">showNoFavorite</span>: <span class="literal">true</span>, <span class="comment">// 是否显示暂无收藏</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>详情页面点击收藏有个前提条件，必须是登陆了的用户才能点击收藏，进入<code>detail.wxml</code>，找到收藏按钮，给它绑定一个事件<code>addFavorite</code>，进入<code>detail.js</code>定义这样一个方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加收藏</span></span><br><span class="line"><span class="function"><span class="title">addFavorite</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果用户没有登陆，给一个提示，让用户先登陆了才能收藏</span></span><br><span class="line">    <span class="keyword">let</span> userInfo = wx.getStorageSync(<span class="string">&#x27;userInfo&#x27;</span>)</span><br><span class="line">    <span class="comment">// 判断用户是否登陆</span></span><br><span class="line">    <span class="keyword">if</span> (!userInfo) &#123;</span><br><span class="line">        wx.showModal(&#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;请先登陆&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="comment">// 终止掉函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 已经登陆，添加电影到本地缓存，如果取不到【首次】就是空字符串，而我们favorite设计的是对象，处理一下即可</span></span><br><span class="line">    <span class="comment">// 获取本地缓存中收藏的电影</span></span><br><span class="line">    <span class="keyword">var</span> favorites = wx.getStorageSync(<span class="string">&#x27;favorites&#x27;</span>) || &#123;&#125;</span><br><span class="line">    <span class="comment">// 判断是否已收藏</span></span><br><span class="line">    <span class="keyword">if</span> (favorites[<span class="built_in">this</span>.data.filmId]) &#123;</span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;已收藏&#x27;</span>,</span><br><span class="line">          <span class="attr">image</span>: <span class="string">&#x27;/imgs/error.png&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加电影到本地缓存</span></span><br><span class="line">    favorites[<span class="built_in">this</span>.data.filmId] = <span class="built_in">this</span>.data.film</span><br><span class="line">    <span class="comment">// 存到缓存中【下方控制台Storage可以查看有没有存进去】</span></span><br><span class="line">    wx.setStorageSync(<span class="string">&#x27;favorites&#x27;</span>, favorites)</span><br><span class="line">    <span class="comment">// 收藏成功提示</span></span><br><span class="line">    wx.showToast(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;收藏成功&#x27;</span>,</span><br><span class="line">      <span class="attr">image</span>: <span class="string">&#x27;/imgs/success.png&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="展示本地缓存中收藏的电影"><a href="#展示本地缓存中收藏的电影" class="headerlink" title="展示本地缓存中收藏的电影"></a>展示本地缓存中收藏的电影</h3><blockquote><p>进入<code>about.js</code>文件中，这里考虑一个问题，是在<code>onload</code>中获取本地缓存中收藏的电影吗？<br>首先我们得知道<code>onload</code>只执行一次，这个所谓得一次会造成，当我们从首页进入关于页面这个<code>onload</code>执行了一次，但是这个时候我又回到详情页收藏了一部电影，本地缓存数据变了，再进关于页面你这个<code>onload</code>不会再执行了，那你刚刚新收藏的电影也就无法获取展示出来。<br>为了解决这个问题，我们应该使用<code>onshow</code>这个生命周期，从其它页面切换到这个页面它都会执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onShow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 从本地缓存中把收藏电影取出来</span></span><br><span class="line">    <span class="keyword">let</span> favorites = wx.getStorageSync(<span class="string">&#x27;favorites&#x27;</span>)</span><br><span class="line">    <span class="comment">// 要在页面上使用，需要放到数据仓库中</span></span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">        favorites,</span><br><span class="line">        <span class="attr">showNoFavorite</span>: <span class="built_in">Object</span>.keys(favorites) == <span class="number">0</span> <span class="comment">// 当收藏为空时显示【需要拿到最新的收藏电影来做这个判断，所以开关阀门在这里】</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p></blockquote><p>页面上展示，由于遍历<code>favorites</code>对象，需要把每个值也就是单个电影对象往<code>film-item</code>传，直接传递<code>item</code>即可<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我的收藏 start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;favorite&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;favorite-title&quot;</span>&gt;</span>我的收藏<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;favorite-list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;favorite-item&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; favorites &#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">film-item</span> <span class="attr">film</span>=<span class="string">&quot;&#123;&#123; item &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">film-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">plain</span> <span class="attr">type</span>=<span class="string">&quot;warn&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123; showNoFavorite &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;favorite-no&quot;</span>&gt;</span>~~暂无收藏~~<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 我的收藏 end --&gt;</span></span><br></pre></td></tr></table></figure></p><p>最后一个问题就是接口问题，图片不显示，由于传递给<code>film-item</code>组件，不好到组件中修改，最好存储到本地换成之前替换上图片，进入<code>detail.js</code>文件中，把下面代码加到在给<code>favorites</code>对象添加属性和属性值之前<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加电影到本地缓存</span></span><br><span class="line"><span class="comment">// 由于图片原因，不好到film-item组件中修改，所以到这里修改图片路径【detail和home接口问题，这里需要把图片给它换成有效的图片】</span></span><br><span class="line"><span class="built_in">this</span>.data.film.cover.url = <span class="built_in">this</span>.data.film.cover_url</span><br></pre></td></tr></table></figure></p><h3 id="删除收藏电影"><a href="#删除收藏电影" class="headerlink" title="删除收藏电影"></a>删除收藏电影</h3><p>进入<code>about.wxml</code>页面给删除按钮绑定事件<code>deleteFavorite</code>，但是点击对应的电影我们应该传个参数过去，这样才能对应删除哪个收藏电影，由于遍历的是对象，<code>index</code>不就是电影对象的<code>key</code>即<code>id</code>吗，<code>item</code>就是单个电影对象，传递方式采用<code>data-</code>即自定义属性，取得话直接用事件对象<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">plain</span> <span class="attr">type</span>=<span class="string">&quot;warn&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;deleteFavorite&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;&#123;&#123; index &#125;&#125;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>接着进入<code>about.js</code>，定义这个删除函数，同时传递事件对象，取出电影<code>id</code>，接着就是关于页面数据仓库的删除和本地缓存的删除<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">deleteFavorite</span>(<span class="params">e</span>)</span> &#123; <span class="comment">// 删除收藏电影</span></span><br><span class="line">    <span class="comment">// console.log(e); // 打印一下事件对象，里面有个currentTarget属性接着还有个dataset属性里面存储着id</span></span><br><span class="line">    <span class="comment">// console.log(e.currentTarget.dataset.id); // 成功打印id</span></span><br><span class="line">    <span class="keyword">let</span> id = e.currentTarget.dataset.id <span class="comment">// 获取事件触发时传递的参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先从数据仓库中删除，delete之后是要重新赋值数据仓库的，不然页面上不会改变</span></span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.data.favorites[id]</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">        <span class="attr">favorites</span>: <span class="built_in">this</span>.data.favorites,</span><br><span class="line">        <span class="attr">showNoFavorite</span>: <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.data.favorites).length == <span class="number">0</span> <span class="comment">// 注意这里是this.data.favorites，它是刚刚delete删除了的最新的收藏数据，如果长度为0说明删完了</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从本地缓存中删除</span></span><br><span class="line">    wx.setStorageSync(<span class="string">&#x27;favorites&#x27;</span>, <span class="built_in">this</span>.data.favorites) <span class="comment">// 直接用上面已经删除的faborites</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h2 id="完结✨"><a href="#完结✨" class="headerlink" title="完结✨"></a>完结✨</h2>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序项目实战(五)</title>
      <link href="/archives/8b0197f5.html"/>
      <url>/archives/8b0197f5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <p>💻Installation<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/coding327/mymovies.git</span><br></pre></td></tr></table></figure></p><h2 id="详情页"><a href="#详情页" class="headerlink" title="详情页"></a>详情页</h2><h3 id="绘制详情页"><a href="#绘制详情页" class="headerlink" title="绘制详情页"></a>绘制详情页</h3><p>在<code>pages</code>目录下新建一个文件夹为<code>detail</code>，接着在里面鼠标右键选择新建<code>Page</code>，输入<code>detail</code>回车即可，这样页面就创建好了</p><p>每项电影都是我们的<code>film-item</code>组件，点击跳转到详情页，只需要更改<code>film-item</code>组件，把最外层的<code>view</code>换成<code>navigator</code>就可以了，并添加上跳转地址<code>url=&quot;/pages/detail/detail&quot;</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最外层view标签替换为下面这个 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/detail/detail&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>为了方便观察详情页，我们去<code>app.json</code>把<code>pages</code>中的<code>detail</code>放最前面，这样应用就会直接显示详情页<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;pages/detail/detail&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/home/home&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/list/list&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/about/about&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><p>进入<code>detail.wxml</code>，把默认内容清除掉，首先放容器<code>view</code>，根据设计图，划分板块，书写布局和样式代码<br>代码比较多这里我就不做展示了，大家可以拉取代码仓库进入<code>/pages/detail</code>文件夹下查看</p><h3 id="电影详情页数据的加载"><a href="#电影详情页数据的加载" class="headerlink" title="电影详情页数据的加载"></a>电影详情页数据的加载</h3><blockquote><p>首先看下<strong>电影详情</strong>的接口地址<code>https://m.douban.com/rexxar/api/v2/movie/电影ID</code>，我们可以发现这里传参的方式并不是采用传统<code>?</code>的方式，而是写在路径里作为路径的一部分，我们叫它<code>Rest</code>风格</p></blockquote><p>回到<code>api.js</code>文件中，封装请求<code>api</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 电影详情页数据</span></span><br><span class="line"><span class="keyword">const</span> loadFilmByFilmId = <span class="function"><span class="keyword">function</span> (<span class="params">filmId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">            <span class="attr">url</span>: URLS.detailUrl + filmId,</span><br><span class="line">            <span class="attr">success</span>: resolve,</span><br><span class="line">            <span class="attr">fail</span>: reject</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.data</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(&#123;</span><br><span class="line">                <span class="attr">message</span>: res.errMsg</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意要暴露出去</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    showError,</span><br><span class="line">    loadHotFilms,</span><br><span class="line">    loadLatestFilms,</span><br><span class="line">    loadFreeFilms,</span><br><span class="line">    loadFilmByFilmId</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>进入<code>app.json</code>文件中，把首页放到最上面<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;pages/home/home&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/detail/detail&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/list/list&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/about/about&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><p>我们要传递电影的id给到详情页，进入<code>film-item.wxml</code>文件中，<code>url</code>后面拼接<code>id</code>，注意<code>film</code>里面是有个<code>id</code>的，如果你之前在控制台仔细查看过数据，是会发现有个<code>id</code>的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/detail/detail?filmId=&#123;&#123; film.id &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>接收<code>filmId</code>，同时把它保存到我们的数据仓库中，进入<code>detail.js</code>文件中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面的初始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">filmId</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 电影id</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">onLoad</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.data.filmId = options.filmId</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>导入<code>api</code>，在<code>onReady</code>中发请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> api = <span class="built_in">require</span>(<span class="string">&#x27;../../api/api&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">onReady</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        api.loadFilmByFilmId(<span class="built_in">this</span>.data.filmId).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// console.log(data); // 成功返回电影信息</span></span><br><span class="line">            <span class="comment">// 将它们保存到数据仓库中，页面上需要直接使用</span></span><br><span class="line">            <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">                <span class="attr">film</span>: data</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;).catch(api.showError)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><p>展示电影数据，进入<code>detail.wxml</code>文件中，控制台的<code>AppData</code>打开，找到数据仓库中的<code>film</code>，到其中找数据，看哪个字段合适放上去<br>【注意: 由于接口问题】演员的图片那里目前少数据，所以没更换，然后评论数据是有个单独的数据接口</p><h3 id="电影评论数据的加载"><a href="#电影评论数据的加载" class="headerlink" title="电影评论数据的加载"></a>电影评论数据的加载</h3><blockquote><p>分析这个获取评论的接口地址，我们可以发现它前面是<code>detailUrl</code>的地址【<code>rest</code>风格】但是后面又是查询字符串格式，所以我们可以直接使用<code>detailUrl</code>，没有将它单独写到统一的<code>URLS</code>中，然后后面拼接参数即可<br>进入<code>api.js</code>文件中，封装获取评论数据的接口<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 电影详情页评论数据</span></span><br><span class="line"><span class="keyword">const</span> loadCommentsByFilmId = <span class="function"><span class="keyword">function</span> (<span class="params">filmId,params=&#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">          <span class="attr">url</span>: URLS.detailUrl+filmId+<span class="string">&#x27;/interests&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>:params,</span><br><span class="line">          <span class="attr">success</span>: resolve,</span><br><span class="line">          <span class="attr">fail</span>: reject</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.data</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(&#123;</span><br><span class="line">                <span class="attr">message</span>: res.errMsg</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意要暴露出去</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    showError,</span><br><span class="line">    loadHotFilms,</span><br><span class="line">    loadLatestFilms,</span><br><span class="line">    loadFreeFilms,</span><br><span class="line">    loadFilmByFilmId,</span><br><span class="line">    loadCommentsByFilmId</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>回到<code>detail.js</code>文件中，调用接口获取数据<br>首先需要在数据仓库定义两个字段<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面的初始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">filmId</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 电影id</span></span><br><span class="line">    <span class="attr">film</span>: &#123;&#125;, <span class="comment">// 存储电影信息</span></span><br><span class="line">    <span class="attr">start</span>: <span class="number">0</span>, <span class="comment">// 评论的起始索引</span></span><br><span class="line">    <span class="attr">count</span>: <span class="number">10</span>, <span class="comment">// 评论的条数</span></span><br><span class="line">    <span class="attr">comments</span>: [], <span class="comment">// 存储电影的评论</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>接着依旧是在<code>onReady</code>中发请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">onReady</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    api.loadFilmByFilmId(<span class="built_in">this</span>.data.filmId).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(data); // 成功返回电影信息</span></span><br><span class="line">        <span class="comment">// 将它们保存到数据仓库中，页面上需要直接使用</span></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="attr">film</span>: data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(api.showError)</span><br><span class="line">    <span class="comment">// 单独加载电影的评论</span></span><br><span class="line">    api.loadCommentsByFilmId(<span class="built_in">this</span>.data.filmId, &#123;</span><br><span class="line">        <span class="attr">start</span>: <span class="built_in">this</span>.data.start,</span><br><span class="line">        <span class="attr">count</span>: <span class="built_in">this</span>.data.count,</span><br><span class="line">        <span class="attr">order_by</span>: <span class="string">&#x27;time&#x27;</span> <span class="comment">// 时间的降序，最新评论在最上面</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data); <span class="comment">// 打印下data，找到评论数据</span></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="attr">comments</span>: data.interests</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(api.showError)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>接着我们可以在<code>AppData</code>中看下我们的数据仓库中有没有评论数据<br>展示数据，进入<code>detail.wxml</code>文件中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 电影评论 start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-comment&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;comment-title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>评论：<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;comment-item&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; comments &#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;user-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; comment.user.avatar &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123; comment.user.name &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;time&quot;</span>&gt;</span>&#123;&#123; comment.create_time &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>&#123;&#123; comment.comment &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 电影评论 end --&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="上拉加载更多评论"><a href="#上拉加载更多评论" class="headerlink" title="上拉加载更多评论"></a>上拉加载更多评论</h3><blockquote><p>依旧是使用<code>onReachBottom</code>这个函数<br>在数据仓库的把总的数据条数存储起来<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面的初始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">filmId</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 电影id</span></span><br><span class="line">    <span class="attr">film</span>: &#123;&#125;, <span class="comment">// 存储电影信息</span></span><br><span class="line">    <span class="attr">start</span>: <span class="number">0</span>, <span class="comment">// 评论的起始索引</span></span><br><span class="line">    <span class="attr">count</span>: <span class="number">10</span>, <span class="comment">// 评论的条数</span></span><br><span class="line">    <span class="attr">total</span>: <span class="number">0</span>, <span class="comment">// 总的评论条数</span></span><br><span class="line">    <span class="attr">comments</span>: [], <span class="comment">// 存储电影的评论</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p></blockquote><p>同时起始索引也还要加，<code>total</code>存储起来，评论数组，要与新的评论数组合并<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">onReady</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    api.loadFilmByFilmId(<span class="built_in">this</span>.data.filmId).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(data); // 成功返回电影信息</span></span><br><span class="line">        <span class="comment">// 将它们保存到数据仓库中，页面上需要直接使用</span></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="attr">film</span>: data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(api.showError)</span><br><span class="line">    <span class="comment">// 单独加载电影的评论</span></span><br><span class="line">    api.loadCommentsByFilmId(<span class="built_in">this</span>.data.filmId, &#123;</span><br><span class="line">        <span class="attr">start</span>: <span class="built_in">this</span>.data.start,</span><br><span class="line">        <span class="attr">count</span>: <span class="built_in">this</span>.data.count,</span><br><span class="line">        <span class="attr">order_by</span>: <span class="string">&#x27;time&#x27;</span> <span class="comment">// 时间的降序，最新评论在最上面</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data); <span class="comment">// 打印下data，找到评论数据</span></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="comment">// comments: data.interests, // 评论数据</span></span><br><span class="line">            <span class="attr">comments</span>: <span class="built_in">this</span>.data.comments.concat(data.interests), <span class="comment">// 评论数组的累加</span></span><br><span class="line">            <span class="attr">start</span>: <span class="built_in">this</span>.data.start + <span class="built_in">this</span>.data.count, <span class="comment">// 起始索引每次累加</span></span><br><span class="line">            <span class="attr">total</span>: data.total <span class="comment">// 记录总条数</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(api.showError)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>判断后台有没有多的数据，让你去请求，没有就显示没有更多，在<code>onReachBottom</code>这个函数中判断<br>加载评论单独抽离成一个方法<code>loadComments</code>，因为考虑到上拉加载每次只需要加载评论即可【封装代码这里不做展示了，具体可以拉取代码查看<code>detail.js</code>文件】<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">onReachBottom</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.data.start &lt; <span class="built_in">this</span>.data.total) &#123;</span><br><span class="line">        <span class="built_in">this</span>.loadComments()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>为了考虑用户体验，发请求获取数据需要时间，显示<code>loading</code>效果，同时没有评论了，显示没有更多<br>这里我们把<code>list.wxml</code>中的<code>loading</code>和<code>nomore</code>代码给复制过来粘贴到<code>detail.wxml</code>中，同时到数据仓库中定义控制显示、隐藏的数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面的初始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">filmId</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 电影id</span></span><br><span class="line">    <span class="attr">film</span>: &#123;&#125;, <span class="comment">// 存储电影信息</span></span><br><span class="line">    <span class="attr">start</span>: <span class="number">0</span>, <span class="comment">// 评论的起始索引</span></span><br><span class="line">    <span class="attr">count</span>: <span class="number">10</span>, <span class="comment">// 评论的条数</span></span><br><span class="line">    <span class="attr">total</span>: <span class="number">0</span>, <span class="comment">// 总的评论条数</span></span><br><span class="line">    <span class="attr">comments</span>: [], <span class="comment">// 存储电影的评论</span></span><br><span class="line">    <span class="attr">showLoading</span>: <span class="literal">false</span>, <span class="comment">// loading的开关</span></span><br><span class="line">    <span class="attr">showNomore</span>: <span class="literal">false</span> <span class="comment">// 没有更多的开关</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p><code>loading</code>和<code>nomore</code>显示隐藏<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">onReachBottom</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.data.start &lt; <span class="built_in">this</span>.data.total) &#123; <span class="comment">// 有数据</span></span><br><span class="line">        <span class="comment">// 为了考虑用户体验，发请求获取数据需要时间，显示loading效果</span></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="attr">showLoading</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 注意拿到数据之后才能再让loading隐藏，但是发请求是个异步，我们需要借助promise.then，即把之前加载评论数据封装的方法里的promise对象return出来即可</span></span><br><span class="line">        <span class="built_in">this</span>.loadComments().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">                <span class="attr">showLoading</span>: <span class="literal">false</span> <span class="comment">// 拿到返回的评论数据</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 没有更多数据</span></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="attr">nomore</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>这里我们可以发现当初把<code>loading</code>和<code>nomore</code>抽离成模板的好处了，很多地方都会用到<br>最后还有一个收藏功能未实现，这里等我们把个人页【关于页】做了再来实现</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序项目实战(四)</title>
      <link href="/archives/8daac088.html"/>
      <url>/archives/8daac088.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <p>💻Installation<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/coding327/mymovies.git</span><br></pre></td></tr></table></figure></p><h2 id="上拉加载更多数据"><a href="#上拉加载更多数据" class="headerlink" title="上拉加载更多数据"></a>上拉加载更多数据</h2><p>分类页面的这个数据是有<code>total</code>的，但是目前我们只请求了12条，有的已经超过了12条，我们本来就是要看电影的只加载12条显然不合适，但是一下子请求如500条也不合适，需要考虑用户体验，加载太慢数据一直不出来，占用网络带宽，先只加载12条，用户手指下滑或上拉加载更多电影，当电影加载完，显示没有更多了</p><blockquote><p>上拉加载：<code>小程序框架/框架接口/页面Page</code>中是有一个这样的事件监听的函数的<code>onReachBottom</code>页面上拉触底事件的处理函数</p></blockquote><p>回到<code>list.js</code>文件中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">onReachBottom</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>) <span class="comment">// 这里我们可以测试一下上拉功能</span></span><br><span class="line">    <span class="comment">// 发请求获取数据由于起始索引是从0开始，但是下次加载就不能从0开始了，说明start不能写死，需要去数据仓库中定义数据，count是返回多少条数据，也可以不用写死</span></span><br><span class="line">    <span class="built_in">this</span>.loadListData() <span class="comment">// 调用加载电影数据的方法</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>上面这样调用加载数据方法还不行，需要改造<code>loadListData</code>方法</p><p>发请求获取数据由于起始索引是从0开始，但是下次加载就不能从0开始了，说明<code>start</code>不能写死，需要去数据仓库中定义数据，<code>count</code>是返回多少条数据，也可以不用写死<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面的初始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 调api的方法名</span></span><br><span class="line">    <span class="attr">films</span>: &#123;&#125;, <span class="comment">// 存放电影信息，由于有个分类名，这里设计为对象格式的数据</span></span><br><span class="line">    <span class="attr">start</span>: <span class="number">0</span>, <span class="comment">// 起始索引</span></span><br><span class="line">    <span class="attr">count</span>: <span class="number">12</span> <span class="comment">// 返回多少条数据</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>更改完，初始加载数据的那个方法也可以更改了<br>同时也出现一个问题—-&gt;当每次有人上拉时调请求数据方法，起始索引值都要比之前多12<br>解决方案：我们可以每次请求完数据，在<code>then</code>里面更改<code>start</code>值为<code>start+count</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义加载数据方法</span></span><br><span class="line"><span class="function"><span class="title">loadListData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 注意method是个变量这里要用中括号</span></span><br><span class="line">    api[<span class="built_in">this</span>.data.method](&#123;</span><br><span class="line">        <span class="attr">start</span>: <span class="built_in">this</span>.data.start,</span><br><span class="line">        <span class="attr">count</span>: <span class="built_in">this</span>.data.count</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(data) // 成功拿到数据</span></span><br><span class="line">        <span class="comment">// 定义一个films，再赋值给数据仓库中的films即可</span></span><br><span class="line">        <span class="keyword">let</span> films = &#123;</span><br><span class="line">            <span class="attr">title</span>: data.subject_collection.name,</span><br><span class="line">            <span class="attr">list</span>: data.subject_collection_items</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="comment">// films: films</span></span><br><span class="line">            <span class="comment">// 由于对象属性名与属性值的变量名相同可以简写为films</span></span><br><span class="line">            films,</span><br><span class="line">            <span class="attr">start</span>: <span class="built_in">this</span>.data.start + <span class="built_in">this</span>.data.count <span class="comment">// 起始索引增加</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(api.showError)</span><br><span class="line">    <span class="comment">// 这个写完可以测试一下，学会使用控制台的AppData，它是可以帮我们看这个数据的，如films中的title和list</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>新的问题也出现了，它总是显示新的12条，原来的数据没了<br>解决方案：之前我们使用的<code>films</code>是将每次获取的电影<code>films</code>直接赋值给数据仓库中的<code>films</code>，很显然它就一直都是新的12条，我们只需要做电影数据的<code>concat</code>累加即可<br>其中需要注意细节，初始<code>films</code>中由于没有<code>list</code>即<code>list</code>为<code>undefined</code>不能使用<code>concat</code>方法需要给它赋个<code>[]空数组</code><br>我们更改的只是<code>list</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义加载数据方法</span></span><br><span class="line"><span class="function"><span class="title">loadListData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 注意method是个变量这里要用中括号</span></span><br><span class="line">    api[<span class="built_in">this</span>.data.method](&#123;</span><br><span class="line">        <span class="attr">start</span>: <span class="built_in">this</span>.data.start,</span><br><span class="line">        <span class="attr">count</span>: <span class="built_in">this</span>.data.count</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(data) // 成功拿到数据</span></span><br><span class="line">        <span class="comment">// 初始films中没有list，即list为undefined不能使用concat方法需要给它赋个[]空数组</span></span><br><span class="line">        <span class="keyword">let</span> list = <span class="built_in">this</span>.data.films.list || []</span><br><span class="line">        <span class="comment">// 定义一个films，再赋值给数据仓库中的films即可</span></span><br><span class="line">        <span class="keyword">let</span> films = &#123;</span><br><span class="line">            <span class="attr">title</span>: data.subject_collection.name,</span><br><span class="line">            <span class="comment">// list: data.subject_collection_items</span></span><br><span class="line">            <span class="attr">list</span>: list.concat(data.subject_collection_items) <span class="comment">// 上拉加载时数据累加</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="comment">// films: films</span></span><br><span class="line">            <span class="comment">// 由于对象属性名与属性值的变量名相同可以简写为films</span></span><br><span class="line">            films,</span><br><span class="line">            <span class="attr">start</span>: <span class="built_in">this</span>.data.start + <span class="built_in">this</span>.data.count <span class="comment">// 起始索引增加</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(api.showError)</span><br><span class="line">    <span class="comment">// 这个写完可以测试一下，学会使用控制台的AppData，它是可以帮我们看这个数据的，如films中的title和list</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>我们可以在控制台<code>Network</code>的<code>XHR</code>中查看<code>Name</code>注意往上面拉一下有些在下方挡住了，会有个<code>Name</code>，我们可以点击，右边还会出现<code>Headers</code>、<code>Preview</code>和<code>Reponse</code>等信息</p><h2 id="上拉加载细节优化"><a href="#上拉加载细节优化" class="headerlink" title="上拉加载细节优化"></a>上拉加载细节优化</h2><blockquote><p>优化一<br>模拟加载的延迟，当用户上拉时，如果说数据请求很长时间才请求到，那么用户是能明显感觉得到没有这种上拉的效果在里面，为了用户体验感的做优化处理<br>如何模拟？<br>和之前一样使用延时器发请求加载数据即可—-&gt;调那个<code>loadListData</code>方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">onReachBottom</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loadListData()</span><br><span class="line">    &#125;, <span class="number">3000</span>) <span class="comment">// 模拟加载延迟，调用加载电影数据的方法</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p></blockquote><p>怎么优化呢？<br>之前我们就写过加载动画(<code>loading</code>)的模板了，这里我们也给它加上这个，进入<code>list.wxml</code>文件中，最下方加上如下代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 显示loading正在加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">src</span>=<span class="string">&quot;/templates/loading/loading&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>但是这里注意一个问题，这个<code>loading</code>其实一直都在，我们还需要处理什么时候<code>loading</code>不需要了—-&gt;数据加载完【有数据了，成功拿到数据了】<br>开关法—-&gt;使用一个布尔值即可，在<code>list.js</code>数据仓库中定义一个<code>showLoading</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面的初始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 调api的方法名</span></span><br><span class="line">    <span class="attr">films</span>: &#123;&#125;, <span class="comment">// 存放电影信息，由于有个分类名，这里设计为对象格式的数据</span></span><br><span class="line">    <span class="attr">start</span>: <span class="number">0</span>, <span class="comment">// 起始索引</span></span><br><span class="line">    <span class="attr">count</span>: <span class="number">12</span>, <span class="comment">// 返回多少条数据</span></span><br><span class="line">    <span class="attr">showLoading</span>: <span class="literal">false</span> <span class="comment">// 是否显示loading，只有上拉加载数据还未响应时需要显示loading---&gt;所以设置为false</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>回到<code>list.wxml</code>中，添加判断是否显示<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 显示loading正在加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123; showLoading &#125;&#125;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/templates/loading/loading&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>上拉时还需要显示<code>loading</code>，同时拿到数据让<code>loading</code>隐藏<br>【注意发请求拿数据，调用<code>api</code>是异步，能直接在下面更改布尔值？】<br>很显然不能，解决方案<br>我们的<code>api</code>是基于<code>promise</code>封装的，不管是<code>.then</code>还是<code>.catch</code>，它们最终得到的还是<code>promise</code>对象，我们只需要在<code>loadListData</code>函数中把那个<code>promise</code>对象给return出去即可，接着进行<code>.then</code>操作<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义加载数据方法</span></span><br><span class="line"><span class="function"><span class="title">loadListData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 注意method是个变量这里要用中括号</span></span><br><span class="line">    <span class="comment">// 返回Promise对象，便于继续执行</span></span><br><span class="line">    <span class="keyword">return</span> api[<span class="built_in">this</span>.data.method](&#123;</span><br><span class="line">        <span class="attr">start</span>: <span class="built_in">this</span>.data.start,</span><br><span class="line">        <span class="attr">count</span>: <span class="built_in">this</span>.data.count</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(data) // 成功拿到数据</span></span><br><span class="line">        <span class="comment">// 初始films中没有list，即list为undefined不能使用concat方法需要给它赋个[]空数组</span></span><br><span class="line">        <span class="keyword">let</span> list = <span class="built_in">this</span>.data.films.list || []</span><br><span class="line">        <span class="comment">// 定义一个films，再赋值给数据仓库中的films即可</span></span><br><span class="line">        <span class="keyword">let</span> films = &#123;</span><br><span class="line">            <span class="attr">title</span>: data.subject_collection.name,</span><br><span class="line">            <span class="comment">// list: data.subject_collection_items</span></span><br><span class="line">            <span class="attr">list</span>: list.concat(data.subject_collection_items) <span class="comment">// 上拉加载时数据累加</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="comment">// films: films</span></span><br><span class="line">            <span class="comment">// 由于对象属性名与属性值的变量名相同可以简写为films</span></span><br><span class="line">            films,</span><br><span class="line">            <span class="attr">start</span>: <span class="built_in">this</span>.data.start + <span class="built_in">this</span>.data.count <span class="comment">// 起始索引增加</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(api.showError)</span><br><span class="line">    <span class="comment">// 这个写完可以测试一下，学会使用控制台的AppData，它是可以帮我们看这个数据的，如films中的title和list</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">onReachBottom</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(123) // 这里我们可以测试一下上拉功能</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上拉时先让loading显示</span></span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">        <span class="attr">showLoading</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发请求获取数据由于起始索引是从0开始，但是下次加载就不能从0开始了，说明start不能写死，需要去数据仓库中定义数据，count是返回多少条数据，也可以不用写死</span></span><br><span class="line">    <span class="comment">// this.loadListData() // 调用加载电影数据的方法</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 这里的.then一定别忘了上面要loadListData要加上return</span></span><br><span class="line">        <span class="built_in">this</span>.loadListData().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 加载完数据隐藏loading</span></span><br><span class="line">            <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">                <span class="attr">showLoading</span>: <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, <span class="number">3000</span>) <span class="comment">// 模拟加载延迟，调用加载电影数据的方法</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>测试阶段，点击<code>AppData</code>，在运行的页面上进行上拉操作，查看<code>list</code>页面的<code>showLoading</code>值的变化<br><code>false---&gt;true---&gt;false</code></p><blockquote><p>优化二<br>如果后台没数据给你返回了，那么就没必要再发无意义的请求，依旧是在上拉加载中处理<br>【问题】怎么判断还有数据？<br>这时候<code>total</code>就发挥作用了，后台返回数据中一般对于<code>list</code>这种它都会给我们返回<code>total</code>这么一个字段的，通过它能告诉我们还有多少条数据可以取，同时在数据仓库中定义一个<code>total</code>，把响应数据里的<code>total</code>给它存起来<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面的初始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 调api的方法名</span></span><br><span class="line">    <span class="attr">films</span>: &#123;&#125;, <span class="comment">// 存放电影信息，由于有个分类名，这里设计为对象格式的数据</span></span><br><span class="line">    <span class="attr">start</span>: <span class="number">0</span>, <span class="comment">// 起始索引</span></span><br><span class="line">    <span class="attr">count</span>: <span class="number">12</span>, <span class="comment">// 返回多少条数据</span></span><br><span class="line">    <span class="attr">total</span>: <span class="number">0</span>, <span class="comment">// 后台数据库中电影总条数</span></span><br><span class="line">    <span class="attr">showLoading</span>: <span class="literal">false</span> <span class="comment">// 是否显示loading，只有上拉加载数据还未响应时需要显示loading---&gt;所以设置为false</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p></blockquote><p>发完请求还需要赋值<code>total</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.setData(&#123;</span><br><span class="line">    <span class="comment">// films: films</span></span><br><span class="line">    <span class="comment">// 由于对象属性名与属性值的变量名相同可以简写为films</span></span><br><span class="line">    films,</span><br><span class="line">    <span class="attr">start</span>: <span class="built_in">this</span>.data.start + <span class="built_in">this</span>.data.count, <span class="comment">// 起始索引增加</span></span><br><span class="line">    <span class="attr">total</span>: data.total <span class="comment">// 后台数据库中电影总条数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>上拉只有在后台数据库中还有数据才发请求调用加载数据的方法，如何判断还有数据？<br>通过<code>start &lt; total</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">onReachBottom</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(123) // 这里我们可以测试一下上拉功能</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否还有更多数据，如果有就显示loading再加载数据；没有最好显示没有更多数据</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.data.start &lt; <span class="built_in">this</span>.data.total) &#123;</span><br><span class="line">        <span class="comment">// 上拉时先让loading显示</span></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="attr">showLoading</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 发请求获取数据由于起始索引是从0开始，但是下次加载就不能从0开始了，说明start不能写死，需要去数据仓库中定义数据，count是返回多少条数据，也可以不用写死</span></span><br><span class="line">        <span class="comment">// this.loadListData() // 调用加载电影数据的方法</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 这里的.then一定别忘了上面要loadListData要加上return</span></span><br><span class="line">            <span class="built_in">this</span>.loadListData().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 加载完数据隐藏loading</span></span><br><span class="line">                <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">                    <span class="attr">showLoading</span>: <span class="literal">false</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="number">3000</span>) <span class="comment">// 模拟加载延迟，调用加载电影数据的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>当后台数据库中没有数据时需要显示没有更多数据，考虑到在很多页面中也会用到，所以把它封装为一个模板，单独定义没有更多的这样一个模板<br>在<code>templates</code>目录下新建<code>nomore</code>文件夹，接着在该文件夹下新建文件<code>nomore.wxml</code>和<code>nomore.wxss</code><br><code>nomore.wxml</code>代码如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;nomore&quot;</span>&gt;</span>~~没有更多了~~<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>nomore.wxss</code>代码如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nomore</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">28</span>rpx;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">30</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>前面之前说到过了，模板的样式文件需要做全局导入(加载)样式文件<br>进入<code>app.wxss</code>文件中，完整代码如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 全局导入loading */</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;/templates/loading/loading.wxss&quot;</span>;</span><br><span class="line"><span class="comment">/* 全局导入nomore */</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;/templates/nomore/nomore.wxss&quot;</span>;</span><br><span class="line"></span><br><span class="line">page &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回到<code>list.wxml</code>页面中最后面加上这个<code>nomore</code>模板，没有更多数据时需要让其生效，需要一个布尔值来控制其显示隐藏<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 显示nomore没有更多数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123; showNomore &#125;&#125;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/templates/nomore/nomore&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>同时回到<code>list.js</code>中，到数据仓库中添加<code>showNomore</code>，值默认为<code>false</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面的初始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 调api的方法名</span></span><br><span class="line">    <span class="attr">films</span>: &#123;&#125;, <span class="comment">// 存放电影信息，由于有个分类名，这里设计为对象格式的数据</span></span><br><span class="line">    <span class="attr">start</span>: <span class="number">0</span>, <span class="comment">// 起始索引</span></span><br><span class="line">    <span class="attr">count</span>: <span class="number">12</span>, <span class="comment">// 返回多少条数据</span></span><br><span class="line">    <span class="attr">total</span>: <span class="number">0</span>, <span class="comment">// 后台数据库中电影总条数</span></span><br><span class="line">    <span class="attr">showLoading</span>: <span class="literal">false</span>, <span class="comment">// 是否显示loading，只有上拉加载数据还未响应时需要显示loading---&gt;所以设置为false</span></span><br><span class="line">    <span class="attr">showNomore</span>: <span class="literal">false</span> <span class="comment">// 是否显示nomore</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>什么时候改为<code>true</code>，当没有数据的时候，也就是<code>else</code>，改为<code>true</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">onReachBottom</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(123) // 这里我们可以测试一下上拉功能</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否还有更多数据，如果有就显示loading再加载数据；没有最好显示没有更多数据</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.data.start &lt; <span class="built_in">this</span>.data.total) &#123; <span class="comment">// 还有更多数据</span></span><br><span class="line">        <span class="comment">// 上拉时先让loading显示</span></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="attr">showLoading</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 发请求获取数据由于起始索引是从0开始，但是下次加载就不能从0开始了，说明start不能写死，需要去数据仓库中定义数据，count是返回多少条数据，也可以不用写死</span></span><br><span class="line">        <span class="comment">// this.loadListData() // 调用加载电影数据的方法</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 这里的.then一定别忘了上面要loadListData要加上return</span></span><br><span class="line">            <span class="built_in">this</span>.loadListData().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 加载完数据隐藏loading</span></span><br><span class="line">                <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">                    <span class="attr">showLoading</span>: <span class="literal">false</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="number">3000</span>) <span class="comment">// 模拟加载延迟，调用加载电影数据的方法</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 没有更多数据，显示nomore</span></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="attr">showNomore</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h2 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h2><p>和上拉加载一样也有一个监听下拉刷新的事件处理函数即<code>onPullDownRefresh</code>，首先需要在<code>list.json</code>中启用它<br>【注意】但是有个问题它的效果不是很明显，需要给它加样式，<code>backgroundColor</code>是下拉的那个背景色，<code>backgroundTextStyle</code>是三个点点点的样式，只有<code>dark</code>和<code>light</code>可选<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;usingComponents&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;backgroundColor&quot;</span>: <span class="string">&quot;#efefef&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;backgroundTextStyle&quot;</span>: <span class="string">&quot;dark&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面这些设置只是效果上的，忽悠人的，下拉刷新我们还需要使用那个函数重新加载新的数据，回到<code>list.js</code>文件中，使用<code>onPullDownRefresh</code>函数<br>怎么重新加载新的数据？<br>把值都恢复默认就行了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">onPullDownRefresh</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 重新加载数据即把值都恢复默认就行了</span></span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">        <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">films</span>: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.loadListData()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>测试，我们可以在调试器中的<code>Network</code>中观察这个<code>start</code>是不是变成0了</p><p><code>list.js</code>完整代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/list/list.js</span></span><br><span class="line"><span class="comment">// 导入api模块</span></span><br><span class="line"><span class="keyword">const</span> api = <span class="built_in">require</span>(<span class="string">&#x27;../../api/api.js&#x27;</span>)</span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面的初始数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 调api的方法名</span></span><br><span class="line">        <span class="attr">films</span>: &#123;&#125;, <span class="comment">// 存放电影信息，由于有个分类名，这里设计为对象格式的数据</span></span><br><span class="line">        <span class="attr">start</span>: <span class="number">0</span>, <span class="comment">// 起始索引</span></span><br><span class="line">        <span class="attr">count</span>: <span class="number">12</span>, <span class="comment">// 返回多少条数据</span></span><br><span class="line">        <span class="attr">total</span>: <span class="number">0</span>, <span class="comment">// 后台数据库中电影总条数</span></span><br><span class="line">        <span class="attr">showLoading</span>: <span class="literal">false</span>, <span class="comment">// 是否显示loading，只有上拉加载数据还未响应时需要显示loading---&gt;所以设置为false</span></span><br><span class="line">        <span class="attr">showNomore</span>: <span class="literal">false</span> <span class="comment">// 是否显示nomore</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log(options); // 成功拿到method</span></span><br><span class="line">        <span class="comment">// 放到数据仓库中</span></span><br><span class="line">        <span class="built_in">this</span>.data.method = options.method</span><br><span class="line">        <span class="comment">// 这里赋值为何不采用setData呢？</span></span><br><span class="line">        <span class="comment">// this.setData是可以实现数据的响应式，只要页面用到的地方都能及时的更新，但是method的值我们只需要固定的，并且不需要在页面上展示，所以这里两个方法都可以</span></span><br><span class="line">        <span class="comment">// this.setData(&#123;</span></span><br><span class="line">        <span class="comment">//     method: options.method</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        <span class="built_in">this</span>.loadListData()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 定义加载数据方法</span></span><br><span class="line">    <span class="function"><span class="title">loadListData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 注意method是个变量这里要用中括号</span></span><br><span class="line">        <span class="comment">// 返回Promise对象，便于继续执行</span></span><br><span class="line">        <span class="keyword">return</span> api[<span class="built_in">this</span>.data.method](&#123;</span><br><span class="line">            <span class="attr">start</span>: <span class="built_in">this</span>.data.start,</span><br><span class="line">            <span class="attr">count</span>: <span class="built_in">this</span>.data.count</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// console.log(data) // 成功拿到数据</span></span><br><span class="line">            <span class="comment">// 初始films中没有list，即list为undefined不能使用concat方法需要给它赋个[]空数组</span></span><br><span class="line">            <span class="keyword">let</span> list = <span class="built_in">this</span>.data.films.list || []</span><br><span class="line">            <span class="comment">// 定义一个films，再赋值给数据仓库中的films即可</span></span><br><span class="line">            <span class="keyword">let</span> films = &#123;</span><br><span class="line">                <span class="attr">title</span>: data.subject_collection.name,</span><br><span class="line">                <span class="comment">// list: data.subject_collection_items</span></span><br><span class="line">                <span class="attr">list</span>: list.concat(data.subject_collection_items) <span class="comment">// 上拉加载时数据累加</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">                <span class="comment">// films: films</span></span><br><span class="line">                <span class="comment">// 由于对象属性名与属性值的变量名相同可以简写为films</span></span><br><span class="line">                films,</span><br><span class="line">                <span class="attr">start</span>: <span class="built_in">this</span>.data.start + <span class="built_in">this</span>.data.count, <span class="comment">// 起始索引增加</span></span><br><span class="line">                <span class="attr">total</span>: data.total <span class="comment">// 后台数据库中电影总条数</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;).catch(api.showError)</span><br><span class="line">        <span class="comment">// 这个写完可以测试一下，学会使用控制台的AppData，它是可以帮我们看这个数据的，如films中的title和list</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onReady</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onShow</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面隐藏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onHide</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面卸载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onUnload</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onPullDownRefresh</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 重新加载数据即把值都恢复默认就行了</span></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">films</span>: &#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">this</span>.loadListData()</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onReachBottom</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log(123) // 这里我们可以测试一下上拉功能</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否还有更多数据，如果有就显示loading再加载数据；没有最好显示没有更多数据</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.data.start &lt; <span class="built_in">this</span>.data.total) &#123; <span class="comment">// 还有更多数据</span></span><br><span class="line">            <span class="comment">// 上拉时先让loading显示</span></span><br><span class="line">            <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">                <span class="attr">showLoading</span>: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 发请求获取数据由于起始索引是从0开始，但是下次加载就不能从0开始了，说明start不能写死，需要去数据仓库中定义数据，count是返回多少条数据，也可以不用写死</span></span><br><span class="line">            <span class="comment">// this.loadListData() // 调用加载电影数据的方法</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 这里的.then一定别忘了上面要loadListData要加上return</span></span><br><span class="line">                <span class="built_in">this</span>.loadListData().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// 加载完数据隐藏loading</span></span><br><span class="line">                    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">                        <span class="attr">showLoading</span>: <span class="literal">false</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;, <span class="number">3000</span>) <span class="comment">// 模拟加载延迟，调用加载电影数据的方法</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 没有更多数据，显示nomore</span></span><br><span class="line">            <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">                <span class="attr">showNomore</span>: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户点击右上角分享</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onShareAppMessage</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序项目实战(三)</title>
      <link href="/archives/77e92f87.html"/>
      <url>/archives/77e92f87.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <p>💻Installation<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/coding327/mymovies.git</span><br></pre></td></tr></table></figure></p><h2 id="分类页数据对接"><a href="#分类页数据对接" class="headerlink" title="分类页数据对接"></a>分类页数据对接</h2><blockquote><p>首页是已经传递数据了，但是咱们分类页数据还没传递<br>点击更多，有三个分类，影院热映或者近期热门或者免费在线，那怎么知道向哪个接口发请求？</p></blockquote><p>解决思路：每个分类里的更多都是由调用请求api里的方法得到的，我们可以往<code>res.data</code>里面添加<code>method</code>属性，告诉我是由哪个<code>api</code>方法请求的数据<br><code>api.js</code>文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.data.method = <span class="string">&#x27;loadHotFilms&#x27;</span></span><br><span class="line"><span class="keyword">return</span> res.data</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.data.method = <span class="string">&#x27;loadLatestFilms&#x27;</span></span><br><span class="line"><span class="keyword">return</span> res.data</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.data.method = <span class="string">&#x27;loadFreeFilms&#x27;</span></span><br><span class="line"><span class="keyword">return</span> res.data</span><br></pre></td></tr></table></figure><p>进入<code>home.js</code>文件中，我们需要把请求时这个<code>method</code>保存到<code>home</code>页面组件的<code>data</code>中，再通过首页进入分类页把数据传递过去即可<br>加载主页数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> type = &#123;</span><br><span class="line">    <span class="attr">title</span>: data.subject_collection.name,</span><br><span class="line">    <span class="attr">list</span>: data.subject_collection_items,</span><br><span class="line">    <span class="comment">// 都要加上下面这个</span></span><br><span class="line">    <span class="attr">method</span>: data.method</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>加载近期热门数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> type = &#123;</span><br><span class="line">    <span class="attr">title</span>: data.subject_collection.name,</span><br><span class="line">    <span class="attr">list</span>: data.subject_collection_items,</span><br><span class="line">    <span class="comment">// 都要加上下面这个</span></span><br><span class="line">    <span class="attr">method</span>: data.method</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>加载免费在线数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> type = &#123;</span><br><span class="line">    <span class="attr">title</span>: data.subject_collection.name,</span><br><span class="line">    <span class="attr">list</span>: data.subject_collection_items,</span><br><span class="line">    <span class="comment">// 都要加上下面这个</span></span><br><span class="line">    <span class="attr">method</span>: data.method</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>home.wxml</code>传递数据过去，导航跳转（路由跳转传参，注意它是个变量，咱们加上<code>&#123;&#123;&#125;&#125;</code>）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/list/list?method=&#123;&#123; item.method &#125;&#125;&quot;</span>&gt;</span>更多 &gt;<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>验证数据是否成功传递过来，进入<code>list.js</code>文件，接收参数都是用<code>onLoad</code>做有个<code>options</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(options); <span class="comment">// 成功拿到</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>放到数据仓库中【<code>data</code>】<br>定义初始数据，并给初始数据赋值</p><blockquote><p>【注意】放到数据仓库中，这里赋值为何不采用<code>setData</code>呢？<br>解答：<code>this.setData</code>是可以实现数据的响应式，只要页面用到的地方都能及时的更新，但是<code>method</code>的值我们只需要固定的，并且不需要在页面上展示，所以这里两个方法都可以<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面的初始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 调api的方法名</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(options); <span class="comment">// 成功拿到method</span></span><br><span class="line">    <span class="comment">// 放到数据仓库中</span></span><br><span class="line">    <span class="built_in">this</span>.data.method = options.method</span><br><span class="line">    <span class="comment">// 这里赋值为何不采用setData呢？</span></span><br><span class="line">    <span class="comment">// this.setData是可以实现数据的响应式，只要页面用到的地方都能及时的更新，但是method的值我们只需要固定的，并且不需要在页面上展示，所以这里两个方法都可以</span></span><br><span class="line">    <span class="comment">// this.setData(&#123;</span></span><br><span class="line">    <span class="comment">//     method: options.method</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p></blockquote><p>定义加载数据的方法，导入<code>api</code>模块<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入api模块</span></span><br><span class="line"><span class="keyword">const</span> api = <span class="built_in">require</span>(<span class="string">&#x27;../../api/api.js&#x27;</span>)</span><br><span class="line">---</span><br><span class="line">    <span class="comment">// 定义加载数据方法</span></span><br><span class="line">    <span class="function"><span class="title">loadListData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 注意method是个变量这里要用中括号</span></span><br><span class="line">        api[<span class="built_in">this</span>.data.method](&#123;</span><br><span class="line">            <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">count</span>: <span class="number">12</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data) <span class="comment">// 成功拿到数据</span></span><br><span class="line">        &#125;).catch(api.showError)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><p>拿到数据后我们需要存放到数据仓库中，同时它还有个分类在里面，这里涉及数据为对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面的初始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 调api的方法名</span></span><br><span class="line">    <span class="attr">films</span>: &#123;&#125; <span class="comment">// 存放电影信息，由于有个分类名，这里设计为对象格式的数据</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>接着处理数据，赋值给<code>films</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义加载数据方法</span></span><br><span class="line"><span class="function"><span class="title">loadListData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 注意method是个变量这里要用中括号</span></span><br><span class="line">    api[<span class="built_in">this</span>.data.method](&#123;</span><br><span class="line">        <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">count</span>: <span class="number">12</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data) <span class="comment">// 成功拿到数据</span></span><br><span class="line">        <span class="comment">// 定义一个films，再赋值给数据仓库中的films即可</span></span><br><span class="line">        <span class="keyword">let</span> films = &#123;</span><br><span class="line">            <span class="attr">title</span>: data.subject_collection.name,</span><br><span class="line">            <span class="attr">list</span>: data.subject_collection_items</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="comment">// films: films</span></span><br><span class="line">            <span class="comment">// 由于对象属性名与属性值的变量名相同可以简写为films</span></span><br><span class="line">            films</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(api.showError)</span><br><span class="line">    <span class="comment">// 这个写完可以测试一下，学会使用控制台的AppData，它是可以帮我们看这个数据的，如films中的title和list</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><blockquote><p>这个写完可以测试一下，学会使用控制台的<code>AppData</code>，它是可以帮我们看这个数据的，如<code>films</code>中的<code>title</code>和<code>list</code></p></blockquote><p><code>list.js</code>代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/list/list.js</span></span><br><span class="line"><span class="comment">// 导入api模块</span></span><br><span class="line"><span class="keyword">const</span> api = <span class="built_in">require</span>(<span class="string">&#x27;../../api/api.js&#x27;</span>)</span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面的初始数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 调api的方法名</span></span><br><span class="line">        <span class="attr">films</span>: &#123;&#125; <span class="comment">// 存放电影信息，由于有个分类名，这里设计为对象格式的数据</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(options); <span class="comment">// 成功拿到method</span></span><br><span class="line">        <span class="comment">// 放到数据仓库中</span></span><br><span class="line">        <span class="built_in">this</span>.data.method = options.method</span><br><span class="line">        <span class="comment">// 这里赋值为何不采用setData呢？</span></span><br><span class="line">        <span class="comment">// this.setData是可以实现数据的响应式，只要页面用到的地方都能及时的更新，但是method的值我们只需要固定的，并且不需要在页面上展示，所以这里两个方法都可以</span></span><br><span class="line">        <span class="comment">// this.setData(&#123;</span></span><br><span class="line">        <span class="comment">//     method: options.method</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        <span class="built_in">this</span>.loadListData()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 定义加载数据方法</span></span><br><span class="line">    <span class="function"><span class="title">loadListData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 注意method是个变量这里要用中括号</span></span><br><span class="line">        api[<span class="built_in">this</span>.data.method](&#123;</span><br><span class="line">            <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">count</span>: <span class="number">12</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data) <span class="comment">// 成功拿到数据</span></span><br><span class="line">            <span class="comment">// 定义一个films，再赋值给数据仓库中的films即可</span></span><br><span class="line">            <span class="keyword">let</span> films = &#123;</span><br><span class="line">                <span class="attr">title</span>: data.subject_collection.name,</span><br><span class="line">                <span class="attr">list</span>: data.subject_collection_items</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">                <span class="comment">// films: films</span></span><br><span class="line">                <span class="comment">// 由于对象属性名与属性值的变量名相同可以简写为films</span></span><br><span class="line">                films</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;).catch(api.showError)</span><br><span class="line">        <span class="comment">// 这个写完可以测试一下，学会使用控制台的AppData，它是可以帮我们看这个数据的，如films中的title和list</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onReady</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onShow</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面隐藏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onHide</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面卸载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onUnload</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onPullDownRefresh</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onReachBottom</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户点击右上角分享</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onShareAppMessage</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>展示数据如分类、电影，进入<code>list.js</code>文件中<br><code>list.js</code>代码如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--pages/list/list.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;list-type&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;type-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;text&gt;近期热门电影&lt;/text&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 替换为数据仓库中的数据 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123; films.title &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-list&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;film-item class=&quot;film-item&quot; wx:for=&quot;&#123;&#123; 12 &#125;&#125;&quot; wx:key=&quot;index&quot;&gt;&lt;/film-item&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 替换为数据仓库中的数据，同时film-item组件还需要传递值过去，item即为电影列表中的每一项 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">film-item</span> <span class="attr">class</span>=<span class="string">&quot;film-item&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; films.list &#125;&#125;&quot;</span> <span class="attr">film</span>=<span class="string">&quot;&#123;&#123; item &#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">film-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序项目实战(二)</title>
      <link href="/archives/91a0fac.html"/>
      <url>/archives/91a0fac.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <p>💻Installation<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/coding327/mymovies.git</span><br></pre></td></tr></table></figure></p><h2 id="首页数据对接"><a href="#首页数据对接" class="headerlink" title="首页数据对接"></a>首页数据对接</h2><p><code>app.json</code>里的<code>pages</code>的<code>home</code>提到最上面，默认显示<code>home</code>页面</p><h3 id="导航功能完善，点击更多跳转分类页"><a href="#导航功能完善，点击更多跳转分类页" class="headerlink" title="导航功能完善，点击更多跳转分类页"></a>导航功能完善，点击更多跳转分类页</h3><p>添加<code>url</code>指定路径即可<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/list/list&quot;</span>&gt;</span>更多 &gt;<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="数据如何对接，具体操作"><a href="#数据如何对接，具体操作" class="headerlink" title="数据如何对接，具体操作"></a>数据如何对接，具体操作</h3><ol><li><p>首页一加载，发请求获取数据渲染，在<code>home.js</code>文件里操作<br>这个在哪里做，其实在<code>onLoad</code>和<code>onReady</code>都可以，<code>onLoad</code>有个<code>options</code>一般传递参数用<br>我们选择在<code>onReady</code>中做请求数据</p></li><li><p>请求都直接写在<code>onReady</code>中会很乱，于是三个不同分类最好封装成不同方法，在<code>onReady</code>中调用即可</p></li></ol><blockquote><p>这里我们接口是需要做合法域名配置的</p><h3 id="后端接口合法域名配置"><a href="#后端接口合法域名配置" class="headerlink" title="后端接口合法域名配置"></a>后端接口合法域名配置</h3><ul><li>首先去微信小程序直接百度搜索点击小程序登录进去，找到开发管理，横排第三个吧有个开发设置，找到服务器域名咱们把接口上的域名填上去即可</li><li>回到编辑器右上角有个详情点击进去，再点击项目配置，刷新几次，直到域名信息<code>request</code>合法域名出现刚刚咱们配置的域名即可</li><li>如果你不配也可以在详情本地设置里面找到不校验合法域名、<code>web-view</code>(业务域名)。。。打上勾，这样也可以</li></ul></blockquote><p>做完上面这些，就可以书写请求接口，然后调接口了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    <span class="comment">// 一个分类对应一个对象</span></span><br><span class="line">    <span class="comment">// type: &#123;</span></span><br><span class="line">    <span class="comment">//     title: &#x27;&#x27;,</span></span><br><span class="line">    <span class="comment">//     list: []</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 既然分类有多个，那直接用数组即可</span></span><br><span class="line">    <span class="attr">types</span>: [] <span class="comment">// 存储所有的分类</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">onReady</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.loadHotFilms()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">loadHotFilms</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://m.douban.com/rexxar/api/v2/subject_collection/movie_showing/items&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">          <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">count</span>: <span class="number">6</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//   console.log(res)</span></span><br><span class="line">        <span class="comment">// 每一个分类作为一个对象</span></span><br><span class="line">        <span class="keyword">let</span> type = &#123;</span><br><span class="line">            <span class="attr">title</span>: res.data.subject_collection.name,</span><br><span class="line">            <span class="attr">list</span>: res.data.subject_collection_items</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意是个对象里面再数组，不好用push</span></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="string">&#x27;types[0]&#x27;</span>: type</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>我们可以在控制台<code>AppData</code>中查看数据</p><h3 id="这里注意一个问题this指向"><a href="#这里注意一个问题this指向" class="headerlink" title="这里注意一个问题this指向"></a>这里注意一个问题this指向</h3><blockquote><p><code>success</code>要用箭头函数，不能使用匿名函数，不然拿不到数据，主要是<code>this</code>指向问题，因为箭头函数没有自己<code>this</code>，它依赖于父作用域中的<code>this</code>，而父作用域的<code>this</code>就是当前页面实例，这样就可以修改数据，这个实例才有<code>data</code>以及其中的<code>types</code></p></blockquote><h3 id="数据展示"><a href="#数据展示" class="headerlink" title="数据展示"></a>数据展示</h3><blockquote><p>把原先得数据换成请求到得数据<br>公共组件<code>film-item</code>需要传递数据，父组件往子组件传递数据，进入<code>film-item.js</code>文件里，找到<code>properties</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">properties: &#123;</span><br><span class="line">    <span class="attr">film</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="built_in">Object</span>,</span><br><span class="line">        <span class="attr">value</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>film-item.js</code>代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">    &lt;!-- 使用传递过来数据 --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;film-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; film.cover.url &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-name&quot;</span>&gt;</span>&#123;&#123; film.title &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-star&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 星级评分展示处理，十分制，8&lt;8.2图片亮的给4个 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;star-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; (index+1)*2 &lt;= film.rating.value ? &#x27;/imgs/star-open.png&#x27; : &#x27;/imgs/star-close.png&#x27; &#125;&#125;&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; 5 &#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;film-source&quot;</span>&gt;</span>&#123;&#123; film.rating.value &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><blockquote><p>上面三目运算比较长，使用<code>wxs</code>处理一下<br>在项目根目录下按照<code>utils/tools.wxs</code>这个层级创建文件夹和文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数对评分进行处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数1星星的序号</span></span><br><span class="line"><span class="comment">// 参数2评分</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">starImg</span>(<span class="params">index, source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (index+<span class="number">1</span>)*<span class="number">2</span> &lt;= source ? <span class="string">&#x27;/imgs/star-open.png&#x27;</span> : <span class="string">&#x27;/imgs/star-close.png&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 注意这里不能简写</span></span><br><span class="line">    <span class="attr">starImg</span>: starImg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入到<code>film-item.wxml</code>文件里，使用<code>wxs</code>标签<br>写在最下面写即可<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模块名叫tools，随便取 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">src</span>=<span class="string">&quot;../../utils/tools.wxs&quot;</span> <span class="attr">module</span>=<span class="string">&quot;tools&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>调用方法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 星级评分展示处理，十分制，8&lt;8.2图片亮的给4个 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;star-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; tools.starImg(index,film.rating.value) &#125;&#125;&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; 5 &#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;film-source&quot;</span>&gt;</span>&#123;&#123; film.rating.value &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="API请求的模块化处理"><a href="#API请求的模块化处理" class="headerlink" title="API请求的模块化处理"></a><code>API</code>请求的模块化处理</h3><blockquote><p>优化：将所有向后台<code>api</code>发送请求都放在一个<code>api</code>文件夹中，方便管理<br>项目根目录新建一个文件夹为<code>api</code>再创建<code>api.js</code>文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API请求的模块化处理</span></span><br><span class="line"><span class="comment"> * 将项目中的所有请求都进行统一的管理</span></span><br><span class="line"><span class="comment"> * */</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一定义接口地址</span></span><br><span class="line"><span class="keyword">const</span> URLS = &#123;</span><br><span class="line">    <span class="attr">hotUrl</span>: <span class="string">&#x27;https://m.douban.com/rexxar/api/v2/subject_collection/movie_showing/items&#x27;</span>,</span><br><span class="line">    <span class="attr">latestUrl</span>: <span class="string">&#x27;https://m.douban.com/rexxar/api/v2/subject_collection/movie_latest/items&#x27;</span>,</span><br><span class="line">    <span class="attr">freeUrl</span>: <span class="string">&#x27;https://m.douban.com/rexxar/api/v2/subject_collection/movie_free_stream/items&#x27;</span>,</span><br><span class="line">    <span class="attr">detailUrl</span>: <span class="string">&#x27;https://m.douban.com/rexxar/api/v2/movie/&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> loadHotFilms = <span class="function"><span class="keyword">function</span>(<span class="params">params=&#123;&#125;</span>) </span>&#123;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;URLS.hotUrl&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: params,</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    loadHotFilms</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>导入使用，回到<code>home.js</code>文件里，在最上面引入模块，同时之前写的<code>loadFilms</code>方法和调用都注释掉<br>首页加载数据分类有三个，加载数据比较多，可以一个个定义，也可以直接定义一个加载所有数据的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载主页数据</span></span><br><span class="line"><span class="function"><span class="title">loadHomeData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 加载影院热映数据</span></span><br><span class="line">    api.loadHotFilms(&#123;</span><br><span class="line">        <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">count</span>: <span class="number">6</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 加载近期热门数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载免费在线数据</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数据成功打印，但是怎么把数据放到首页，现在是在<code>api.js</code>里打印的<br>利用<code>promise</code>对于请求再次封装，回到<code>api.js</code>文件里<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 影院热映数据</span></span><br><span class="line"><span class="keyword">const</span> loadHotFilms = <span class="function"><span class="keyword">function</span>(<span class="params">params=&#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 返回Promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">            <span class="attr">url</span>: URLS.hotUrl,</span><br><span class="line">            <span class="attr">data</span>: params,</span><br><span class="line">            <span class="attr">success</span>: resolve,</span><br><span class="line">            <span class="attr">fail</span>: reject</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(res)</span></span><br><span class="line">        <span class="keyword">if</span> (res.statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.data</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果失败将Promise状态由fulfilled转换为rejected</span></span><br><span class="line">            <span class="built_in">Promise</span>.reject(&#123;</span><br><span class="line">                <span class="comment">// message换为errMsg是可以处理响应错误，reject(xx)里的xx会作为catch的实参,包括上面fail里的reject的res，失败都会传递给catch里的回调函数</span></span><br><span class="line">                <span class="attr">message</span>: res.errMsg</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="接口使用"><a href="#接口使用" class="headerlink" title="接口使用"></a>接口使用</h3><p>回到<code>home.js</code>，调用返回<code>Promise</code>对象，接着<code>.then</code>操作，请求失败处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载主页数据</span></span><br><span class="line"><span class="function"><span class="title">loadHomeData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 加载影院热映数据</span></span><br><span class="line">    <span class="comment">// 此时调用返回Promise对象</span></span><br><span class="line">    api.loadHotFilms(&#123;</span><br><span class="line">        <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">count</span>: <span class="number">6</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> type = &#123;</span><br><span class="line">            <span class="attr">title</span>: data.subject_collection.name,</span><br><span class="line">            <span class="attr">list</span>: data.subject_collection_items</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意是个对象里面再数组，不能用push</span></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="string">&#x27;types[0]&#x27;</span>: type</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 使用微信小程序提供弹出组件显示请求失败</span></span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          <span class="comment">// 消息可以自己给</span></span><br><span class="line">          <span class="comment">// title: &#x27;err.errMsg&#x27;,</span></span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;请求失败&#x27;</span>,</span><br><span class="line">          <span class="attr">image</span>: <span class="string">&#x27;/imgs/error.png&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 加载近期热门数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载免费在线数据</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于请求错误进行封装(一般不止一个页面可能会发送请求错误)，就在<code>app.js</code>里封装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理请求错误[响应错误这里没做处理]</span></span><br><span class="line"><span class="keyword">const</span> showError = <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用微信小程序提供弹出组件显示请求失败</span></span><br><span class="line">    wx.showToast(&#123;</span><br><span class="line">      <span class="attr">title</span>: error.errMsg,</span><br><span class="line">      <span class="comment">// 消息也可以自己给</span></span><br><span class="line">      <span class="comment">// title: &#x27;请求失败&#x27;,</span></span><br><span class="line">      <span class="attr">image</span>: <span class="string">&#x27;/imgs/error.png&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    loadHotFilms,</span><br><span class="line">    showError</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>home.js</code>调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载主页数据</span></span><br><span class="line"><span class="function"><span class="title">loadHomeData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 加载影院热映数据</span></span><br><span class="line">    <span class="comment">// 此时调用返回Promise对象</span></span><br><span class="line">    api.loadHotFilms(&#123;</span><br><span class="line">        <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">count</span>: <span class="number">6</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> type = &#123;</span><br><span class="line">            <span class="attr">title</span>: data.subject_collection.name,</span><br><span class="line">            <span class="attr">list</span>: data.subject_collection_items</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意是个对象里面再数组，不能用push</span></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="string">&#x27;types[0]&#x27;</span>: type</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;).catch(api.showError) <span class="comment">// 注意这里直接放的是函数即回调函数function (xx) &#123; xxx &#125;</span></span><br><span class="line">    <span class="comment">// 加载近期热门数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载免费在线数据</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>同理另外几个分类数据<code>api</code>封装也是一样，代码如下，记得导出<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 近期热门数据</span></span><br><span class="line"><span class="keyword">const</span> loadLatestFilms = <span class="function"><span class="keyword">function</span> (<span class="params">params = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 返回Promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">            <span class="attr">url</span>: URLS.latestUrl,</span><br><span class="line">            <span class="attr">data</span>: params,</span><br><span class="line">            <span class="attr">success</span>: resolve,</span><br><span class="line">            <span class="attr">fail</span>: reject</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(res)</span></span><br><span class="line">        <span class="keyword">if</span> (res.statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.data</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果失败将Promise状态由fulfilled转换为rejected</span></span><br><span class="line">            <span class="built_in">Promise</span>.reject(&#123;</span><br><span class="line">                <span class="comment">// message换为errMsg是可以处理响应错误，reject(xx)里的xx会作为catch的实参,包括上面fail里的reject的res，失败都会传递给catch里的回调函数</span></span><br><span class="line">                <span class="attr">message</span>: res.errMsg</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 免费在线数据</span></span><br><span class="line"><span class="keyword">const</span> loadFreeFilms = <span class="function"><span class="keyword">function</span> (<span class="params">params = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 返回Promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">            <span class="attr">url</span>: URLS.freeUrl,</span><br><span class="line">            <span class="attr">data</span>: params,</span><br><span class="line">            <span class="attr">success</span>: resolve,</span><br><span class="line">            <span class="attr">fail</span>: reject</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(res)</span></span><br><span class="line">        <span class="keyword">if</span> (res.statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.data</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果失败将Promise状态由fulfilled转换为rejected</span></span><br><span class="line">            <span class="built_in">Promise</span>.reject(&#123;</span><br><span class="line">                <span class="comment">// message换为errMsg是可以处理响应错误，reject(xx)里的xx会作为catch的实参,包括上面fail里的reject的res，失败都会传递给catch里的回调函数</span></span><br><span class="line">                <span class="attr">message</span>: res.errMsg</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><code>home.js</code>中调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载主页数据</span></span><br><span class="line"><span class="function"><span class="title">loadHomeData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 加载影院热映数据</span></span><br><span class="line">    <span class="comment">// 此时调用返回Promise对象</span></span><br><span class="line">    api.loadHotFilms(&#123;</span><br><span class="line">        <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">count</span>: <span class="number">6</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> type = &#123;</span><br><span class="line">            <span class="attr">title</span>: data.subject_collection.name,</span><br><span class="line">            <span class="attr">list</span>: data.subject_collection_items</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意是个对象里面再数组，不能用push</span></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="string">&#x27;types[0]&#x27;</span>: type</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;).catch(api.showError) <span class="comment">// 注意这里直接放的是函数即回调函数function (xx) &#123; xxx &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载近期热门数据</span></span><br><span class="line">    api.loadLatestFilms(&#123;</span><br><span class="line">        <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">count</span>: <span class="number">6</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> type = &#123;</span><br><span class="line">            <span class="attr">title</span>: data.subject_collection.name,</span><br><span class="line">            <span class="attr">list</span>: data.subject_collection_items</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="string">&#x27;types[1]&#x27;</span>: type</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(api.showError)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载免费在线数据</span></span><br><span class="line">    api.loadFreeFilms(&#123;</span><br><span class="line">        <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">count</span>: <span class="number">6</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> type = &#123;</span><br><span class="line">            <span class="attr">title</span>: data.subject_collection.name,</span><br><span class="line">            <span class="attr">list</span>: data.subject_collection_items</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            <span class="string">&#x27;types[2]&#x27;</span>: type</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(api.showError)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="小程序首页加载优化【三个分类要加载】"><a href="#小程序首页加载优化【三个分类要加载】" class="headerlink" title="小程序首页加载优化【三个分类要加载】"></a>小程序首页加载优化【三个分类要加载】</h3><blockquote><p>向后台发请求是需要花时间的，多保存几次，明显看到首页白屏的，过会才显示数据<br><code>loading</code>效果，我们资源文件里有个加载的<code>gif</code>图就用它来做<code>loading</code>效果<br>像这个<code>loading</code>很多页面上都会用到，我们把它定义为一个模板<br>在项目根目录下创建一个<code>templates</code>文件夹，接着创建<code>loading</code>文件夹，接着创建<code>loading.wxml</code>文件【定义为一个独立的模板文件目的是方便复用】<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/imgs/loading.gif&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>数据加载中<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在首页中使用，<code>home.wxml</code>中【数据没有出来的时候展示，首页数据都是在一个数据中】<br>模板文件引用使用<code>include</code>标签，注意是在<code>home.wxml</code>文件中引入，放最上面，容器里面即可<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 显示loading正在加载【数据还没请求到】 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">src</span>=<span class="string">&quot;/templates/loading/loading&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>给<code>loading</code>添加样式，在<code>templates/loading</code>目录下新建<code>loading.wxss</code>文件</p><blockquote><p>注意这里有个问题，模板它不是页面，就算同名<code>wxss</code>它也不会加载这个样式，不生效<br>解决方法：在<code>app.wxss</code>全局导入(加载)样式文件<br><code>app.wxss</code>代码如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 全局导入loading */</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;/templates/loading/loading.wxss&quot;</span>;</span><br><span class="line"></span><br><span class="line">page &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><code>loading.wxss</code>代码如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loading</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">40</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span> image &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span> view &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">22</span>rpx;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>有无数据直接通过判断数据长度就行了，直接使用<code>wx:if</code>指令即可</p></blockquote><p>回到<code>home.wxml</code>添加指令<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 显示loading正在加载【数据还没请求到】 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123; types.length === 0 &#125;&#125;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/templates/loading/loading&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>如果想人为让<code>loading</code>效果时间长一点，可以使用延时器把加载主页数据调用进行包裹即可<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 人为让loading效果时间长一点，只需要让发请求晚一点发即可</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadHomeData()</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序项目实战(一)</title>
      <link href="/archives/a62b94ce.html"/>
      <url>/archives/a62b94ce.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <p>💻Installation<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/coding327/mymovies.git</span><br></pre></td></tr></table></figure></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol><li>项目名称要和存放项目目录名称一致，如项目名称<code>myapp</code>，目录名称也应为<code>myapp</code></li><li><code>AppID</code>，这个自己提前准备好</li><li>开发模式选择小程序</li><li>后端服务不使用云服务</li><li>语言<code>javascript</code></li></ol><h2 id="项目初始化【清0操作】"><a href="#项目初始化【清0操作】" class="headerlink" title="项目初始化【清0操作】"></a>项目初始化【清0操作】</h2><ol><li><p>找到<code>app.js</code>，只保留如下代码【把配置项置空===空对象】</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line">App(&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>进入<code>app.wxss</code>，里面代码全部清除</p></li><li><p>删除<code>utils</code>整个目录</p></li><li><p>删除<code>pagindex/index</code>目录</p><ul><li>对应<code>app.json</code>文件里的<code>pages</code>下的<code>index/index/logs&quot;</code>也要删除</li></ul></li></ol><blockquote><p>下面这步可以选择把index整个目录都删除掉，也可以像下面这样一个一个清除</p><h3 id="以简单方案为主："><a href="#以简单方案为主：" class="headerlink" title="以简单方案为主："></a>以简单方案为主：</h3><ol><li>删除<code>pages</code>目录下的整个<code>index</code>目录<ul><li>对应<code>app.json</code>文件里的<code>pages</code>下的<code>&quot;pages/index/index&quot;</code>也要删除</li></ul></li></ol></blockquote><h3 id="不嫌麻烦可以按照如下方法清除index目录下的文件"><a href="#不嫌麻烦可以按照如下方法清除index目录下的文件" class="headerlink" title="不嫌麻烦可以按照如下方法清除index目录下的文件"></a>不嫌麻烦可以按照如下方法清除<code>index</code>目录下的文件</h3><ol><li><p>进入<code>pages/index/index.js</code>文件中，只保留如下代码【把配置项置空===空对象】</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// 获取应用实例</span></span><br><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>进入<code>pages/index/index.wxml</code>文件中，清除全部结构代码</p></li><li><p>进入<code>pages/index/index.wxss</code>文件中，清除全部样式代码</p></li></ol><h2 id="静态资源准备"><a href="#静态资源准备" class="headerlink" title="静态资源准备"></a>静态资源准备</h2><ol><li>项目所需图片及图标<code>imgs</code>直接放到项目根目录下即可</li></ol><h2 id="tab栏先做出来"><a href="#tab栏先做出来" class="headerlink" title="tab栏先做出来"></a><code>tab</code>栏先做出来</h2><ol><li><p>新建<code>home</code>页面，在<code>pages</code>目录下新建文件夹名称自己定一般为<code>home</code>即首页</p><ul><li>接着在<code>home</code>目录下右键选择新建<code>Page</code>，也为<code>home</code></li></ul></li><li><p>新建<code>about</code>页面，在<code>pages</code>目录下新建文件夹名称为<code>about</code></p><ul><li>接着在<code>about</code>目录下右键选择新建<code>Page</code>，也为<code>about</code></li></ul></li><li><p>配置页面，进入<code>app.json</code>文件中，找到<code>pages</code>配置如下【目前只要新建页面都会自动帮我们配好，如果没配我们就自己手动配置，但是删除页面不会自动帮我们清除】</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;pages/home/home&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/about/about&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></li><li><p>依旧是在<code>app.json</code>文件中，<code>window</code>配置项后面换行输入<code>tab</code>会有提示<code>tabBar</code>,回车即可，记得最后面加上逗号<br>参数解读：<br><code>pagePath</code>：页面路径【不要以/开头，直接从<code>pages</code>目录下写即可】<br><code>text</code>：页面的名称【图标下方文本】<br><code>iconPath</code>：图标路径【默认不选中的图标】<br><code>selectedIconPath</code>：图标路径【选中以后的图标】<br>完整代码如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;tabBar&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;list&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/home/home&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;首页&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;iconPath&quot;</span>: <span class="string">&quot;/imgs/film-close.png&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;/imgs/film-open.png&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/about/about&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;关于&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;iconPath&quot;</span>: <span class="string">&quot;/imgs/me-close.png&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;/imgs/me-open.png&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h2 id="修改顶部导航栏相关样式"><a href="#修改顶部导航栏相关样式" class="headerlink" title="修改顶部导航栏相关样式"></a>修改顶部导航栏相关样式</h2><p>在<code>app.json</code>文件中，有如下代码：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;window&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;backgroundTextStyle&quot;</span>: <span class="string">&quot;light&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;navigationBarBackgroundColor&quot;</span>: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;Weixin&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;navigationBarTextStyle&quot;</span>: <span class="string">&quot;black&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>代码解读：<br><code>backgroundTextStyle</code>：窗口背景色，这个一般不需要动<br><code>navigationBarBackgroundColor</code>：导航栏背景颜色<br><code>navigationBarTitleText</code>：导航栏文本<br><code>navigationBarTextStyle</code>：导航栏文本颜色</p><p>修改后：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;window&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;backgroundTextStyle&quot;</span>: <span class="string">&quot;light&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;navigationBarBackgroundColor&quot;</span>: <span class="string">&quot;#42bd56&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;movie&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;navigationBarTextStyle&quot;</span>: <span class="string">&quot;white&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h2 id="首页绘制"><a href="#首页绘制" class="headerlink" title="首页绘制"></a>首页绘制</h2><ol><li>清除<code>pages/home/home.wxml</code>中的代码</li><li>根据设计图绘制页面（可以发现整个背景都是灰色，给容器即<code>page</code>添加灰色背景）<br>进入<code>app.wxss</code>给<code>page</code>添加灰色即可<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">page &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在我们微信小程序里面不是<code>view</code>就是<code>text</code>然后就是组件<br>进入<code>home.wxml</code>书写我们页面结构<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-type&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分类标题 start --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;type-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">text</span>&gt;</span>影院热映<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">navigator</span>&gt;</span>更多 &gt;<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分类标题 end --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 电影列表 start --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-item&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; 6 &#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;film-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/imgs/film.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-name&quot;</span>&gt;</span>美丽人生<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-star&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;star-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/imgs/star-open.png&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; 5 &#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;film-source&quot;</span>&gt;</span>9.5<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 电影列表 end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>进入<code>home.wxss</code>书写样式[这里只写部分影院热映样式，具体看项目里的<code>home.wxss</code>]<br>单位<code>1rpx=0.5px=1</code>物理像素<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* pages/home/home.wxss */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.film</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.film-type</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分类标题 */</span></span><br><span class="line"><span class="selector-class">.type-title</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">26</span>rpx <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">28</span>rpx;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.type-title</span> text&#123;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">6</span>rpx solid <span class="number">#42bd56</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">26</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.type-title</span> navigator &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#42bd56</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">16</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 电影列表 */</span></span><br><span class="line"><span class="selector-class">.film-list</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.film-item</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200</span>rpx;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.film-img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">280</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.film-name</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">22</span>rpx;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="comment">/* 对于较长的电影名称进行处理 */</span></span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.film-star</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.film-star</span> <span class="selector-class">.star-img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.film-star</span> <span class="selector-class">.film-source</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">8</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="横向滚动实现"><a href="#横向滚动实现" class="headerlink" title="横向滚动实现"></a>横向滚动实现</h3><blockquote><p>可以使用微信小程序里提供的<code>scroll-view</code>组件，并指定<code>scroll-x</code>横向滚动</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 电影列表 start --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 替换横向滚动组件，并指定scroll-x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;film-list&quot;</span> <span class="attr">scroll-x</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-item&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; 6 &#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;film-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/imgs/film.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-name&quot;</span>&gt;</span>美丽人生<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-star&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;star-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/imgs/star-open.png&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; 5 &#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;film-source&quot;</span>&gt;</span>9.5<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 电影列表 end --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="接着把类别循环下即可，这样基于三个了"><a href="#接着把类别循环下即可，这样基于三个了" class="headerlink" title="接着把类别循环下即可，这样基于三个了"></a>接着把类别循环下即可，这样基于三个了</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 类别有三个，循环三次即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-type&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; 3 &#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分类标题 start --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;type-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">text</span>&gt;</span>影院热映<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">navigator</span>&gt;</span>更多 &gt;<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分类标题 end --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 电影列表 start --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 替换横向滚动组件，并指定scroll-x --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;film-list&quot;</span> <span class="attr">scroll-x</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-item&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; 6 &#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;film-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/imgs/film.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-name&quot;</span>&gt;</span>美丽人生<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-star&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;star-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/imgs/star-open.png&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; 5 &#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;film-source&quot;</span>&gt;</span>9.5<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 电影列表 end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="绘制分类页"><a href="#绘制分类页" class="headerlink" title="绘制分类页"></a>绘制分类页</h2><blockquote><p>在<code>pages</code>目录下创建一个文件夹叫<code>list</code>，再新建个<code>Page</code>也叫<code>list</code><br>为了方便观察页面，我们可以去<code>app.json</code>文件里有个<code>pages</code>，把<code>list</code>路径提到最前面<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;pages/list/list&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/home/home&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/about/about&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></p></blockquote><p>进入<code>list.wxml</code>书写分类页结构，发现每一项电影和之前首页一样抽离成组件</p><h3 id="组件抽离"><a href="#组件抽离" class="headerlink" title="组件抽离"></a>组件抽离</h3><p>在项目根目录创建一个<code>components</code>文件夹用来放复用组件，在<code>components</code>目录下再新建一个文件夹名称为<code>film-item</code>对应该组件功能，方便管理，接着鼠标右键新建<code>Component</code>名称也是<code>film-item</code>，把首页可以抽离代码剪切拿过来，注意把循环去掉，在使用时循环组件即可<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--components/film-item/film-item.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;film-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/imgs/film.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-name&quot;</span>&gt;</span>美丽人生<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;film-star&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;star-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/imgs/star-open.png&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; 5 &#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;film-source&quot;</span>&gt;</span>9.5<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="组件样式"><a href="#组件样式" class="headerlink" title="组件样式"></a>组件样式</h3><p>样式也需要拿过来，最外面<code>item</code>这一层样式不拿过来[最外层<code>view</code>最好不加样式]，使用时我们自己去调更适合于不同页面<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* components/film-item/film-item.wxss */</span></span><br><span class="line"><span class="selector-class">.film-img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">280</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.film-name</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">22</span>rpx;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="comment">/* 对于较长的电影名称进行处理 */</span></span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.film-star</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.film-star</span> <span class="selector-class">.star-img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.film-star</span> <span class="selector-class">.film-source</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">8</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><p>项目中多个页面都会使用到该组件把它做一个全局引用（全局注册）<br>进入<code>app.json</code>，在组后面接着添加属性<code>usingComponents</code>，组件名称我们也叫<code>film-item</code>，配组件路径以<code>/</code>起始<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;film-item&quot;</span>: <span class="string">&quot;/components/film-item/film-item&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="组件调用"><a href="#组件调用" class="headerlink" title="组件调用"></a>组件调用</h3><p>进入<code>home.wxml</code>，传入样式[下面是基本组件调用]<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;组件名称 class=&quot;class1&quot;&gt;&lt;/组件名称&gt;</span><br></pre></td></tr></table></figure></p><p>具体代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">film-item</span> <span class="attr">class</span>=<span class="string">&quot;film-item&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; 6 &#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">film-item</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>回到<code>app.json</code>把<code>pages</code>中的首页提前看一下页面是否可以<br>基本上是可以的，首页没什么问题，再到<code>app.json</code>里把分类页切换回来</p><h3 id="分类页中调用组件"><a href="#分类页中调用组件" class="headerlink" title="分类页中调用组件"></a>分类页中调用组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">film-item</span> <span class="attr">class</span>=<span class="string">&quot;film-item&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; 12 &#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">film-item</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="书写样式"><a href="#书写样式" class="headerlink" title="书写样式"></a>书写样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* pages/list/list.wxss */</span></span><br><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-type</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分类标题 */</span></span><br><span class="line"><span class="selector-class">.type-title</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">26</span>rpx <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">28</span>rpx;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.type-title</span> text &#123;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">6</span>rpx solid <span class="number">#42bd56</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">26</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 电影列表 */</span></span><br><span class="line"><span class="selector-class">.film-list</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12</span>rpx;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.film-item</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33.33%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12</span>rpx;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>note: 首页和分类页共用<code>film-item</code>组件，但是它们的样式是不一样的，所以在封装组件时不要把样式固定死了，调用时根据不同页面去加样式</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序工具安装与配置</title>
      <link href="/archives/4547aaff.html"/>
      <url>/archives/4547aaff.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <h2 id="微信小程序简介"><a href="#微信小程序简介" class="headerlink" title="微信小程序简介"></a>微信小程序简介</h2><p>微信小程序是一种<strong>不需要下载安装即可使用的应用</strong>，它实现了应用“触手可及”的梦想，用户扫一扫或者搜一下即可打开的应用。也体现了<strong>用完即走</strong>的理念，用户不用关心是否安装太多应用的问题。应用将无处不在，随时可用，但又无需安装卸载。</p><h2 id="微信小程序与普通网页开发区别"><a href="#微信小程序与普通网页开发区别" class="headerlink" title="微信小程序与普通网页开发区别"></a>微信小程序与普通网页开发区别</h2><ol><li>运行环境不同<ul><li>网页运行在浏览器环境中；</li><li>小程序运行在微信环境中。</li></ul></li><li>API不同<br>由于运行环境的不同，所以小程序中，无法调用<code>DOM</code>和<code>BOM</code>的<code>API</code>。但是微信小程序中可以调用微信环境所提供的各种API，例如：<ul><li>地理位置</li><li>扫码</li><li>支付</li></ul></li><li>开发模式不同<br>网页的开发模式：浏览器 + 代码编辑器<br>微信小程序有自己的一套标准开发模式：<ul><li>申请微信小程序开发账号</li><li>安装微信小程序开发者工具</li><li>创建和配置微信小程序项目</li></ul></li></ol><h2 id="微信小程序官方组件展示"><a href="#微信小程序官方组件展示" class="headerlink" title="微信小程序官方组件展示"></a>微信小程序官方组件展示</h2><blockquote><p>日常开发中我们可以会遇到一些不熟悉的标签组件，我们可以通过查看微信官方文档，点击体验小程序扫码即可查看里面相关功能的介绍，也能去体验一下小程序给我们提供的哪些能力</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10147.png" alt="体验微信小程序"></p><h2 id="首次创建小程序的流程"><a href="#首次创建小程序的流程" class="headerlink" title="首次创建小程序的流程"></a>首次创建小程序的流程</h2><p>如果你是第一次开始创建小程序，那么请遵循以下几个步骤一步一步开始。</p><h2 id="注册小程序开发账号"><a href="#注册小程序开发账号" class="headerlink" title="注册小程序开发账号"></a>注册小程序开发账号</h2><p>使用浏览器打开<a href="https://mp.weixin.qq.com/?token=&amp;lang=zh_CN">微信公众平台</a>，点击右上角的<strong>立即注册</strong>即可进入到小程序开发账号的注册流程，其过程如下：</p><ol><li>首先进入网站，点击立即注册<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10148.png" alt="注册微信小程序账号"></li><li>跳转页面后选择小程序<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10149.png" alt="10149"></li><li>进入小程序之后，对个人信息账号密码进行一个填写<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10150.png" alt="10150"></li><li>填写之后在填写的邮箱中确认注册信息，注意:作为学习者我们必须选择主体类型为个人<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10151.png" alt="10151"></li><li>填写之后我们就可以进入到微信小程序的管理后台<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10152.png" alt="10152"></li><li>获取小程序的AppID(创建小程序项目的时候会用到)<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10153.png" alt="10153"></li></ol><h2 id="安装微信开发者工具"><a href="#安装微信开发者工具" class="headerlink" title="安装微信开发者工具"></a>安装微信开发者工具</h2><ol><li>微信开发者工具是官方推荐使用的小程序开发工具，它提供的主要功能如下：<ul><li>快速创建小程序项目</li><li>代码的查看和编辑</li><li>对小程序功能进行调试</li><li>小程序的预览和发布</li></ul></li><li>下载<br>推荐下载和安装最新的稳定版微信开发者工具，下载链接如下：(根据自己的电脑配置选择相应的版本)<br><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html">下载链接</a><br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10154.png" alt="10154"></li><li>安装<br>傻瓜式安装就行，可以选安装路径【不建议安装C盘】<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10155.png" alt="10155"></li><li>微信扫码登录<br>安装完成，打开之后会出现一个二维码，用自己的微信扫码登录即可，然后创建小程序<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10156.png" alt="10156"></li><li>配置微信开发者工具<br>安装完成之后我们根据自己的喜好进行相关配置</li></ol><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10157.png" alt="10157"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10158.png" alt="10158"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10159.png" alt="10159"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10160.png" alt="10160"></p><h2 id="小程序创建与运行"><a href="#小程序创建与运行" class="headerlink" title="小程序创建与运行"></a>小程序创建与运行</h2><ol><li>创建微信小程序<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10161.png" alt="10161"><br>点击确定即可</li><li>运行微信小程序<br>在项目开发中，我们通过编译器来查看我们的项目可以点击编译器上的编译[运行]即可</li></ol><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10162.png" alt="10162"></p><p>如果想在手机上查看我们编译的项目，点击预览弹出的二维码，手机扫码即可</p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10163.png" alt="10163"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后，还有更多小程序项目的配置，在后期项目实战中再一一介绍~</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团队中如何使用git</title>
      <link href="/archives/5da521f6.html"/>
      <url>/archives/5da521f6.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <h2 id="Git分支操作"><a href="#Git分支操作" class="headerlink" title="Git分支操作"></a>Git分支操作</h2><blockquote><p>在版本控制过程中，同时推进多个任务，为每个任务我们可以创建每个任务的单独分支，使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候不会影响主线分支的运行，对于初学者而言，说白了，分支可以简单理解为副本，一个分支就是一个单独的副本。</p></blockquote><h2 id="分支优点"><a href="#分支优点" class="headerlink" title="分支优点"></a>分支优点</h2><blockquote><p>同时并行推送多个功能开发，提高开发效率；各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响，失败的分支删除重新开始即可。</p></blockquote><h2 id="git分支操作命令"><a href="#git分支操作命令" class="headerlink" title="git分支操作命令"></a>git分支操作命令</h2><div class="table-container"><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前所在分支</td></tr></tbody></table></div><blockquote><p>我们可以<strong>查看当前分支</strong>，<strong>并创建新的分支</strong>。</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10130.png" alt="10130"></p><blockquote><p>创建新的分支可以进行<strong>文件的修改</strong>，修改之后仍然要再进行一次提交本地库过程。</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10131.png" alt="10131"></p><blockquote><p>将指定的分支合并到当前分支上</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10132.png" alt="10132"></p><mark class="hl-label red">合并分支可能会产生冲突</mark> <p>其原因是：合并分支时，两个分支在同一个文件的同一位置有两套完全不同的修改。<strong>Git</strong>无法替我们决定使用哪一个，必须人为决定新代码内容。（通俗理解为：只要两个分支对同一个文件做了修改，则合并会出现<strong>conflict</strong>，因为<strong>Git</strong>不知道保留哪一个版本）</p><blockquote><p>我们先把要进行合并的分支内容进行一定的修改</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10133.png" alt="10133"></p><blockquote><p>修改完成后切换到<code>master</code>分支进行合并，出现了冲突日志，提示我们自动合并失败，因为在<code>say.txt</code>文件里面有合并代码冲突</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10134.png" alt="10134"></p><blockquote><p>因为<code>git</code>对两个分支都进行了修改，<code>git</code>不知道我们要保存哪一个，所以出现合并冲突</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10135.png" alt="10135"></p><blockquote><p>接下来需要我们进行手动合并。直接编辑<code>say.txt</code>将我们要保留的内容留下了。<code>:wq</code>保存即可</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10136.png" alt="10136"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10137.png" alt="10137"></p><blockquote><p>保存之后，还需要将我们人为修改的文件再一次提交到本地库上。<br>注意：再一次提交本地库的时候不需要在写文件名，否则会报错</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10138.png" alt="10138"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><blockquote><p>创建分支的本质就是多创建一个指针；<code>HEAD</code>如果指向<code>master</code>，那么我们现在就在<code>master</code>分支上；<code>HEAD</code>如果执行<code>hot-fix</code>，那么我们现在就在<code>hot-fix</code>指针上。</p></blockquote><center style="font-size:20px;font-weight:600;margin-bottom:20px;">Git中分支的常用命令及步骤</center><div class="table-container"><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch</td><td>列出本地所有分支</td></tr><tr><td>git branch -r</td><td>列出所有远程分支</td></tr><tr><td>git branch 本地分支名</td><td>新建一个本地分支，但依然停留在当前分支</td></tr><tr><td>git checkout -b 本地分支名</td><td>新建一个本地分支，并切换到该分支</td></tr><tr><td>git merge 指定分支名</td><td>合并指定分支到当前分支</td></tr><tr><td>git branch -d 本地分支名</td><td>删除本地分支</td></tr><tr><td>git push origin —delete 远程分支名</td><td>删除远程分支</td></tr><tr><td>git branch -dr 远程仓库别名/远程分支名</td><td>删除远程分支</td></tr></tbody></table></div><p>如果同一个文件在合并时都被修改了则会引起冲突，解决办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况在新建的分支如dev上工作，工作完之后比如要发布，dev分支代码稳定后可以合并到主分支 master 上来。<br>分支在Git中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响，在某个时间点一旦两个平行宇宙合并了，我们就需要处理一些问题了。</p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10139.png" alt="10139"></p><p><strong>补充知识</strong>：<br>我们可以在<a href="https://gitee.com">gitee网站</a>末尾查看一些<code>Git</code>相关知识，这里简单的说一下。</p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10140.png" alt="10140"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10141.png" alt="10141"></p><h2 id="Git团队协作"><a href="#Git团队协作" class="headerlink" title="Git团队协作"></a>Git团队协作</h2><h3 id="团队内协作"><a href="#团队内协作" class="headerlink" title="团队内协作"></a>团队内协作</h3><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10142.png" alt="10142"></p><h3 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h3><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10143.png" alt="10143"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git与github基本使用流程</title>
      <link href="/archives/1a6eadde.html"/>
      <url>/archives/1a6eadde.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <h2 id="GitHub简介"><a href="#GitHub简介" class="headerlink" title="GitHub简介"></a>GitHub简介</h2><p><strong>GitHub</strong>是一个面向开源及私有软件项目的托管平台，因为只支持<code>Git</code>作为唯一的版本库格式进行托管，故名<code>GitHub</code>，<code>GitHub</code>是全球最大程序员技术交流平台</p><h2 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h2><p>进入<a href="https://github.com">Github官网</a>，注册一个GitHub账号，完成注册登录，点击右上角的加号进行创建远程库</p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10095.png" alt="创建远程仓库1"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10096.png" alt="创建远程仓库2"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10097.png" alt="创建远程仓库3"></p><h2 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h2><div class="table-container"><table><thead><tr><th>git命令</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前所有远程仓库别名</td></tr><tr><td>git remote add 别名 远程仓库地址</td><td>给远程仓库添加别名</td></tr><tr><td>git push 别名 分支名</td><td>推送本地分支上的内容到远程仓库</td></tr><tr><td>git clone 远程仓库地址</td><td>将远程仓库的内容克隆到本地</td></tr><tr><td>git pull 远程仓库别名 远程分支名</td><td>将远程仓库对应分支最新内容拉下来与当前本地分支直接合并</td></tr></tbody></table></div><h2 id="创建远程仓库别名"><a href="#创建远程仓库别名" class="headerlink" title="创建远程仓库别名"></a>创建远程仓库别名</h2><p><strong>创建远程仓库别名</strong>的作用是：将长链接的仓库链接起一个别名，将来进行仓库链接的拉取与推送时，可以直接利用这个别名来拉取。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="literal">-v</span></span><br><span class="line">git remote add 别名 远程地址</span><br></pre></td></tr></table></figure><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10098.png" alt="远程仓库别名"></p><h2 id="本地分支推送到远程仓库"><a href="#本地分支推送到远程仓库" class="headerlink" title="本地分支推送到远程仓库"></a>本地分支推送到远程仓库</h2><p>因为GitHub属于国外网站，推送的速度取决于你的网络，不行的话多试几次<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push 别名 分支</span><br></pre></td></tr></table></figure></p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10099.png" alt="10099"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10100.png" alt="10100"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10101.png" alt="10101"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10102.png" alt="10102"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10103.png" alt="10103"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10104.png" alt="10104"></p><h2 id="克隆远程仓库到本地-非项目负责人"><a href="#克隆远程仓库到本地-非项目负责人" class="headerlink" title="克隆远程仓库到本地(非项目负责人)"></a>克隆远程仓库到本地(非项目负责人)</h2><p>我们克隆远程库到本地会自动执行以下操作：</p><ol><li>拉取代码；</li><li>初始化本地库；</li><li>创建别名；</li><li>注意：我们克隆代码是不需要进行登录账号的。</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 远程地址</span><br></pre></td></tr></table></figure><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10105.png" alt="10105"></p><h2 id="团队内协作"><a href="#团队内协作" class="headerlink" title="团队内协作"></a>团队内协作</h2><blockquote><p>当团队成员需要对项目代码进行修改时，需要从远程库克隆到本地库然后进行修改，修改之后仍要提交到暂缓区和本地库</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10106.png" alt="10106"></p><blockquote><p>接下来就需要将我们修改之后的代码<code>push</code>推送到远程库，登录<strong>GitHub</strong>关联账号，让项目负责人看到我们的修改版本</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10107.png" alt="10107"></p><blockquote><p>但是我们 push 之前，需要项目负责人将我们的添加的项目管理信任区，没有项目负责人的对我们的许可，我们是不能把修改的代码 push 到远程库当中的。如何添加请看如下操作：</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10108.png" alt="10108"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10109.png" alt="10109"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10110.png" alt="10110"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10111.png" alt="10111"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10112.png" alt="10112"></p><p>同意之后就团队成员就可以把代码提交到本地库当中，大家都可以看到了该成员提交的代码。</p><h2 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h2><blockquote><p>跨团队协作就是找团队外的人来帮助我们修改代码。外部人员要修改本部代码，直接访问本部的<code>github</code>项目链接，然后点击<code>fork</code>将代码叉到自己的项目中。</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10113.png" alt="10113"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10114.png" alt="10114"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10115.png" alt="10115"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10116.png" alt="10116"></p><p>因为我就一个<code>GitHub</code>账号，不便展示外部与本部的文件传送，总之<code>pull request</code>之后，会自动将修改之后的内容与修改之前的内容进行对比，并可以留言告诉本部人员，本部人员对接收的<code>pull</code>请求进行审核，通过的话即可将外部编写的代码与本部代码进行合并。</p><h2 id="SSH连接github"><a href="#SSH连接github" class="headerlink" title="SSH连接github"></a>SSH连接github</h2><blockquote><p>使用<code>ssh</code>方式时，不需要验证用户名和密码，之前配置过<code>ssh key</code>，(如果你没设置密码)直接<code>push</code>即可；使用<code>http</code>方式时，需要验证用户名和密码。<br><strong>HTTPS</strong>和<strong>SSH</strong>的区别：</p><ul><li><strong>HTTPS</strong>利于匿名访问，适合开源项目，可以方便被别人克隆和读取(但没有<code>push</code>权限)；</li><li><strong>SSH</strong>不利于匿名访问，比较适合内部项目，只要配置了<strong>SSH公钥</strong>极可自由实现<code>clone</code>和<code>push</code>操作。正常我们一开始使用<strong>SSH</strong>是不能用的，给我们弹出了警告，需要我们进行相关的<code>keys</code>配置。</li></ul></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10117.png" alt="10117"></p><blockquote><p>接下里对<strong>SSH</strong>中的<code>keys</code>进行相关配置</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10118.png" alt="10118"></p><blockquote><p>在当前文件右键点击<code>Git Bash Here</code>执行如下命令：</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa</span><br></pre></td></tr></table></figure><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10119.png" alt="10119"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10120.png" alt="10120"></p><blockquote><p>将公钥<strong>id_rsa.pub</strong>里面的内容复制到自己的<code>GitHub</code>里面，如下：</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10121.png" alt="10121"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10122.png" alt="10122"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10123.png" alt="10123"></p><blockquote><p>测试ssh连接是否成功<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># github</span></span><br><span class="line">ssh <span class="literal">-T</span> git@github.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># gitee【上面公钥同理也可以放到gitee，然后测试一下gitee的ssh连接是否成功】</span></span><br><span class="line">ssh <span class="literal">-T</span> git@gitee.com</span><br></pre></td></tr></table></figure></p><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10124.png" alt="10124"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10125.png" alt="10125"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10126.png" alt="10126"></p><h2 id="拉取远程库到本地库-项目负责人"><a href="#拉取远程库到本地库-项目负责人" class="headerlink" title="拉取远程库到本地库(项目负责人)"></a>拉取远程库到本地库(项目负责人)</h2><blockquote><p>假设有人在远程仓库中文件进行了修改，修改过程如下，我们本地库就需要在拉取一边远程库代码实现项目修改更新<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull 远程库地址别名 远程分支名</span><br></pre></td></tr></table></figure></p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10127.png" alt="10127"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10128.png" alt="10128"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10129.png" alt="10129"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git工具的安装和配置</title>
      <link href="/archives/bc3d0e48.html"/>
      <url>/archives/bc3d0e48.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <h2 id="初识Git"><a href="#初识Git" class="headerlink" title="初识Git"></a>初识Git</h2><p>在学习<code>Git</code>之前，我们应该明白为什么要学习<code>Git</code>以及<code>Git</code>能帮助我们做什么：<br>比如在日常开发中，多人对一个共享文件进行代码编写，每个人有每个人的版本，如果你不借用<code>Git</code>，先进行编辑的人所做的修改内容会被覆盖掉，或者说如果客户要求你代码版本是之前编写的，但现在所编写已经将之前的编写删掉，找不到之前编辑的版本，这就很坑爹，基于这种情况 <code>Git</code>版本管理系统 应运而生。</p><ul><li>Git是一个<strong>免费的、开源的 分布式版本控制系统</strong>，可以高效地处理从小型到大型的各种项目；</li><li>Git利于学习，占地面积小，性能极快。它具有廉价的本地库，方便暂缓区域和多个工作流分支等特性。其性能优于<code>Subversion</code>、<code>CVS</code>、<code>Perforce</code>和<code>ClearCase</code>等<strong>版本控制</strong>工具。</li></ul><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统，在开发过程中用于管理我们对文件、目录或工程等内容的修改历史，便于查看更改历史记录，备份以便恢复以前版本的软件工程技术。其最主要的是可以记录文件修改的历史记录，从而让用户能够查看历史版本，方便版本切换。简单说：用于管理多人协同开发项目的技术。</p><p>版本控制分类：</p><ol><li>本地版本控制：<ul><li>记录每次文件的更新，可以对每个版本做一个快照，或是记录补丁文件，适合于个人，如<code>RCS</code></li></ul></li><li>集中版本控制：<br>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改，缺点是：一旦服务器出现损坏或者网络问题，用户就不能看到历史版本甚至会丢失所有数据，其代表产品：<code>SVN</code></li><li>分布式版本控制：<ul><li>所有版本信息仓库同步到本地的每个用户，这样就可以查看所有版本历史记录，只需在连网时<code>push</code>到相应的服务器或其他用户那里，不会因为服务器的或网络问题，造成不能工作的情况，缺点是：每个人都拥有全部代码，容易造成安全隐患，比如携码跑路……</li></ul></li></ol><p><code>Git</code>和<code>SVN</code>的区别：<br><code>Git</code>是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网，因为版本都在自己的电脑上，可以直接看到更新了那些代码和文件。<br><code>SVN</code>是集中式版本控制系统，版本库是集中放在中央服务器中，工作时需要自己的电脑从中央服务器得到最新的版本，然后工作，完成工作后把做完的内容推送到中央服务器中。</p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10080.png" alt="集中式与分布式图解"></p><p>常见的版本控制工具：</p><blockquote><p><code>Git</code>、<code>SVN</code>、<code>CVS</code>、<code>VSS</code>、<code>TFS</code>、<code>Visual Studio Online</code>版本控制产品很多，现在影响力最大且使用最广泛是<code>Git</code>，我们学习的应该也是最主流的技术<code>Git</code>，其它了解即可。</p></blockquote><h2 id="Git工作机制"><a href="#Git工作机制" class="headerlink" title="Git工作机制"></a>Git工作机制</h2><p>代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为：”<strong>远程库</strong>“。<br><strong>托管中心基本分两类</strong>：局域网上的<code>GitLab</code>，和互联网上的<code>Github</code>(外网)、<code>Gitee</code>(码云，国内网站)</p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10081.png" alt="Git工作机制"></p><h2 id="Git的安装与配置"><a href="#Git的安装与配置" class="headerlink" title="Git的安装与配置"></a>Git的安装与配置</h2><h3 id="Windows平台安装（主要）"><a href="#Windows平台安装（主要）" class="headerlink" title="Windows平台安装（主要）"></a>Windows平台安装（主要）</h3><p>在<code>Windows</code>系统上安装<code>Git</code>可以到<code>Git</code>官网上下载：<a href="https://git-scm.com">Git官网</a>（属国外的站，下载慢可以找国内的一些镜像网站，百度很多，这里不在赘述）</p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10082.png" alt="Git官网"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10083.png" alt="下载git"></p><blockquote><p>安装过程中建议可以勾选这几个选项，可以在桌面右键点击，菜单栏里面是可以看到的</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10084.png" alt="安装git"></p><blockquote><p>在选择一个默认的编辑器时直接默认选择<code>vim</code>即可[当然如果你像我一样习惯使用<code>visual studio code</code>，那就选择这个]，<code>vim</code>只要会点Linux操作即可，当然也可以选择其他自己擅长的编辑器，主要是看自己的具体情况</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10085.png" alt="选择默认的编辑器"></p><blockquote><p>在选择设置分支名字的时候，直接默认即可</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10086.png" alt="设置分支名字"></p><blockquote><p>在选择PATH环境时，选择第一个即可，第二个也可以，能在cmd运行，第三个建议不选</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10087.png" alt="选择path环境"></p><blockquote><p>后面的直接傻瓜式的直接默认即可，没啥重要要说明的。<br>安装完成之后，就可以使用命令行的<code>git</code>工具了，另外还有一个图形界面的<code>Git</code>项目管理工具，在开始菜单里找到<code>&quot;Git&quot;-&gt;&quot;Git Bash&quot;</code>，会弹出<code>Git</code>命令窗口，你可以在该窗口进行<code>Git</code>操作</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10088.png" alt="git命令窗口"></p><ul><li>Git Bash：<strong>Unix</strong>与<strong>Linux</strong>风格的命令行，使用最多，推荐最多</li><li>Git CMD：<strong>Windows</strong>风格的命令行</li><li>Git GUI：图形界面的<strong>Git</strong>，不建议初学者使用，尽量先熟悉常用命令</li></ul><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10089.png" alt="不同系统下的git操作界面"></p><blockquote><p><strong>Git GUI</strong>的图形画界面比较丑，大部分还是喜欢使用<strong>Git Bash</strong></p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10090.png" alt="Git GUI界面"></p><blockquote><p>点开<code>Git Bash</code>输入<code>git --version</code>就可以查看当前<code>git</code>的版本了，因为我老早之前就下载了，并不是最新版本，也懒得再重新更新下载了，大家凑合看吧（按住<strong>ctrl + 滚轮进行字体的放大</strong>），在输入框输入基本的<strong>Linux命令</strong>即可执行</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10091.png" alt="10091"></p><h2 id="Linux平台安装"><a href="#Linux平台安装" class="headerlink" title="Linux平台安装"></a>Linux平台安装</h2><p><code>Git</code>的工作需要调用<code>curl</code>、<code>zlib</code>、<code>openssl</code>、<code>expat</code>和<code>libiconv</code>等库的代码，所以需要先安装这些依赖工具。在有<code>yum</code>的系统上（比如<code>Fedora</code>）或者有<code>apt-get</code>的系统上（比如<code>Debian</code>体系），可以用下面的命令安装：各<code>Linux</code>系统可以很简单多使用其安装包管理工具进行安装：</p><p><strong>Debian/Ubuntu</strong>中<code>Git</code>安装命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \</span></span><br><span class="line"><span class="bash">  libz-dev libssl-dev</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get install git-core</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git --version</span></span><br><span class="line">git version 1.8.1.2</span><br></pre></td></tr></table></figure><p><strong>Centos/RedHat</strong>中<code>Git</code>安装命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install curl-devel expat-devel gettext-devel \</span></span><br><span class="line"><span class="bash">  openssl-devel zlib-devel</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install git-core</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git --version</span></span><br><span class="line">git version 1.7.1</span><br></pre></td></tr></table></figure><h2 id="Mac平台安装"><a href="#Mac平台安装" class="headerlink" title="Mac平台安装"></a>Mac平台安装</h2><p>在<code>Mac</code>平台上安装<code>Git</code>最容易的当属使用图形化的<strong>Git安装工具</strong>，其下载地址为：<a href="https://sourceforge.net/projects/git-osx-installer/?spm=a2c6h.12873639.article-detail.6.2a6566445XM9x7">Mac平台Git安装工具</a></p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10092.png" alt="Mac平台安装Git"></p><h2 id="Git相关配置文件解读"><a href="#Git相关配置文件解读" class="headerlink" title="Git相关配置文件解读"></a>Git相关配置文件解读</h2><p>Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量；这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p><ul><li><code>/etc/gitconfig</code>文件：系统中对所有用户都普遍适用的配置。若使用<code>git config</code>时用<code>--system</code>选项，读写的就是这个文件;</li><li><code>~/.gitconfig</code>文件：用户目录下的配置文件只适用于该用户。若使用<code>git config</code>时用<code>--global</code>选项，读写的就是这个文件;</li></ul><p>当前项目的<code>Git</code>目录中的配置文件（也就是工作目录中的<code>.git/config</code>文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以<code>.git/config</code>里的配置会覆盖<code>/etc/gitconfig</code>中的同名变量</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令速查表</title>
      <link href="/archives/b58fe91e.html"/>
      <url>/archives/b58fe91e.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <blockquote><p>本片文章基本上收纳了大部分开发中需要使用的命令，但是还有很多 git 与 github 的细节并没有，文章末尾给大家推几个链接<br><code>git</code>的操作可以通过命令的形式执行，日常使用就如下图 6 个命令即可</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10077.png" alt="git图解"><br>实际上，如果想要熟练使用，超过 60 多个命令需要了解，下面则介绍下常见的<code>git</code>命令</p><h2 id="二、有哪些常用-git-命令"><a href="#二、有哪些常用-git-命令" class="headerlink" title="二、有哪些常用 git 命令"></a>二、有哪些常用 git 命令</h2><p>大致分成了以下几个类别：</p><ul><li>配置</li><li>初始化</li><li>日常基本操作</li><li>分支操作</li><li>远程同步</li><li>撤销</li><li>存储</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>Git</code>自带一个<code>git config</code>的工具来帮助设置控制<code>Git</code>外观和行为的配置变量，在我们安装完<code>git</code>之后，第一件事就是设置你的用户名和邮件地址<br>后续每一个提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改<br>设置提交代码时的用户信息命令如下：</p><ul><li>git config [—global] user.name “[name]”</li><li>git config [—global] user.email “[email address]”</li></ul><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>一个<code>git</code>项目的初始化有两个途径，分别是：</p><ul><li>git init [project-name]：创建或在当前目录初始化一个<code>git</code>代码库</li><li>git clone url：下载一个项目和它的整个代码历史</li></ul><h2 id="日常基本操作"><a href="#日常基本操作" class="headerlink" title="日常基本操作"></a>日常基本操作</h2><p>在日常工作中，代码常用的基本操作如下：</p><ul><li>git init 初始化仓库，默认为 master 分支</li><li>git add . 提交全部文件修改到缓存区</li><li>git add &lt;具体某个文件路径+全名&gt; 提交某些文件到缓存区</li><li>git diff 查看当前代码<code>add</code>后，会<code>add</code>哪些内容</li><li>git diff —staged 查看现在<code>commit</code>提交后，会提交哪些内容</li><li>git status 查看当前分支状态</li><li>git pull &lt;远程仓库名&gt; &lt;远程分支名&gt; 拉取远程仓库的分支与本地当前分支合并</li><li>git pull &lt;远程仓库名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 拉取远程仓库的分支与本地某个分支合并</li><li>git commit -m “&lt;注释&gt;” 提交代码到本地仓库，并写提交注释</li><li>git commit -v 提交时显示所有<code>diff</code>信息</li><li>git commit —amend [file1] [file2] 重做上一次<code>commit</code>，并包括指定文件的新变化<br>关于提交信息的格式，可以遵循以下的规则：</li><li>feat: 新特性，添加功能</li><li>fix: 修改<code>bug</code></li><li>refactor: 代码重构</li><li>docs: 文档修改</li><li>style: 代码格式修改, 注意不是<code>css</code>修改</li><li>test: 测试用例修改</li><li>chore: 其他修改, 比如构建流程, 依赖管理</li></ul><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><ul><li>git branch 查看本地所有分支</li><li>git branch -r 查看远程所有分支</li><li>git branch -a 查看本地和远程所有分支</li><li>git merge &lt;分支名&gt; 合并分支</li><li>git merge —abort 合并分支出现冲突时，取消合并，一切回到合并前的状态</li><li>git branch &lt;新分支名&gt; 基于当前分支，新建一个分支</li><li>git checkout —orphan &lt;新分支名&gt; 新建一个空分支（会保留之前分支的所有文件）</li><li>git branch -D &lt;分支名&gt; 删除本地某个分支</li><li>git push &lt;远程库名&gt; —delete &lt;分支名&gt; 删除远程某个分支</li><li>git branch &lt;新分支名称&gt; &lt;提交 ID&gt; 从提交历史恢复某个删掉的某个分支</li><li>git branch -m &lt;原分支名&gt; &lt;新分支名&gt; 分支更名</li><li>git checkout &lt;分支名&gt; 切换到本地某个分支</li><li>git checkout &lt;远程库名&gt;/&lt;分支名&gt; 切换到线上某个分支</li><li>git checkout -b &lt;新分支名&gt; 把基于当前分支新建分支，并切换为这个分支</li></ul><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><p>远程操作常见的命令：</p><ul><li>git fetch [remote] 下载远程仓库的所有变动</li><li>git remote -v 显示所有远程仓库</li><li>git pull [remote] [branch] 拉取远程仓库的分支与本地当前分支合并</li><li>git fetch 获取线上最新版信息记录，不合并</li><li>git push [remote] [branch] 上传本地指定分支到远程仓库</li><li>git push [remote] —force 强行推送当前分支到远程仓库，即使有冲突</li><li>git push [remote] —all 推送所有分支到远程仓库</li></ul><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><ul><li>git checkout [file] 恢复暂存区的指定文件到工作区</li><li>git checkout [commit] [file] 恢复某个<code>commit</code>的指定文件到暂存区和工作区</li><li>git checkout . 恢复暂存区的所有文件到工作区</li><li>git reset [commit] 重置当前分支的指针为指定<code>commit</code>，同时重置暂存区，但工作区不变</li><li>git reset —hard 重置暂存区与工作区，与上一次<code>commit</code>保持一致</li><li>git reset [file] 重置暂存区的指定文件，与上一次<code>commit</code>保持一致，但工作区不变</li><li>git revert [commit] 后者的所有变化都将被前者抵消，并且应用到当前分支</li></ul><p><code>reset</code>真实硬性回滚，目标版本后面的提交记录全部丢失了</p><p><code>revert</code>：同样回滚，这个回滚操作相当于一个提价，目标版本后面的提交记录也全部都有</p><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p>你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作，但又不想提交这些杂乱的代码，这时候可以将代码进行存储</p><ul><li>git stash 暂时将未提交的变化移除</li><li>git stash pop 取出储存中最后存入的工作状态进行恢复，会删除储存</li><li>git stash list 查看所有储存中的工作</li><li>git stash apply &lt;储存的名称&gt; 取出储存中对应的工作状态进行恢复，不会删除储存</li><li>git stash clear 清空所有储存中的工作</li><li>git stash drop &lt;储存的名称&gt; 删除对应的某个储存</li></ul><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p><code>git</code>常用命令速查表如下图所示：</p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10078.png" alt="git常用命令速查表"></p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://blog.coding327.top/archives/1a6eadde.html">SSH 连接 Github-个人也出了一篇</a><br><a href="https://www.runoob.com/git/git-remote-repo.html">SSH 连接 Github-菜鸟教程</a><br><a href="https://blog.coding327.top/archives/4ef28076.html">本地仓库连接远程仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重置样式表</title>
      <link href="/archives/5bb4c2fa.html"/>
      <url>/archives/5bb4c2fa.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <h2 id="重置样式表"><a href="#重置样式表" class="headerlink" title="重置样式表"></a>重置样式表</h2><h2 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">*&#123;<span class="attribute">box-sizing</span>: border-box;&#125;</span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">p</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">legend</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>&#123;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">html</span>&#123;<span class="attribute">font-family</span>:<span class="string">&quot;微软雅黑&quot;</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">background-color</span>:<span class="number">#eeeeee</span>;&#125;</span><br><span class="line"><span class="selector-class">.clear</span>:after&#123;content:<span class="string">&quot;&quot;</span>;<span class="attribute">display</span>:block;<span class="attribute">clear</span>:both;<span class="attribute">height</span>:<span class="number">0</span>;<span class="attribute">visibility</span>:hidden;<span class="attribute">overflow</span>:hidden;&#125;</span><br><span class="line"><span class="selector-class">.clear</span>&#123;zoom:<span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;<span class="attribute">list-style</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;<span class="attribute">vertical-align</span>:top;<span class="attribute">border</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">input</span>,select,<span class="selector-tag">button</span>,<span class="selector-tag">textarea</span>&#123;<span class="attribute">outline</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">textarea</span>&#123;<span class="attribute">resize</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;button&quot;</span>]</span>,<span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span>,<span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;file&quot;</span>]</span> &#123;<span class="attribute">cursor</span>:pointer;&#125;</span><br></pre></td></tr></table></figure><h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="comment">/*页面点击链接时，会出现高亮框，用此代码解决*/</span></span><br><span class="line">-webkit-tap-highlight-<span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">/*在谷歌里面小于12号的字，都会显示12号字，此代码解决此问题*/</span></span><br><span class="line">-webkit-text-size-adjust: none;</span><br><span class="line"><span class="comment">/*禁用手机浏览器的用户选择复制文本的功能*/</span></span><br><span class="line">-webkit-user-select: none;</span><br><span class="line">-webkit-<span class="attribute">box-sizing</span>:border-box;</span><br><span class="line"><span class="attribute">box-sizing</span>:border-box;&#125;</span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">html</span>,<span class="selector-tag">div</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">li</span>,<span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>: none;<span class="attribute">color</span>: <span class="number">#666</span>;&#125;</span><br><span class="line"><span class="selector-class">.clear</span>:after&#123;content:<span class="string">&quot;&quot;</span>;<span class="attribute">display</span>:block;<span class="attribute">clear</span>:both;<span class="attribute">overflow</span>:hidden;<span class="attribute">height</span>:<span class="number">0</span>;<span class="attribute">visibility</span>:hidden;&#125;</span><br><span class="line"><span class="selector-class">.clear</span>&#123;zoom: <span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;<span class="attribute">outline</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">input</span>::-webkit-input-placeholder &#123; color:red;&#125;</span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>&#123;<span class="attribute">list-style</span>: none;&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;<span class="attribute">vertical-align</span>: top;<span class="attribute">border</span>: <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云云开发初体验</title>
      <link href="/archives/3423649b.html"/>
      <url>/archives/3423649b.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <blockquote><p>第一次使用阿里云云开发，以搭建hexo-butterfly博客为例</p></blockquote><p>利用云开发平台搭建个人 Hexo 博客的好处:<br>不需要购买主机、不需要配置环境、不需要直接配置代码仓库<br>登陆<a href="https://workbench.aliyun.com">阿里云云开发平台</a></p><p>操作步骤：<br>从账号的创建到一键部署，手把手教你零基础创建个人博客，后续可以继续根据网上的教程来修改代码对博客进行定制化的美化</p><ol><li>点击主页上的登陆按钮登陆阿里云账号，没有账号注册后登陆即可<br>之后可能会有个创建团队之类的，随便填写即可</li><li>点击 创建应用，找到应用模板，按图选择 “Hexo 博客” 的模版进行下一步操作<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10056.png" alt="10056"></li></ol><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10058.png" alt="10058"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10059.png" alt="10059"></p><blockquote><hr></blockquote><ul><li><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10060.png" alt="10060"></li></ul><ol><li>这个服务根据情况开通</li></ol><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10061.png" alt="10061"></p><blockquote><p>上面图片中下方有个API网关，部署是需要开通这个的</p></blockquote><ol><li>进入在线开发环境，照着下图安装依赖即可</li></ol><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10062.png" alt="10062"></p><blockquote><hr></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10063.png" alt="10063"></p><ol><li>如何进行预览，预览需要配置端口号</li></ol><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10064.png" alt="10064"></p><blockquote><p>预览成功如下图</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10065.png" alt="10065"></p><ol><li>如何进行部署，按下图操作</li></ol><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10066.png" alt="10066"></p><blockquote><p>回到开发部署那里</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10067.png" alt="10067"></p><blockquote><p>部署成功后访问域名即可</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10068.png" alt="10068"></p><ol><li>关于绑定自定义域名【记得线上环境~】：</li></ol><p>域名解析：<br>在我们在线开发环境中，它给了我们解析值，去域名控制台根据你个人喜好自定义一个二级域名，把刚刚值填上去即可</p><p>绑定域名：<br>在开发部署那里点击api开发实例，进入如下图页面</p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10069.png" alt="10069"></p><p>右边会有个绑定域名，点击把你的自定义二级域名填上去即可</p><ol><li>之后访问自定义域名即可访问你的博客</li></ol><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10065.png" alt="10065"></p><ol><li>最后博客美化这块网上已经有大部分教程了，但是每个人爱好都是不一样的，自己去摸索才会感受到搭建博客真正的乐趣吧！</li></ol>]]></content>
      
      
      <categories>
          
          <category> 云开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN检测</title>
      <link href="/archives/ec81eefa.html"/>
      <url>/archives/ec81eefa.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <blockquote><p>验证网站是否使用了CDN加速服务</p></blockquote><h2 id="通过CMD命令窗口，输入nslookup命令来验证"><a href="#通过CMD命令窗口，输入nslookup命令来验证" class="headerlink" title="通过CMD命令窗口，输入nslookup命令来验证"></a>通过CMD命令窗口，输入<code>nslookup</code>命令来验证</h2><p>使用<code>nslookup</code>查看域名解析对应的IP地址，如果解析到多个IP地址则说明使用了CDN加速服务</p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10054.png" alt="10054"></p><h2 id="通过站长工具来检测"><a href="#通过站长工具来检测" class="headerlink" title="通过站长工具来检测"></a>通过站长工具来检测</h2><p><a href="https://ping.chinaz.com/">站长工具网址</a></p><p>输入域名进行Ping检查，下方会有CDN提供商和多个ip说明使用了CDN加速服务</p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10055.png" alt="10055"></p>]]></content>
      
      
      <categories>
          
          <category> CDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地仓库连接Github远程仓库</title>
      <link href="/archives/4ef28076.html"/>
      <url>/archives/4ef28076.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <h2 id="本地仓库连接远程仓库"><a href="#本地仓库连接远程仓库" class="headerlink" title="本地仓库连接远程仓库"></a>本地仓库连接远程仓库</h2><blockquote><p>新建仓库就不细说了，主要是<strong>不要添加任何文件</strong><br>像 README 文件和 LICENSE 文件后面再创建<br>如果没有添加任何文件，创建完仓库后就会出现如下图：</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10050.png" alt="10050"></p><p>上面出现了很多 git 相关命令，只有空仓库才会出现，所以说前面创建时不要添加任何文件</p><blockquote><p>回到咱们本地项目根目录，首先对于项目进行初始化得到.git 文件即本地仓库</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><strong>这里可能会有一个问题，github 目前已经将默认分支从 master 修改为 main 分支了</strong><br>我们在本地依旧是 master 分支，分支对接上会有问题<br>说一下我的解决方案：<br><strong>方案 A</strong>：按照仓库上面命令操作[git add 这里我改为了提交所有，和方案 C 差不太远<strong>需要先提交到本地仓库</strong>]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init    # 项目初始化，上面做了这里就不用做了</span><br><span class="line">git add .   # 提交到暂存区</span><br><span class="line">git commit -m &quot;first commit&quot;    # 提交到本地仓库</span><br><span class="line">git branch -M main # 在初始化时实际上已经有一个默认主分支master了，这条命令就是修改默认主分支名为main</span><br><span class="line">git remote add origin 你的SSH仓库地址   # 如果你没做SSH连接github，下方有链接</span><br><span class="line">git push -u origin main    # 推送到远程仓库并指定默认推送分支为main分支，下次git push默认推送到main分支</span><br></pre></td></tr></table></figure><blockquote><p>对接远程仓库，需要去远程仓库复制 SSH 仓库地址，选择 SSH 是因为不需要每次都输入 github 密码，而且安全<br>如果你没有做 SSH 连接 github，给大家推个链接，写得很详细【个人也出了一篇，不过放在<a href="https://blog.coding327.top/archives/1a6eadde.html">git 与 github 基本使用流程</a>中了】</p></blockquote><p><a href="https://blog.csdn.net/weixin_48349367/article/details/120056192">Windows 系统 SSH 连接 github</a></p><p><strong>方案 B</strong>: 可以选择修改默认分支名<strong>以下两种任意选一种</strong>即可</p><ul><li>创建远程仓库前处理好，可以在<code>Github</code>个人设置里修改默认分支为<code>master</code>；</li><li>如果已经创建远程仓库，我们<code>git init</code>也还未初始化本地仓库，可以修改本地仓库默认分支为<code>main</code></li></ul><p>本地默认分支名修改命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global init.defaultBranch main</span><br></pre></td></tr></table></figure><p>todo: 有时间单独出一篇吧，SSH 连接和远程仓库修改默认分支名！<br>目前 SSH 连接这期文章已出，<a href="https://blog.coding327.top/archives/1a6eadde.html">SSH 连接</a></p><p><strong>方案 C</strong>: 和方案 A 差不太远，如果你<strong>还没提交到本地仓库</strong>，可以玩下这个命令</p><ul><li><code>git init</code>也做了，那还可以使用分支改名，把分支名<code>master</code>改为<code>main</code></li></ul><blockquote><p>这里我们使用方案 C【因为我的远程默认分支就是使用 main 分支】</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -m master main</span><br><span class="line">或</span><br><span class="line">git branch -M master main  # -M强制重命名</span><br></pre></td></tr></table></figure><blockquote><p>再推一次~<br>对接远程仓库，需要去远程仓库复制 SSH 仓库地址，选择 SSH 是因为不需要每次都输入 github 密码，而且安全<br>如果你没有做 SSH 连接 github，给大家推个链接，写得很详细【个人也出了一篇，不过放在<a href="https://blog.coding327.top/archives/1a6eadde.html">git 与 github 基本使用流程</a>中了】</p></blockquote><p><a href="https://blog.csdn.net/weixin_48349367/article/details/120056192">SSH 连接 github</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 仓库SSH地址</span><br></pre></td></tr></table></figure><blockquote><p>git 三连</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;xxx你做了哪些修改，可以把描述型话放这里&quot;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><blockquote><p>初始推送远程仓库需要 git push -u origin main 是因为要指定推送远程仓库某某分支，以后推送使用 git push 默认<br>推送到你所指定的这个分支</p></blockquote><p>至此方案 C 也就结束了，可以刷新一下查看远程仓库是否推送成功</p><blockquote><p>README.md 我们只需要在本地仓库创建可以写点内容然后 git 三连即可<br>LICENSE 证书怎么搞，这个去远程仓库创建一个 LICENSE 文件，按照下方操作即可</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10052.png" alt="10052"></p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10053.png" alt="10053"></p><blockquote><p>选择好了后，点击右边提交，最后提交本次更改即可</p><p>由于远程仓库多了一个 LICENSE 文件，远程仓库相当于版本高于本地仓库，这时候回到本地仓库重新拉取一下即可</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React笔记(十四)</title>
      <link href="/archives/e079f441.html"/>
      <url>/archives/e079f441.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">eg：代表代码对照</mark> <mark class="hl-label pink">若文章有误，欢迎读者留言反馈</mark> <h2 id="useCallback【记忆函数】"><a href="#useCallback【记忆函数】" class="headerlink" title="useCallback【记忆函数】"></a>useCallback【记忆函数】</h2><p>【记忆函数，实现了类似记忆组件、计算属性的功能，也能进行scu优化】</p><blockquote><p><code>useCallback</code>记忆函数，效果类似记忆组件<code>memoize-one</code>，把某个函数进行缓存，然后把当前函数体返回给你</p></blockquote><ol><li>正常情况下，父组件中当前数据改变，当前父组件无条件刷新，当然子组件也随之刷新，当前子组件依赖的数组没有发生改变，咱么就可以通过scu技术，不让他刷新</li></ol><blockquote><p>parent.jsx父组件</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入useState、useCallback两个hooks</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, useCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// useCallback，记忆函数，效果类似记忆组件，memoize-one,把某个函数进行缓存，然后把当前函数体返回给你。</span></span><br><span class="line"><span class="comment">// 作用：如果子组件传入的有函数，scu会被打破。可以对函数进行useCallback缓存，这样scu就又生效了</span></span><br><span class="line"><span class="comment">// 函数组件内容可以看成类组件render的语法糖。</span></span><br><span class="line"><span class="keyword">const</span> Parent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = useState(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> [arr, setArr] = useState([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123; /* 正常情况下，父组件中当前数据改变，当前父组件无条件刷新，当然子组件也随之刷新 */ &#125;</span></span><br><span class="line"><span class="xml">            &#123;/* 当前数据改变，当前组件无条件刷新，当然子组件也随之刷新 */&#125;</span></span><br><span class="line"><span class="xml">            &#123;/* 当前子组件依赖的数组没有发生改变，咱么就可以通过scu技术，不让他刷新 */&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNum(num + 1)&#125;&gt;点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Child</span> <span class="attr">arr</span>=<span class="string">&#123;arr&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent</span><br></pre></td></tr></table></figure><blockquote><p>Child.jsx子组件</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入memo高阶组件【浅比较】</span></span><br><span class="line"><span class="keyword">import</span> React,&#123;memo&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意传入props来接收父组件中的数据</span></span><br><span class="line"><span class="keyword">const</span> Child = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Child刷新了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.arr&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接使用memo高阶组件来给函数组件添加一个scu效果</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> memo(Child)</span><br></pre></td></tr></table></figure><ol><li>如果给子组件传递个函数进去，就算是依赖的数据和函数没有变化，scu也会被打破，子组件被动随着这个函数刷新[尽管它没执行]</li></ol><blockquote><p>问题：每次组件刷新，组件里面的执行函数都会从新创建，所以刷新前后不是同一函数</p><p>分析问题：这里多说一句，一般把<strong>函数式组件理解为class组件render函数的语法糖</strong>，所以每次重新渲染的时候，函数式组件内部所有的代码都会重新执行一遍。所以上述代码中每次render，handleClick都会是一个新的引用，所以也就是说传递给SomeComponent组件的props.onClick一直在变(因为每次都是一个新的引用)，所以才会说这种情况下，函数组件在每次渲染的时候如果有传递函数的话都会重渲染子组件。</p><p>解决方法：有了<code>useCallback</code>就不一样了，你可以通过<code>useCallback</code>获得一个记忆后的函数，那么改变父组件中的num就不会影响子组件刷新，因为函数也做了缓存，注意子组件也要使用memo高阶组件</p></blockquote><p>parent.jsx父组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入useState、useCallback两个hooks</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, useCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// useCallback，记忆函数，效果类似记忆组件，memoize-one,把某个函数进行缓存，然后把当前函数体返回给你。</span></span><br><span class="line"><span class="comment">// 作用：如果子组件传入的有数据和函数，scu会被打破。可以对函数进行useCallback缓存，这样scu就又生效了</span></span><br><span class="line"><span class="comment">// 函数组件内容可以看成类组件render的语法糖。</span></span><br><span class="line"><span class="keyword">const</span> Parent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = useState(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> [arr, setArr] = useState([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">    <span class="comment">// const handleAdd = () =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     setArr([...arr, 5])</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 使用useCallback进行scu优化[缓存了arr，如果arr发生改变就会重新刷新子组件]</span></span><br><span class="line">    <span class="keyword">const</span> handleAdd = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        setArr([...arr, <span class="number">5</span>])</span><br><span class="line">    &#125;, [arr]) <span class="comment">//第二参数有依赖性 变量改变触发第一个函数</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123; /* 正常情况下，父组件中当前数据改变，当前父组件无条件刷新，当然子组件也随之刷新 */ &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNum(num + 1)&#125;&gt;点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;/* 当前数据改变，当前组件无条件刷新，当然子组件也随之刷新 */&#125;</span></span><br><span class="line"><span class="xml">            &#123;/* 当前子组件依赖的数组没有发生改变，咱么就可以通过scu技术，不让他刷新 */&#125;</span></span><br><span class="line"><span class="xml">            &#123;/* 如果给子组件传递个函数进去，就算是依赖的数据和函数没有变化，scu也会被打破，子组件被动随着这个函数刷新[尽管它没执行] */&#125;</span></span><br><span class="line"><span class="xml">            &#123;/* 问题：每次组件刷新，组件里面的执行函数都会从新创建，所以刷新前后不是同一函数 */&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Child</span> <span class="attr">arr</span>=<span class="string">&#123;arr&#125;</span> <span class="attr">handleAdd</span>=<span class="string">&#123;handleAdd&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent</span><br></pre></td></tr></table></figure><p>Child.jsx子组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入memo高阶组件【浅比较】</span></span><br><span class="line"><span class="keyword">import</span> React,&#123;memo&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意传入props来接收父组件中的数据</span></span><br><span class="line"><span class="keyword">const</span> Child = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Child刷新了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.arr&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.handleAdd&#125;</span>&gt;</span>点击改变父组件中的arr<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接使用memo高阶组件来给函数组件添加一个scu效果</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> memo(Child)</span><br></pre></td></tr></table></figure><h2 id="userMemo【记忆组件，不需要scu】"><a href="#userMemo【记忆组件，不需要scu】" class="headerlink" title="userMemo【记忆组件，不需要scu】"></a>userMemo【记忆组件，不需要scu】</h2><blockquote><p><code>useCallback</code>的功能完全可以由<code>useMemo</code>所取代，如果你想通过使用<code>useMemo</code>返回一个记忆函数也是完全可以的<br>所以前面使用<code>useCallback</code>的例子可以使用<code>useMemo</code>进行改写：</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用useMemo对某个数据进行缓存，强调的是结果值</span></span><br><span class="line"><span class="keyword">const</span> handleAdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setArr([...arr, <span class="number">5</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> child = useMemo(<span class="function">()=&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">arr</span>=<span class="string">&#123;</span> <span class="attr">arr</span> &#125; <span class="attr">handleAdd</span>=<span class="string">&#123;</span> <span class="attr">handleAdd</span> &#125;/&gt;</span></span>,[arr])</span><br></pre></td></tr></table></figure><p>parent.jsx父组件<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入useState、useCallback、useMemo三个hooks</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, useCallback, useMemo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// useCallback，记忆函数，效果类似记忆组件，memoize-one,把某个函数进行缓存，然后把当前函数体返回给你。</span></span><br><span class="line"><span class="comment">// 作用：如果子组件传入的有数据和函数，scu会被打破。可以对函数进行useCallback缓存，这样scu就又生效了</span></span><br><span class="line"><span class="comment">// 函数组件内容可以看成类组件render的语法糖。</span></span><br><span class="line"><span class="keyword">const</span> Parent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = useState(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> [arr, setArr] = useState([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">    <span class="comment">// const handleAdd = () =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     setArr([...arr, 5])</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 使用useCallback进行scu优化[缓存了arr，如果arr发生改变就会重新刷新子组件]</span></span><br><span class="line">    <span class="comment">// const handleAdd = useCallback(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     setArr([...arr, 5])</span></span><br><span class="line">    <span class="comment">// &#125;, [arr]) //第二参数有依赖性 变量改变触发第一个函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用useMemo来实现useCallback的功能</span></span><br><span class="line">    <span class="keyword">const</span> handleAdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        setArr([...arr, <span class="number">5</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> child = useMemo(<span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">arr</span>=<span class="string">&#123;arr&#125;</span> <span class="attr">handleAdd</span>=<span class="string">&#123;handleAdd&#125;</span> /&gt;</span></span>, [arr])</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123; /* 正常情况下，父组件中当前数据改变，当前父组件无条件刷新，当然子组件也随之刷新 */&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNum(num + 1)&#125;&gt;点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;/* 当前数据改变，当前组件无条件刷新，当然子组件也随之刷新 */&#125;</span></span><br><span class="line"><span class="xml">            &#123;/* 当前子组件依赖的数组没有发生改变，咱么就可以通过scu技术，不让他刷新 */&#125;</span></span><br><span class="line"><span class="xml">            &#123;/* 如果给子组件传递个函数进去，就算是依赖的数据和函数没有变化，scu也会被打破，子组件被动随着这个函数刷新[尽管它没执行] */&#125;</span></span><br><span class="line"><span class="xml">            &#123;/* 问题：每次组件刷新，组件里面的执行函数都会从新创建，所以刷新前后不是同一函数 */&#125;</span></span><br><span class="line"><span class="xml">            &#123;/* <span class="tag">&lt;<span class="name">Child</span> <span class="attr">arr</span>=<span class="string">&#123;arr&#125;</span> <span class="attr">handleAdd</span>=<span class="string">&#123;handleAdd&#125;</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">            &#123;/* 使用useMemo来实现useCallback的功能，落脚点传递的是值，同时也不需要scu */&#125;</span></span><br><span class="line"><span class="xml">            &#123;child&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent</span><br></pre></td></tr></table></figure></p><p>Child.jsx子组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意传入props来接收父组件中的数据</span></span><br><span class="line"><span class="keyword">const</span> Child = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Child刷新了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.arr&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.handleAdd&#125;</span>&gt;</span>点击改变父组件中的arr<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Child</span><br></pre></td></tr></table></figure><p>唯一的区别是：<strong>useCallback 不会执行第一个参数函数，而是将它返回给你，而 useMemo 会执行第一个函数并且将函数执行结果返回给你。</strong>所以在前面的例子中，可以返回 handleClick 来达到存储函数的目的。</p><p>所以 useCallback 常用记忆事件函数，生成记忆后的事件函数并传递给子组件使用。而 useMemo 更适合经过函数计算得到一个确定的值，比如记忆组件。</p><p>从例子可以看出来，useMemo只有在第二个参数数组的值发生变化时，才会触发子组件的更新。</p><h2 id="useRef【保存引用值】"><a href="#useRef【保存引用值】" class="headerlink" title="useRef【保存引用值】"></a>useRef【保存引用值】</h2><ol><li>受控组件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入useRef、useState两个hooks</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useRef, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// useRef  等同类组件间中 createRef</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">UseRefDemo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> [name, setName] = useState(<span class="string">&#x27;&#x27;</span>)  <span class="comment">// 1.受控组件的案例</span></span><br><span class="line">    <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//获取元素的值  受控组件</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;name&#x27;</span>, name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onInput</span>=<span class="string">&#123;(e)</span> =&gt;</span> setName(e.target.value)&#125; type=&quot;text&quot; /&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>非受控组件ref</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入useRef、useState两个hooks</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useRef, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// useRef  等同类组件间中 createRef</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">UseRefDemo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myName = useRef() <span class="comment">// 1.创建一个ref案例</span></span><br><span class="line">    <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取元素的值  ref</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;myName&#x27;</span>, myName.current.value) <span class="comment">// 获取input元素里面的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;myName&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UseImperativeHandleDemo【透传，了解即可】"><a href="#UseImperativeHandleDemo【透传，了解即可】" class="headerlink" title="UseImperativeHandleDemo【透传，了解即可】"></a>UseImperativeHandleDemo【透传，了解即可】</h2><p>通过 useImperativeHandle 用于让父组件获取子组件内的索引，这种方式，App 组件可以获得子组件的 input 的 DOM 节点。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入useRef、useEffect、useImperativeHandle、forwardRef四个hooks</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useRef, useEffect, useImperativeHandle, forwardRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="comment">// useImperativeHandle 透传ref，把父组件的ref传递给子组件，子组件通过hooks，跟自己的ref绑定。</span></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ChildInputComponent</span>(<span class="params">props, ref</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> inputRef = useRef(<span class="literal">null</span>)</span><br><span class="line">    <span class="comment">// 把父组件的ref透传给子组件的ref，把父子ref进行管理</span></span><br><span class="line">    useImperativeHandle(ref, <span class="function">() =&gt;</span> inputRef.current)</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;child input&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ChildInput = forwardRef(ChildInputComponent)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> inputRef = useRef(<span class="literal">null</span>)</span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// inputRef.current获取子组件的实例</span></span><br><span class="line">        inputRef.current.focus()<span class="comment">//子组件中的input框进行focus聚焦</span></span><br><span class="line">    &#125;, [])</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>透传<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ChildInput</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><h2 id="自定义hooks"><a href="#自定义hooks" class="headerlink" title="自定义hooks"></a>自定义hooks</h2><p>自定义hooks是在<code>react-hooks</code>基础上的一个拓展，可以根据业务需要制定满足业务需要的hooks，更注重的是逻辑单元。通过业务场景不同，我们到底需要<code>react-hooks</code>做什么，怎么样把一段逻辑封装起来，做到复用，这是自定义hooks产生的初衷。</p><p>我们设计的自定义<code>react-hooks</code>应该是长的这样的。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [ xxx , ... ] = useXXX(参数A,参数B...)</span><br></pre></td></tr></table></figure><blockquote><p>在我们在编写自定义hooks的时候，要关注的是<strong>传进去什么</strong>，<strong>返回什么</strong>。返回的东西是我们真正需要的。更像一个工厂，把原材料加工，最后返回我们。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useMemo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = useState(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> [arr, setArr] = useState([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">    <span class="comment">//  需求：通过实现一个hooks，把数据小写转大写</span></span><br><span class="line">    <span class="keyword">var</span> newArr = useCallUpperCase(arr)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;/* <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> ()=&gt;</span>setNum(num+1) &#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setArr([...arr, &#x27;e&#x27;])&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;</span></span><br><span class="line"><span class="xml">                    newArr.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义hooks说白了就是具有某些特殊功能的一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useCallUpperCase</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//考虑 如果arr没有发生改变，函数就可以不用重复执行</span></span><br><span class="line">    <span class="keyword">return</span> useMemo(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;调用&#x27;</span>)  <span class="comment">//测试有没有缓存</span></span><br><span class="line">        <span class="keyword">return</span> arr.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> item.toUpperCase()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, [arr])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React笔记(十三)</title>
      <link href="/archives/1a3a1b4e.html"/>
      <url>/archives/1a3a1b4e.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">eg：代表代码对照</mark> <mark class="hl-label pink">若文章有误，欢迎读者留言反馈</mark> <h2 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h2><blockquote><p>函数式编程变成越来越流行，函数组件通过hooks也能像类组件保存数据状态，使用类似生命周期函数，</p><p>Hooks【钩子，把功能拿过来用】简介：<br>在<code>React</code>的世界中，有容器组件和<code>UI</code>组件之分，在<code>React Hooks</code>出现之前，<code>UI</code>组件我们可以使用函数，无状态组件来展示<code>UI</code>，而对于容器组件，函数组件就显得无能为力，我们依赖于类组件来获取数据，处理数据，并向下传递参数给<code>UI</code>组件进行渲染。在我看来，使用<code>React Hooks</code>相比于从前的类组件有以下几点好处：</p></blockquote><ol><li>代码可读性更强，原本同一块功能的代码逻辑被拆分在了不同的生命周期函数中，容易使开发者不利于维护和迭代，通过<code>React Hooks</code>可以将功能代码聚合，方便阅读维护</li><li>组件树层级变浅，在原本的代码中，我们经常使用<code>HOC/render props</code>等方式来复用组件的状态，增强功能等，无疑增加了组件树层数及渲染，而在<code>React Hooks</code>中，这些功能都可以通过强大的自定义的<code>Hooks</code>来实现</li></ol><h2 id="useState保存数据状态【实习了类似state】"><a href="#useState保存数据状态【实习了类似state】" class="headerlink" title="useState保存数据状态【实习了类似state】"></a>useState保存数据状态【实习了类似state】</h2><blockquote><p>函数组件不能放数据状态，没有生命周期，没有实例，没有this，使用useState这个钩子函数</p><p>对比之前类组件保存组件状态</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">arr</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>类组件与函数组件使用hooks对比<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>类组件遍历<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        this.state.arr.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                            return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#125;)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ClassComponent</span><br></pre></td></tr></table></figure><p>通过传入 useState 参数后返回一个带有默认状态和改变状态函数的数组。通过传入新状态给函数来改变原本的状态值。**值得注意的是 useState 不帮助你处理状态，相较于 setState 非覆盖式更新状态，useState 覆盖式更新状态，需要开发者自己处理逻辑。</p><blockquote><p>函数组件使用useState</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入useState这个钩子</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// useState 赋予我们的函数组件具有使用数据状态的功能</span></span><br><span class="line"><span class="keyword">const</span> ClassComponent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// arr是数据状态，状态名自定义，useState参数就是变量的初始值</span></span><br><span class="line">    <span class="keyword">const</span> [arr] = useState([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment">// 通过useState这个hooks来赋予函数组件可以放数据状态的功能。</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>类组件与函数组件使用hooks对比<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>函数组件遍历<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;</span></span><br><span class="line"><span class="xml">                    arr.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ClassComponent</span><br></pre></td></tr></table></figure><blockquote><p>useState工作中常用语法</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入useState这个钩子</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UseStateDemo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// num是数据状态  setNum用来修改数据状态  useState参数就是变量的初始值</span></span><br><span class="line">    <span class="comment">// setNum是用来更新前面的变量的值，你需要传入的新的数据，也需要遵循不可变值。可以做scu性能优化</span></span><br><span class="line">    <span class="comment">// 数字类型</span></span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = useState(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 布尔值</span></span><br><span class="line">    <span class="keyword">const</span> [bool, setBool] = useState(<span class="literal">false</span>)</span><br><span class="line">    <span class="comment">// 字符串类型</span></span><br><span class="line">    <span class="keyword">const</span> [str, setStr] = useState(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="comment">// 数组</span></span><br><span class="line">    <span class="keyword">const</span> [arr, setArr] = useState([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">    <span class="comment">// 对象</span></span><br><span class="line">    <span class="keyword">const</span> [obj, setObj] = useState(&#123;<span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>useState基本使用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;/* 数字类型 */&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>num值：&#123;num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;/* 传参和类组件一样也需要回调 */&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNum(num + 1)&#125;&gt;点击num加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;/* 布尔值 */&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>bool值：&#123;JSON.stringify(bool)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setBool(!bool)&#125;&gt;点击取反<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;/* 字符串类型 */&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>str值：&#123;str&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setStr(str+&#x27;world&#x27;)&#125;&gt;点击拼接world<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;/* 数组 */&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>arr值：&#123;arr&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setArr([...arr, 5])&#125;&gt;点击往arr里添加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;/* 对象 */&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>对象值：&#123;JSON.stringify(obj)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;/* 使用...对象覆盖，遵循不可变值， */&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setObj(&#123;...obj, name: &#x27;小红&#x27;&#125;)&#125;&gt;点击修改对象里的name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> UseStateDemo</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>似乎有了<code>useState</code>后，函数组件也可以拥有自己的状态了，但仅仅是这样完全不够。</p><h2 id="useEffect处理副作用【实现了类似监听和生命周期】"><a href="#useEffect处理副作用【实现了类似监听和生命周期】" class="headerlink" title="useEffect处理副作用【实现了类似监听和生命周期】"></a>useEffect处理副作用【实现了类似监听和生命周期】</h2><blockquote><p><code>useEffect</code>处理副作用，在组件渲染节点的同时可以做一些我们自己的逻辑，我们就叫副作用。</p></blockquote><ol><li>useEffect 用法1</li></ol><blockquote><p>说明：类似于watch监听，但是useEffect首次会执行一次里面回调函数，而watch则不会，可以设置immediate:true就能首次监听了</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入useState、useEffect两个hooks</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// useEffect 处理副作用，在组件渲染节点的同时可以做一些我们自己的逻辑，我们就叫副作用。</span></span><br><span class="line"><span class="keyword">const</span> UseEffectDemo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = useState(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> [str, setStr] = useState(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">    <span class="comment">// useEffect 用法1 类似于watch监听，但是useEffect首次会执行一次里面回调函数，而watch则不会，可以设置immediate:true就能首次监听了</span></span><br><span class="line">    <span class="comment">// 参数1，回调函数，在参数数组中依赖的变量发生改变的时候就执行。</span></span><br><span class="line">    <span class="comment">// 参数2. 数组中放我们的依赖项，可以放多个值，有任意一个改变，参数1回调执行。</span></span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我被调用了&#x27;</span>) <span class="comment">// 初始执行一次，然后每次点击都会执行</span></span><br><span class="line">    &#125;, [num, str])</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>useEffect处理副作用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNum(num + 1)&#125;&gt;点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> UseEffectDemo</span><br></pre></td></tr></table></figure><ol><li>useEffect 用法2</li></ol><blockquote><p>说明：参数2是空数组情况下，可以当做生命周期componentDidMount 挂载后来使用,挂载后会自执行一次，由于没有依赖项，也就不会再执行里面回调</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入useState、useEffect两个hooks</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// useEffect 处理副作用，在组件渲染节点的同时可以做一些我们自己的逻辑，我们就叫副作用。</span></span><br><span class="line"><span class="keyword">const</span> UseEffectDemo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = useState(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> [str, setStr] = useState(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">    <span class="comment">// useEffect参数1，回调函数，在参数数组中依赖的变量发生改变的时候就执行</span></span><br><span class="line">    <span class="comment">// useEffect 用法2 参数2是空数组情况下，可以当做生命周期componentDidMount 挂载后来使用,挂载后会自执行一次，由于没有依赖项，也就不会再执行里面回调</span></span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我被调用了&#x27;</span>) <span class="comment">// 只会在初始挂载后执行一次，之后点击不再执行</span></span><br><span class="line">    &#125;, [])</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>useEffect处理副作用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNum(num + 1)&#125;&gt;点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> UseEffectDemo</span><br></pre></td></tr></table></figure><ol><li>useEffect 用法3</li></ol><blockquote><p>说明：空着不写参数2的情况下，组件更新就会调用一次，当做componentDidUpdate更新后生命周期来使用</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入useState、useEffect两个hooks</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// useEffect 处理副作用，在组件渲染节点的同时可以做一些我们自己的逻辑，我们就叫副作用。</span></span><br><span class="line"><span class="keyword">const</span> UseEffectDemo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = useState(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> [str, setStr] = useState(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">    <span class="comment">// useEffect参数1，回调函数，在参数数组中依赖的变量发生改变的时候就执行</span></span><br><span class="line">    <span class="comment">// useEffect 用法3 参数2 空着不写参数2的情况下，组件更新就会调用一次，当做componentDidUpdate更新后生命周期来使用</span></span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;被调用了&#x27;</span>) <span class="comment">// 初始执行一次，每次点击数据更新都会执行</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>useEffect处理副作用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNum(num + 1)&#125;&gt;点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> UseEffectDemo</span><br></pre></td></tr></table></figure><ol><li>useEffect 用法4</li></ol><blockquote><p>说明：参数1 回调中的return后面的函数中可以做清除计时器，dom事件，自定义事件等清理工作</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 计时器 自定事件 dom事件 需要手动清除</span></span><br><span class="line">    <span class="comment">// 在return个回调，回调里面做清除计时器，dom事件，自定义事件等清理工作</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// useEffect 参数1 回调中的return后面的函数中可以做清除计时器，dom事件，自定义事件等清理工作</span></span><br><span class="line">        <span class="comment">// 相当于react生命周期中的 componentWillUnmount 销毁前</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, [num])</span><br></pre></td></tr></table></figure><h2 id="useContext【实现了类似跨层级通信】"><a href="#useContext【实现了类似跨层级通信】" class="headerlink" title="useContext【实现了类似跨层级通信】"></a>useContext【实现了类似跨层级通信】</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入createContext、useState、useContext三个hooks</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; createContext, useState, useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个全局的context【不要把类组件的全局context和函数组件的全局context变量名设置为相同，会冲突，项目中会抽离到一个context.js文件中，这时数据源和接收数据的组件都要引入context】</span></span><br><span class="line"><span class="keyword">var</span> context = createContext()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">const</span> ContextDemo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [arr, setArr] = useState([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            // 父组件向后提供数据需要使用context.Provider，设置value属性往后传递数据即可</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;arr&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Child1</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">context.Provider</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ContextDemo</span><br><span class="line"></span><br><span class="line"><span class="comment">// 儿子组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>儿子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Child2</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 孙子组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// useContext参数是定义好的全局Context，直接调用就可以获取到祖先组件传递的值</span></span><br><span class="line">    <span class="keyword">var</span> arr = useContext(context)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>孙子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;arr&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="useReducer【实现了类似Redux-React-Redux】"><a href="#useReducer【实现了类似Redux-React-Redux】" class="headerlink" title="useReducer【实现了类似Redux/React-Redux】"></a>useReducer【实现了类似Redux/React-Redux】</h2><blockquote><p><code>useReducer</code>这个<code>Hooks</code>在使用上几乎跟<code>Redux/React-Redux</code>一模一样，唯一缺少的就是无法使用<code>redux</code>提供的中间件，<code>redux</code>可以通过中间件来增加的，<code>redux-thunk</code>中间件可以书写异步。<code>useReducer</code>是<code>redux</code>的简化版，不支持异步</p><p>用法跟<code>Redux</code>基本上是一致的，用法也很简单，算是提供一个<code>mini</code>的<code>Redux</code>版本</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入useReducer这个hooks</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// redux初始值【与store里的defaultState一样】</span></span><br><span class="line"><span class="keyword">const</span> initState = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 书写逻辑reducer</span></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state, actions</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里也是可以替换为switch的，actions.type规则，通过对象dispatch触发规则，满足就执行这个</span></span><br><span class="line">    <span class="keyword">if</span> (actions.type === <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// actions.val拿到传递的值</span></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">num</span>: state.num + actions.val &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (actions.type === <span class="string">&#x27;sub&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">num</span>: state.num - actions.val &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;没有这个操作&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UseReducerDemo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用useReducer，参数1，放入一个reducer函数，同样这个reducer也是state的修改逻辑</span></span><br><span class="line">    <span class="comment">// 参数2，initState就是state的默认值、初始值。</span></span><br><span class="line">    <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initState)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>简化版redux用法<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;state.num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123; /* dispatch派送一个对象，里面有规则和传递数据 */ &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123;type: &#x27;add&#x27;, val: 1&#125;)&#125;&gt;点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123;type: &#x27;sub&#x27;, val: 1&#125;)&#125;&gt;点击-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> UseReducerDemo</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React笔记(十二)</title>
      <link href="/archives/64c93b65.html"/>
      <url>/archives/64c93b65.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">eg：代表代码对照</mark> <mark class="hl-label pink">若文章有误，欢迎读者留言反馈</mark> <h2 id="CSS-in-JS技术"><a href="#CSS-in-JS技术" class="headerlink" title="CSS-in-JS技术"></a>CSS-in-JS技术</h2><h3 id="CSS-in-JS简介"><a href="#CSS-in-JS简介" class="headerlink" title="CSS-in-JS简介"></a>CSS-in-JS简介</h3><blockquote><p> CSS-in-JS是一种技术，而不是一个具体的库实现。简单来说CSS-in-JS就是将应用的CSS样式写在JavaScript文件里面，而不是独立为一些css，scss或less之类的文件，这样你就可以在CSS中使用一些属于JS的诸如模块声明，变量定义，函数调用和条件判断等语言特性来提供灵活的可扩展的样式定义。CSS-in-JS在React社区的热度是最高的，这是因为React本身不会管用户怎么去为组件定义样式的问题，而Vue有属于框架自己的一套定义样式的方案。</p><p> styled-components 应该是CSS-in-JS最热门的一个库，通过styled-components，你可以使用ES6的标签模板字符串语法，为需要styled-Component定义一系列CSS属性，当该组件的JS代码被解析执行的时候，styled-components会动态生成一个CSS选择器，并把对应的CSS样式通过style标签的形式插入到head标签里面。动态生成的CSS选择器会有一小段哈希值来保证全局唯一性来避免样式发生冲突。</p><p>普通外链样式写法 css less sass都是这么用</p></blockquote><p><code>import &#39;./demo.css&#39;</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入css模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./demo.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StyledDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>StyledDemo<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;box1&#x27;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="学习使用CSS-in-JS"><a href="#学习使用CSS-in-JS" class="headerlink" title="学习使用CSS-in-JS"></a>学习使用CSS-in-JS</h3><p><strong>用js代码来取代css样式代码，常见，样式文件后缀名应为js或者jsx</strong></p><blockquote><p>安装插件</p></blockquote><p><code>npm i -S styled-components</code></p><blockquote><p>定义样式，引入styled，css-in-js技术，样式写在js文件或者jsx文件中</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入styled，css-in-js技术，样式写在js文件或者jsx文件中</span></span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DivStyled是导出的样式组件名   styled.div将要替换一个div</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DivStyled = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  background-color: red;</span></span><br><span class="line"><span class="string">  font-size: 20px;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="comment">// 第二个div样式组件继承DivStyled    eg：有公共样式的时候，可以直接继承过来</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DivStyled2 = styled(DivStyled)<span class="string">`</span></span><br><span class="line"><span class="string">  /* background-color: red;</span></span><br><span class="line"><span class="string">  font-size: 20px; */</span></span><br><span class="line"><span class="string">  height: 40px;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><blockquote><p>组件中使用<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入styled.css中的样式组件名，作为标签使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; DivStyled, DivStyled2 &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StyledDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>StyledDemo<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">DivStyled</span>&gt;</span>123<span class="tag">&lt;/<span class="name">DivStyled</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">DivStyled2</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">DivStyled2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> StyledDemo</span><br></pre></td></tr></table></figure></p><p>设置传递属性值过来，支持变量、默认值<br><strong>组件的某个变量传递给样式组件，外链的样式 css、sass、less都不支持，只要CSS-in-JS可以</strong></p></blockquote><p>样式文件<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入styled，css-in-js技术，样式写在js文件或者jsx文件中</span></span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DivStyled3 = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  background-color: blue;</span></span><br><span class="line"><span class="string">  font-size: <span class="subst">$&#123;props =&gt; props.font || <span class="string">&#x27;18px&#x27;</span>&#125;</span>; //如果有参数传递过来就使用，如果没有就使用默认值</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入styled.css中的样式组件名，作为标签使用</span></span><br><span class="line"><span class="keyword">import</span> &#123;  DivStyled3 &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StyledDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">font</span>: <span class="string">&#x27;32px&#x27;</span> <span class="comment">//js组件中的变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>StyledDemo<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 支持js组件中的变量【DivStyled3就相当于子组件，传递给样式组件中】 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">DivStyled3</span> <span class="attr">font</span>=<span class="string">&#123;this.state.font&#125;</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">DivStyled3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="redux的模块化"><a href="#redux的模块化" class="headerlink" title="redux的模块化"></a>redux的模块化</h2><p>现在我们已经能够很好的进行redux的数据管理，但是有一个缺点就是所有的代码都写在一个文件中，需要按照模块化开发的规则进行对代码拆分。</p><blockquote><p>目录结构</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10016.png" alt="redux模块化目录"></p><p>整个home页面中的reducer逻辑会合并到store中的reducer中，同时home页面的actions、reducer均依赖actionTypes的自定义规则，home调用的是actions中导出的方法</p><blockquote><p>安装插件<br>react-redux就是redux给我们提供一些高阶组件[引入connect组件]，能解决的问题是：使用它以后我们不需要在每个组件中再去手动订阅数据的更新了。</p></blockquote><p><code>npm i -S redux react-redux</code></p><blockquote><p>定义Provider，在程序主文件index.js文件中,定义Provider，此处类似于之前跨组件通信处的Provider一样，旨在让全局的组件共享store中的数据</p></blockquote><p>index.js文件<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; HashRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App3 <span class="keyword">from</span> <span class="string">&#x27;./App3&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">HashRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">App3</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">HashRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>App3.js文件<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Switch, Route &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;./03views/home/Home.jsx&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App3</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>App3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>在store文件夹中创建store.js文件,创建store并抛出store(全局共享数据)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducer&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><blockquote><p>在store目录下的reducer.js文件中合并每个页面reducer.js逻辑</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入combineReducers方法，把所有的模块中的reducer(逻辑)做一个合并 然后返回给store</span></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入home页面中的逻辑</span></span><br><span class="line"><span class="keyword">import</span> homeReducer <span class="keyword">from</span> <span class="string">&#x27;../03views/home/reducer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = combineReducers(&#123; <span class="comment">// 模块化</span></span><br><span class="line">    <span class="attr">home</span>: homeReducer, <span class="comment">// home是命名空间  state.home.xxx</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer</span><br></pre></td></tr></table></figure><blockquote><p>到actionTypes.js文件中定义规则</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> increType = <span class="string">&#x27;home/afaefafefe&#x27;</span> <span class="comment">// 规则这里自定义，没有限制</span></span><br></pre></td></tr></table></figure><blockquote><p>书写reducer逻辑【store中的reducer是负责整合，这个写在home目录下的reducer.js中】</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; increType &#125; <span class="keyword">from</span> <span class="string">&#x27;./actionTypes&#x27;</span></span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = defaultState, actions</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// if可以替换为switch</span></span><br><span class="line">    <span class="keyword">if</span> (actions.type === increType) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">num</span>: state.num + actions.incre &#125;  <span class="comment">// +逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer <span class="comment">// 抛出</span></span><br></pre></td></tr></table></figure><blockquote><p>书写actions.js文件与其仓库reducer.js对接</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入自定义规则</span></span><br><span class="line"><span class="keyword">import</span> &#123; increType &#125; <span class="keyword">from</span> <span class="string">&#x27;./actionTypes&#x27;</span></span><br><span class="line"><span class="comment">// type为规则，incre是负责传递实参到reducer.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> increActions = <span class="function">(<span class="params">incre</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">type</span>: increType,</span><br><span class="line">        incre</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>引入到Home组件中使用</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入connect订阅数据更新</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="comment">// 引入increActions方法，返回的是对象包含触发规则</span></span><br><span class="line"><span class="keyword">import</span> &#123; increActions &#125; <span class="keyword">from</span> <span class="string">&#x27;./actions&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.props.mynum&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.props.handleClick(1)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">mynum</span>: state.home.num <span class="comment">// 中间插上命名空间的名字</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="function"><span class="title">handleClick</span>(<span class="params">a</span>)</span> &#123;</span><br><span class="line">        dispatch(increActions(a))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(Home)</span><br></pre></td></tr></table></figure><h2 id="immutable-js"><a href="#immutable-js" class="headerlink" title="immutable.js"></a>immutable.js</h2><blockquote><p>Immutable.js出自Facebook，是最流行的不可变数据结构的实现之一。它实现了完全的持久化数据结构，使用结构共享。所有的更新操作都会返回新的值，但是在内部结构是共享的，来减少内存占用(和垃圾回收的失效)。</p><p>持久化数据结构：这里说的持久化是用来描述一种数据结构，指一个数据，在被修改时，仍然能够保持修改前的状态，即不可变类型。</p><p>结构共享：ImmutableJS使用先进的tries(字典树)技术实现结构共享来解决性能问题，当我们对一个Immutable对象进行操作的时候，ImmutableJS会只clone该节点以及它的祖先节点，其他保持不变，这样可以共享相同的部分，大大提高性能。</p></blockquote><p>使用immutable优缺点:</p><ul><li><p>优点：</p><ul><li>降低mutable带来的复杂度</li><li>节省内存</li><li>历史追溯性</li><li>拥抱函数式编程</li></ul></li><li><p>缺点：</p><ul><li>需要重新学习api</li><li>资源包大小增加（源码5000行左右）</li><li>容易与原生对象混淆：由于api与原生不同，混用的话容易出错</li></ul></li></ul><blockquote><p>安装插件</p></blockquote><p><code>npm i -S immutable</code></p><blockquote><p>常用Api</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map(): 原生object转Map对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> map2 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map1 === map2) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(map1.equals(map2)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// List(): 原生array转List对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list1 = List([<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">const</span> list2 = list1.push(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 获取值</span></span><br><span class="line"><span class="built_in">console</span>.log(list2.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list1 = List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]);</span><br><span class="line"><span class="keyword">const</span> list2 = List([ <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ]);</span><br><span class="line"><span class="keyword">const</span> list3 = list2.concat(list1);</span><br><span class="line"><span class="built_in">console</span>.log(list3.toArray())</span><br><span class="line"></span><br><span class="line"><span class="comment">// fromJS(): 原生js转immutable对象</span></span><br><span class="line"><span class="keyword">const</span> imState = fromJS(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">  <span class="attr">users</span>: [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  获取数据</span></span><br><span class="line"><span class="built_in">console</span>.log(imState.get(<span class="string">&#x27;users&#x27;</span>).get(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(imState.getIn([<span class="string">&#x27;users&#x27;</span>, <span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">// toJS(): immutable对象转原生js   不推荐使用</span></span><br><span class="line"><span class="keyword">const</span> state = imState.toJS()</span><br><span class="line"><span class="built_in">console</span>.log(state);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set/setIn/update/updateIn  修改数据</span></span><br><span class="line"><span class="keyword">const</span> newState = imState.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> newState = imState.setIn([<span class="string">&#x27;name&#x27;</span>], <span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> newState = imState.update(<span class="string">&#x27;count&#x27;</span>, <span class="function"><span class="params">value</span> =&gt;</span> value + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> newState = imState.updateIn([<span class="string">&#x27;count&#x27;</span>], <span class="function"><span class="params">value</span> =&gt;</span> value + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><code>注意：组件中state使用的时候不建议直接把state转换成immutable对象。</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> immutable <span class="keyword">from</span> <span class="string">&#x27;immutable&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ImmuDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="comment">// 不建议你在State中使用ImmutableJS。一般用在Reducer层。</span></span><br><span class="line"><span class="comment">// 因为 state 本身必须是 plain object，但是里面的值可以是 immutable 的数据</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        <span class="built_in">this</span>.username = React.createRef()</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            <span class="attr">arr</span>:immutable.fromJS([</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;大壮&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;二翠&#x27;</span>&#125;,</span><br><span class="line">            ])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> obj = &#123;</span><br><span class="line">           <span class="attr">id</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span><br><span class="line">           <span class="attr">name</span>:<span class="built_in">this</span>.username.current.value</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">           <span class="attr">arr</span>:immutable.fromJS([...this.state.arr.toArray(),obj])</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>ImmuDemo案例<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;</span> <span class="attr">this.username</span> &#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.handleClick</span> &#125;&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123; this.state.arr.map(item=&gt;&#123;</span></span><br><span class="line"><span class="xml">                    return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;</span> <span class="attr">item.get</span>(&#x27;<span class="attr">id</span>&#x27;) &#125;&gt;</span>姓名：&#123; item.get(&#x27;name&#x27;) &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#125;)&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React笔记(十一)</title>
      <link href="/archives/cbf8a007.html"/>
      <url>/archives/cbf8a007.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">eg：代表代码对照</mark> <mark class="hl-label pink">若文章有误，欢迎读者留言反馈</mark> <h2 id="React核心包如何降级"><a href="#React核心包如何降级" class="headerlink" title="React核心包如何降级"></a>React核心包如何降级</h2><blockquote><p>安装17.0.2的React核心包<br><code>npm i -S react@17.0.2 react-dom@17.0.2</code>   核心包降级</p><p>入口文件重新引入ReactDOM、配置</p></blockquote><p>17.0.2入口文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span> <span class="comment">// 17.0.2引入写法</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 17.0.2 入口写法  注意语法</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>18.2入口文件<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span> <span class="comment">// 18.2引入写法</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 18.2 入口写法  注意语法</span></span><br><span class="line"><span class="comment">// root 类似于vue中 Vue构造函数的实例   18.2语法</span></span><br><span class="line"><span class="keyword">const</span> root = ReactDOM.createRoot(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">root.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="过渡动画组件"><a href="#过渡动画组件" class="headerlink" title="过渡动画组件"></a>过渡动画组件</h2><blockquote><p>安装react-transition-group，它是react的第三方模块</p></blockquote><p><code>npm i -S react-transition-group</code></p><blockquote><p>自定义动画</p></blockquote><ol><li>安装完引入<code>CSSTransition</code>标签，并对齐进行配置<br><code>import &#123; CSSTransition &#125; from &#39;react-transition-group&#39;</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 安装完引入CSSTransition标签</span></span><br><span class="line"><span class="keyword">import</span> &#123; CSSTransition &#125; <span class="keyword">from</span> <span class="string">&#x27;react-transition-group&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transition</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">show</span>: !<span class="built_in">this</span>.state.show</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>过渡动画<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 2. 使用CSSTransition，并对其配置 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">CSSTransition</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">in</span>=<span class="string">&#123;this.state.show&#125;</span> // 动画开关</span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">timeout</span>=<span class="string">&#123;2000&#125;</span> // 动画时长</span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">classNames</span>=<span class="string">&#x27;donghua&#x27;</span> // <span class="attr">class</span>组</span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">unmountOnExit</span> // 可选，加上代表离场动画执行完毕删除当前节点</span></span></span><br><span class="line"><span class="tag"><span class="xml">                &gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span>动画元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>开关<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>书写样式</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.donghua-enter</span> &#123;</span><br><span class="line">    <span class="comment">/* 开始执行动画 隐藏*/</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.donghua-enter-active</span> &#123;</span><br><span class="line">    <span class="comment">/* 入场动画 */</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">2000ms</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.donghua-exit</span> &#123;</span><br><span class="line">    <span class="comment">/* 离场 */</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.donghua-exit-active</span> &#123;</span><br><span class="line">    <span class="comment">/* 离场中 */</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">2000ms</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>引入动画样式到组件中</li></ol><p><code>import &#39;./trans.css&#39;</code></p><h2 id="使用动画库"><a href="#使用动画库" class="headerlink" title="使用动画库"></a>使用动画库</h2><blockquote><p><code>animate.css</code>动画库集成到<code>react-transition-group</code>动画模块中</p></blockquote><p><a href="https://animate.style/">Animate.css官网</a></p><blockquote><p>安装插件【已经安装的不需要重复安装】<br><code>npm i -S react-transition-group</code><br><code>npm i -S animate.css</code></p><p>入口文件引入动画库<br>// 使用动画库<br><code>import &#39;animate.css&#39;</code></p><p>组件中使用<br>引入CSSTransition标签：<code>import &#123; CSSTransition &#125; from &#39;react-transition-group&#39;</code></p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;CSSTransition</span><br><span class="line">    <span class="keyword">in</span>=&#123;<span class="built_in">this</span>.state.show&#125; <span class="comment">// 开关</span></span><br><span class="line">    timeout=&#123;<span class="number">2000</span>&#125;  <span class="comment">// 动画时长</span></span><br><span class="line">    classNames=&#123;&#123;</span><br><span class="line">        <span class="attr">enter</span>: <span class="string">&#x27;animate__animated&#x27;</span>,</span><br><span class="line">        <span class="attr">enterActive</span>: <span class="string">&#x27;animate__fadeIn&#x27;</span>,</span><br><span class="line">        <span class="attr">exit</span>: <span class="string">&#x27;animate__animated&#x27;</span>,</span><br><span class="line">        <span class="attr">exitActive</span>: <span class="string">&#x27;animate__fadeOut&#x27;</span></span><br><span class="line">    &#125;&#125;  <span class="comment">//class组</span></span><br><span class="line">    unmountOnExit <span class="comment">// 离场动画执行完毕要不要删除当前节点</span></span><br><span class="line">    &gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这个是动画元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/CSSTransition&gt;</span><br></pre></td></tr></table></figure><h2 id="列表过渡动画"><a href="#列表过渡动画" class="headerlink" title="列表过渡动画"></a>列表过渡动画</h2><p>多个CSSTransition标签这时候需要TransitionGroup动画组包裹住</p><blockquote><p>引入CSSTransition和TransitionGroup标签</p></blockquote><p><code>import &#123; CSSTransition, TransitionGroup &#125; from &#39;react-transition-group&#39;</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; CSSTransition, TransitionGroup &#125; <span class="keyword">from</span> <span class="string">&#x27;react-transition-group&#x27;</span></span><br><span class="line"><span class="comment">// 列表动画</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Transition3</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">list</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">show</span>: !<span class="built_in">this</span>.state.show</span><br><span class="line">        &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.state.show)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 使用TransitionGroup标签 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">TransitionGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        this.state.list.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                            return (</span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">CSSTransition</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                    <span class="attr">in</span>=<span class="string">&#123;this.state.show&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                    <span class="attr">timeout</span>=<span class="string">&#123;1000&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                    // <span class="attr">classNames</span>=<span class="string">&quot;myfade&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                    <span class="attr">unmountOnExit</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                                    <span class="attr">onEntered</span>=<span class="string">&#123;(el)</span> =&gt;</span> &#123; el.style.color = &#x27;blue&#x27; &#125;&#125; //钩子函数等价于enter</span></span><br><span class="line"><span class="xml">                                    appear=&#123;true&#125; //启动首屏  首屏就执行动画</span></span><br><span class="line"><span class="xml">                                    key=&#123;index&#125;</span></span><br><span class="line"><span class="xml">                                &gt;</span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                        &#123;item&#125;</span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            )</span></span><br><span class="line"><span class="xml">                        &#125;)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">TransitionGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由过渡动画【使用V5版本React-Router-5-3-0】"><a href="#路由过渡动画【使用V5版本React-Router-5-3-0】" class="headerlink" title="路由过渡动画【使用V5版本React-Router,,,5.3.0】"></a>路由过渡动画【使用V5版本React-Router,,,5.3.0】</h2><blockquote><p>安装路由模块</p></blockquote><p>路由模块不是react自带模块，需要安装第三方模块<br><code>npm i -S react-router-dom</code></p><blockquote><p>入口文件引入hash路由模式，HashRouter标签</p></blockquote><p><code>import &#123; HashRouter &#125; from &#39;react-router-dom&#39;</code></p><blockquote><p>使用HashRouter标签</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;HashRouter&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line">&lt;/HashRouter&gt;,</span><br></pre></td></tr></table></figure><blockquote><p>回到根组件配置二级路由，引入路由需要的标签和组件，由于使用17.0.2版本引入一下高阶组件<code>withRouter</code>，使用<code>location</code></p></blockquote><p><code>import &#123; Switch,Route,Link,withRouter &#125; from &#39;react-router-dom&#39;</code><br><code>import Home from &#39;./pages/Home&#39;</code><br><code>import User from &#39;./pages/user&#39;</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;/* react的空标签是<span class="tag">&lt;&gt;</span><span class="tag">&lt;/&gt;</span></span>  vue的空标签是template标签 */&#125;</span><br><span class="line">        &lt;Link to=<span class="string">&quot;/home&quot;</span>&gt;home&lt;/Link&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>user<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">component</span>=<span class="string">&#123;User&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">    &lt;/&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>引入动画相关标签<br><code>import &#123; CSSTransition, TransitionGroup &#125; from &#39;react-transition-group&#39;</code></p><p>完整代码如下：<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Switch, Route, Link, withRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">&#x27;./pages/User&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; CSSTransition, TransitionGroup &#125; <span class="keyword">from</span> <span class="string">&#x27;react-transition-group&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// render初始执行一次，location值为undefined,不能.pathname会报错，这里使用短路运算符解决</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.props.location &amp;&amp; <span class="built_in">this</span>.props.location.pathname)  <span class="comment">//当前的路由pathname</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* react的空标签是<span class="tag">&lt;&gt;</span><span class="tag">&lt;/&gt;</span></span>  vue的空标签是template标签 */&#125;</span><br><span class="line">                &lt;Link to=<span class="string">&quot;/home&quot;</span>&gt;home&lt;/Link&gt; | </span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>user<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">TransitionGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">CSSTransition</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        // <span class="attr">in</span>=<span class="string">&#123;true&#125;</span>  //路由切换会自动触发组件的创建和销毁</span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">timeout</span>=<span class="string">&#123;2000&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        // <span class="attr">classNames</span>=<span class="string">&quot;myfade&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">classNames</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                            <span class="attr">enter:</span> &#x27;<span class="attr">animate__animated</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">                            <span class="attr">enterActive:</span> &#x27;<span class="attr">animate__slideInLeft</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">                            <span class="attr">exit:</span> &#x27;<span class="attr">animate__animated</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">                            <span class="attr">exitActive:</span> &#x27;<span class="attr">animate__slideOutLeft</span>&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="xml">                        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">unmountOnExit</span>  //离场之后  页面组件销毁</span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">key</span>=<span class="string">&#123;this.props.location</span> &amp;&amp; <span class="attr">this.props.location.pathname</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">                    &gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">component</span>=<span class="string">&#123;User&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">TransitionGroup</span>&gt;</span></span></span><br><span class="line">            &lt;/&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// react-router-dom 17.0.2版本，只要拿不到路由相关的属性和对象就使用高阶withRouter</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(App)</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="利用高阶组件给组件添加动画"><a href="#利用高阶组件给组件添加动画" class="headerlink" title="利用高阶组件给组件添加动画"></a>利用高阶组件给组件添加动画</h2><p>并不想让所有的路由都有动画效果，只是想对指定的页面有路由切换效果，可以利用高阶组件来完成。</p><blockquote><p>定义高阶组件【函数组件】</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入CSSTransition标签</span></span><br><span class="line"><span class="keyword">import</span> &#123; CSSTransition &#125; <span class="keyword">from</span> <span class="string">&#x27;react-transition-group&#x27;</span></span><br><span class="line"><span class="comment">// 动画过渡的高阶组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">TransHoc</span>(<span class="params">Component</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 可以返回函数组件也可以返回类组件【函数组件没有this，需要传入props，然后直接使用】</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">newCom</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;匹配：&#x27;</span>, props.match)</span><br><span class="line">        <span class="comment">// this.props.match 是匹配时候的路由对象，如果没有匹配就null</span></span><br><span class="line">        <span class="comment">// 例如：/user User   null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">CSSTransition</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">in</span>=<span class="string">&#123;props.match</span> !== <span class="string">null&#125;</span> // 不为<span class="attr">null</span>代表匹配上了，开启动画</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">timeout</span>=<span class="string">&#123;2000&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">classNames</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">enter:</span> &#x27;<span class="attr">animate__animated</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">enterActive:</span> &#x27;<span class="attr">animate__fadeIn</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">exit:</span> &#x27;<span class="attr">animate__animated</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">exitActive:</span> &#x27;<span class="attr">animate__fadeOut</span>&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">unmountOnExit</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用高阶组件，如果有配置装饰器支持，可以使用<strong>高阶组件语法糖</strong><code>@高阶组件名称</code></p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入高阶组件</span></span><br><span class="line"><span class="keyword">import</span> HOCTransition <span class="keyword">from</span> <span class="string">&#x27;../HOC/HOCTransition&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span> &#x27;<span class="attr">red</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">                Home</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用高阶组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HOCTransition(Home)</span><br></pre></td></tr></table></figure><blockquote><p>配置路由<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Route &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;./pages1/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">&#x27;./pages1/User&#x27;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  高阶组件，给我们的页面组件添加动画效果，把效果添加在Home页面组件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App1</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;</span> <span class="attr">Home</span> &#125;&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/User&quot;</span> <span class="attr">component</span>=<span class="string">&#123;</span> <span class="attr">User</span> &#125;&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">                &#123;/* component 注册的组件，会触发创建和销毁， children*/&#125;</span></span><br><span class="line"><span class="xml">                &#123;/* children初始化的时候，页面就会被创建，只有在匹配路由的时候才渲染 */&#125;</span></span><br><span class="line"><span class="xml">                &#123;/* children属性使用，17.0.2支持，18.2暂时没有替代方法 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">children</span>=<span class="string">&#123;props</span> =&gt;</span> <span class="tag">&lt;<span class="name">Home</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/User&quot;</span> <span class="attr">children</span>=<span class="string">&#123;props</span> =&gt;</span> <span class="tag">&lt;<span class="name">User</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><mark class="hl-label green">注意：暂时没发现`children`如何使用`v6版本`替代，暂留、降级`v5版本`</mark> ]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React笔记(十)</title>
      <link href="/archives/b9f399df.html"/>
      <url>/archives/b9f399df.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">eg：代表代码对照</mark> <mark class="hl-label pink">若文章有误，欢迎读者留言反馈</mark> <h2 id="withRouter高阶组件"><a href="#withRouter高阶组件" class="headerlink" title="withRouter高阶组件"></a>withRouter高阶组件</h2><p>作用：把不是通过路由切换过来的组件中，将react-router 的 history、location、match 三个对象传入props对象上</p><p>默认情况下必须是经过路由匹配渲染的组件才存在this.props，才拥有路由参数，才能使用编程式导航的写法，执行this.props.history.push(‘/uri’)跳转到对应路由的页面，然而不是所有组件都直接与路由相连的，当这些组件需要路由参数时，使用withRouter就可以给此组件传入路由参数，此时就可以使用this.props</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入withRouter</span></span><br><span class="line"><span class="keyword">import</span> &#123; withRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行一下withRouter</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(Cmp)</span><br></pre></td></tr></table></figure><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 箭头函数方式</span></span><br><span class="line"><span class="attr">component</span>:<span class="function"><span class="params">resolve</span> =&gt;</span><span class="built_in">require</span>([<span class="string">&#x27;@/component/Login&#x27;</span>],resolve)</span><br></pre></td></tr></table></figure><h2 id="React-Router-V6版本"><a href="#React-Router-V6版本" class="headerlink" title="React-Router V6版本"></a>React-Router V6版本</h2><p><strong>React-Router V6版本常用路由组件和hooks</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">组件名</th><th style="text-align:left">作用</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;Routes&gt;</code></td><td style="text-align:left">一组路由</td><td style="text-align:left">代替原有<code>&lt;Switch&gt;</code>，所有子路由都用基础的Router children来表示</td></tr><tr><td style="text-align:left"><code>&lt;Route&gt;</code></td><td style="text-align:left">基础路由</td><td style="text-align:left">Route是可以嵌套的，解决原有V5中严格模式，后面与V5区别会详细介绍</td></tr><tr><td style="text-align:left"><code>&lt;Link&gt;</code></td><td style="text-align:left">导航组件</td><td style="text-align:left">在实际页面中跳转使用</td></tr><tr><td style="text-align:left"><code>&lt;Outlet/&gt;</code></td><td style="text-align:left">自适应渲染组件</td><td style="text-align:left">根据实际路由url自动选择组件</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">hooks名</th><th style="text-align:left">作用</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>useParams</code></td><td style="text-align:left">返回当前参数</td><td style="text-align:left">根据路径读取参数</td></tr><tr><td style="text-align:left"><code>useNavigate</code></td><td style="text-align:left">返回当前路由</td><td style="text-align:left">代替原有V5中的 useHistory</td></tr><tr><td style="text-align:left"><code>useOutlet</code></td><td style="text-align:left">返回根据路由生成的element</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>useLocation</code></td><td style="text-align:left">返回当前的location 对象</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>useRoutes</code></td><td style="text-align:left">同Routers组件一样，只不过是在js中使用</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>useSearchParams</code></td><td style="text-align:left">用来匹配URL中?后面的搜索参数</td></tr></tbody></table></div><blockquote><p>如表格，V6版本常用的组件和hooks，这些是新增的常用部分，不常用部分可以查看官方文档。接下来，咱们通过案例的形式来比较上面新增的那些变化。</p></blockquote><h3 id="1-路由的基本使用"><a href="#1-路由的基本使用" class="headerlink" title="1. 路由的基本使用"></a>1. 路由的基本使用</h3><p>在app.js中分别搭建home和about页面路由。</p><p>v5的写法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HashRouter,Route,Switch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line">......</span><br><span class="line">&lt;HashRouter&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;</span> <span class="attr">Home</span> &#125;&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;</span> <span class="attr">About</span> &#125;&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">&lt;/HashRouter&gt;</span><br></pre></td></tr></table></figure><p>v6的写法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HashRouter,Route,Routes &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line">......</span><br><span class="line"><span class="comment">//Routes替换了Switch</span></span><br><span class="line">&lt;HashRouter&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span> &lt;<span class="attr">Home</span>/&gt;</span> &#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span> &lt;<span class="attr">About</span>/&gt;</span> &#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">&lt;/HashRouter&gt;</span><br></pre></td></tr></table></figure><h3 id="2-嵌套路由"><a href="#2-嵌套路由" class="headerlink" title="2. 嵌套路由"></a>2. 嵌套路由</h3><p>嵌套路由是V6版本对之前版本一个较大的升级，采用嵌套路由会智能的识别</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">&lt;Routes&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;user&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Users</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="xml">     // :xx除了create都是UserDetail这个页面【动态传参，可以输任意内容】</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;:xx&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">UserDetail</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;create&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">NewUser</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">&lt;/Routes&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当访问 /user/123 的时候，组件树将会变成这样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">App</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Users</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">UserDetail</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当访问/user/create的时候，组件树将变成这样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">App</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Users</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">NewUser</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注意，上面写法需要在父组件中指定子组件渲染位置，&lt;Outlet/&gt;相当于占位符，告诉当前组件，子路由在当前位置进行渲染。</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Users</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Users<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然除了上面写法还有另一种写法<br>在App.js父组件中创建一级路由</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">&lt;Routes&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/*&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span> &lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span> &lt;<span class="attr">User</span> /&gt;</span>&#125;/&gt;</span></span><br><span class="line">&lt;/Routes&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在Home组件中配置二级路由</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Routes&gt;</span><br><span class="line">     &#123;<span class="comment">/* 嵌套路由写法 这里可以省略/home一级路由  */</span>&#125;</span><br><span class="line">     &lt;Route path=<span class="string">&quot;myheader&quot;</span>  element=&#123; <span class="xml"><span class="tag">&lt;<span class="name">MyHeader</span> /&gt;</span></span>&#125;/&gt;</span><br><span class="line">     <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;myfooter&quot;</span>  <span class="attr">element</span>=<span class="string">&#123;</span> &lt;<span class="attr">MyFooter</span> /&gt;</span>&#125;/&gt;</span></span><br><span class="line">&lt;/Routes&gt;</span><br></pre></td></tr></table></figure><h3 id="3-重定向和404"><a href="#3-重定向和404" class="headerlink" title="3. 重定向和404"></a>3. 重定向和404</h3><p>v5写法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重定向 from从哪里来 to重定向到何处去</span></span><br><span class="line">&lt;Redirect <span class="keyword">from</span>=<span class="string">&quot;/home&quot;</span> to=<span class="string">&quot;/&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 404设置 可以省略path=&quot;*&quot;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">component</span>=<span class="string">&#123;Notfound&#125;</span> /&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>v6写法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Route,Routes,Navigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line">......</span><br><span class="line">&#123;<span class="comment">/* index属性来指定默认路由/ */</span>&#125;</span><br><span class="line"> &lt;Route index element=&#123; <span class="xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&#x27;/home&#x27;</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">&#123;<span class="comment">/* 404  path=&quot;*&quot;不能省略 */</span>&#125;</span><br><span class="line"> &lt;Route path=<span class="string">&quot;*&quot;</span> element=&#123; <span class="xml"><span class="tag">&lt;<span class="name">NotFind</span> /&gt;</span></span> &#125; /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-路由传参"><a href="#4-路由传参" class="headerlink" title="4. 路由传参"></a>4. 路由传参</h3><p>​    <code>由于v6版本已经废弃withRouter这个高阶函数，所以类组件获取路由对象可以通过封装高阶组件的方式来创建出来withRouter这个函数，代码如下</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useLocation,useNavigate,useParams&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line">  <span class="comment">// 封装新的withRouter高阶函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">withRouter</span>(<span class="params">Component</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ComponentWithRouterProp</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> location = useLocation();</span><br><span class="line">      <span class="keyword">let</span> navigate = useNavigate();</span><br><span class="line">      <span class="keyword">let</span> params = useParams();</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">router</span>=<span class="string">&#123;&#123;</span> <span class="attr">location</span>, <span class="attr">navigate</span>, <span class="attr">params</span> &#125;&#125; /&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ComponentWithRouterProp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>v6版本React路由传参方式有三种：</p><p>Ø  动态路由参数（param）</p><p>   <code>以&quot;/detail/:id&quot;形式传递的数据</code></p><p>​    类组件通过如下方法得到</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先当前组件先使用高阶组件withRouter,然后就可以像v5一样使用了。</span></span><br><span class="line"><span class="built_in">this</span>.props.router.match.params</span><br></pre></td></tr></table></figure><p>   函数组件可以通过如下方法跳转并传参</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useNavigate,useParams,useLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span> </span><br><span class="line">......</span><br><span class="line"><span class="keyword">const</span> navigate = useNavigate()</span><br><span class="line">navigate(<span class="string">&#x27;/detail/:id&#x27;</span>) <span class="comment">// 跳转方法</span></span><br><span class="line"><span class="keyword">const</span> params = useParams()</span><br><span class="line">params.id <span class="comment">// 获取参数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Ø  查询字符串（query）</p><p>​    <code>通过地址栏中的 home?key=value&amp;key=value传递</code></p><p>类组件通过如下方法得到</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先当前组件先使用高阶组件withRouter,然后就可以像v5一样使用了。</span></span><br><span class="line"><span class="built_in">this</span>.props.router.location.search</span><br></pre></td></tr></table></figure><p>   函数组件可以通过如下方法跳转并传参</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useNavigate,useParams,useLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span> </span><br><span class="line">......</span><br><span class="line"><span class="keyword">const</span> navigate = useNavigate()</span><br><span class="line">navigate(<span class="string">&#x27;/detail?key=value&#x27;</span>) <span class="comment">// 跳转方法</span></span><br><span class="line"><span class="keyword">const</span> location = useLocation()</span><br><span class="line">location.search <span class="comment">// 获取参数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Ø  隐式传参（state），通过地址栏是观察不到的</p><p>​    <code>通过路由对象中的state属性进行数据传递</code></p><p>类组件通过如下方法得到</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先当前组件先使用高阶组件withRouter,然后就可以像v5一样使用了。</span></span><br><span class="line"><span class="built_in">this</span>.props.router.location.state</span><br></pre></td></tr></table></figure><p>   函数组件可以通过如下方法跳转并传参</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useNavigate,useParams,useLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span> </span><br><span class="line">......</span><br><span class="line"><span class="keyword">const</span> navigate = useNavigate()</span><br><span class="line">navigate(<span class="string">&#x27;/detail&#x27;</span>,&#123;state=&#123; <span class="attr">key</span>: value &#125;&#125;) <span class="comment">// 跳转方法</span></span><br><span class="line"><span class="keyword">const</span> location = useLocation()</span><br><span class="line">location.state <span class="comment">// 获取参数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-useRoutes-替换react-router-config"><a href="#5-useRoutes-替换react-router-config" class="headerlink" title="5.useRoutes 替换react-router-config"></a>5.useRoutes 替换react-router-config</h3><p>我们在App.js中通过useRoutes这个hooks来搭配路由。如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> element = useRoutes([</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span> &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">          <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">User</span> /&gt;</span></span>,</span><br><span class="line">          children: [</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&quot;:id&quot;</span>, <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">User2</span> /&gt;</span></span> &#125;,</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&quot;user1&quot;</span>, <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">User1</span> /&gt;</span></span> &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;*&quot;</span>, <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">NotFound</span> /&gt;</span></span> &#125;</span><br><span class="line">      ]);</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">          // 这里把上面使用hooks配置的全局路由在这里执行以下</span></span><br><span class="line"><span class="xml">         &#123; element &#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React笔记(九)</title>
      <link href="/archives/c45aeeab.html"/>
      <url>/archives/c45aeeab.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">eg：代表代码对照</mark> <mark class="hl-label pink">若文章有误，欢迎读者留言反馈</mark> <h2 id="路由-React-Router-V5版本"><a href="#路由-React-Router-V5版本" class="headerlink" title="路由 React-Router V5版本"></a>路由 React-Router V5版本</h2><blockquote><p>提前创建pages文件夹里面放几个页面</p><ol><li>根组件一般使用函数组件，也可以使用类组件</li><li>安装插件学习v5.3.0版本路由 npm i -S react-router-dom@5.3.0</li><li>App.js需要去入口文件，配置路由模式</li><li>引入页面</li><li>从第三方路由模块中引入Route路由对象当标签使用，Switch标签和Redirect重定向标签</li><li>使用标签配置一级路由【地址栏输入路径默认与这里的path做正则匹配，包含这里path就符合,不加switch会每个都匹配】</li></ol><ul><li>通过route这个标签绑定两个属性，建立path 和 component的一个映射关系</li><li>Switch 指定我们路由匹配规则,提高性能，只匹配一个</li><li>exact 属性，精确匹配  path完全相等才算成立，二级路由的时候切记使用</li><li>Switch和exact搭配使用</li></ul><ol><li>重定向加上exact好一点</li><li>404配置 可以省略 path=”*”</li><li>配置二级路由，以home.jsx为例提前创建好两个Demo1.jsx和Demo2.jsx两个页面，去Home.jsx页面去配置</li></ol></blockquote><p>App.js文件代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提前创建pages文件夹里面放几个页面</span></span><br><span class="line"><span class="comment">// 1. 根组件一般使用函数组件，也可以使用类组件</span></span><br><span class="line"><span class="comment">// 2. 安装插件学习v5.3.0版本路由 npm i -S react-router-dom@5.3.0</span></span><br><span class="line"><span class="comment">// 3. App.js需要去入口文件，配置路由模式</span></span><br><span class="line"><span class="comment">// 4. 引入页面</span></span><br><span class="line"><span class="keyword">import</span> My <span class="keyword">from</span> <span class="string">&#x27;./pages/My&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">&#x27;./pages/User&#x27;</span></span><br><span class="line"><span class="keyword">import</span> NotFound <span class="keyword">from</span> <span class="string">&#x27;./pages/NotFound&#x27;</span></span><br><span class="line"><span class="comment">// 5. 从第三方路由模块中引入Route路由对象当标签使用，Switch标签和Redirect重定向标签</span></span><br><span class="line"><span class="keyword">import</span> &#123; Switch, Route, Redirect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>React V5路由学习<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;/*</span></span><br><span class="line"><span class="xml">            6. 使用标签配置一级路由【地址栏输入路径默认与这里的path做正则匹配，包含这里path就符合,不加switch会每个都匹配】</span></span><br><span class="line"><span class="xml">                通过route这个标签绑定两个属性，建立path 和 component的一个映射关系</span></span><br><span class="line"><span class="xml">                Switch 指定我们路由匹配规则,提高性能，只匹配一个</span></span><br><span class="line"><span class="xml">                exact 属性，精确匹配  path完全相等才算成立，二级路由的时候切记使用</span></span><br><span class="line"><span class="xml">                Switch和exact搭配使用</span></span><br><span class="line"><span class="xml">            9. 配置二级路由，以home.jsx为例提前创建好两个Demo1.jsx和Demo2.jsx两个页面，去Home.jsx页面去配置</span></span><br><span class="line"><span class="xml">            */&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/user&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;User&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/my&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;My&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 23. 动态路由传参单个，如下 */&#125;</span></span><br><span class="line"><span class="xml">                &#123;/* <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/my/:id?&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;My&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">                &#123;/* 24. 动态路由传参多个，如下 */&#125;</span></span><br><span class="line"><span class="xml">                &#123;/* <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/my/:id?/:age?&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;My&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">                &#123;/* 7. 重定向加上exact好一点 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">from</span>=<span class="string">&quot;/&quot;</span> <span class="attr">exact</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 8. 404配置 可以省略 path=&quot;*&quot; */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;*&quot;</span> <span class="attr">component</span>=<span class="string">&#123;NotFound&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure></p><p>index.js代码：<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="comment">// 4. 从第三方路由模块中引入路由模式，作为标签将&lt;App /&gt;包裹，回App.js配置一级路由， HashRouter是hash路由的标签多个#，BrowserRouter是history路由标签没有#</span></span><br><span class="line"><span class="comment">// import &#123; HashRouter, BrowserRouter &#125; from &#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; HashRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = ReactDOM.createRoot(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">root.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">HashRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">HashRouter</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><ol><li>配置二级路由，以home.jsx为例提前创建好两个Demo1.jsx和Demo2.jsx两个页面，去Home.jsx页面去配置</li><li>引入两个子页面，利用Switch标签和Route标签通过path与component和子页面建立连接</li><li>从第三方路由模块中引入Switch标签和Route标签</li><li>利用Switch标签和Route标签通过path与component和子页面建立连接<br>二级路由这里与vue的不同，同时React v5版本不能省略一级路由名字 v6版本可以省略</li><li>声明式导航去User.jsx页面和My.jsx页面<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">    &#123;<span class="comment">/* 写法1 */</span>&#125;</span><br><span class="line">    &lt;Route path=<span class="string">&#x27;/home/demo1&#x27;</span> component=&#123;Demo1&#125;&gt;&lt;/Route&gt;</span><br><span class="line">    &#123;<span class="comment">/* 写法2，提成变量写法，由于match当前home对应的路由对象，this.props.match.path拿到Home.jsx的path */</span>&#125;</span><br><span class="line">    &lt;Route path=&#123;path + <span class="string">&#x27;/demo2&#x27;</span>&#125; component=&#123;Demo2&#125;&gt;&lt;/Route&gt;</span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure>home.jsx<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 11. 引入两个子页面，利用Switch标签和Route标签通过path与component和子页面建立连接</span></span><br><span class="line"><span class="keyword">import</span> Demo1 <span class="keyword">from</span> <span class="string">&#x27;./Demo1&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Demo2 <span class="keyword">from</span> <span class="string">&#x27;./Demo2&#x27;</span></span><br><span class="line"><span class="comment">// 12. 从第三方路由模块中引入Switch标签和Route标签</span></span><br><span class="line"><span class="keyword">import</span> &#123;Switch, Route&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 14. 写法2【在render渲染自执行函数里面写，props】</span></span><br><span class="line">        <span class="comment">// console.log(this.props.match.path) //this.props.match 就是路由中的matched，放的所有层级路由的对象数组</span></span><br><span class="line">        <span class="keyword">let</span> path = <span class="built_in">this</span>.props.match.path</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Home页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/*</span></span><br><span class="line"><span class="xml">                13. 利用Switch标签和Route标签通过path与component和子页面建立连接</span></span><br><span class="line"><span class="xml">                    二级路由这里与vue的不同，同时React v5版本不能省略一级路由名字 v6版本可以省略</span></span><br><span class="line"><span class="xml">                */&#125;</span></span><br><span class="line"><span class="xml">                &#123;/* 14. 声明式导航去User.jsx页面和My.jsx页面 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;/* 写法1 */&#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/demo1&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Demo1&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;/* 写法2，提成变量写法，由于match当前home对应的路由对象，this.props.match.path拿到Home.jsx的path */&#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#123;path</span> + &#x27;/<span class="attr">demo2</span>&#x27;&#125; <span class="attr">component</span>=<span class="string">&#123;Demo2&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home</span><br></pre></td></tr></table></figure>user.jsx<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 15. 声明式导航需要引入Link标签</span></span><br><span class="line"><span class="comment">// import &#123; Link &#125; from &#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="comment">// 17. 编程式导航需要引入一个高阶组件，使用和函数一样，用来获取路由对象的history、location、match等【React@17版本的一个bug，无法获取history这个bug，使用这个withRouter 高阶组件就可以获取history了】</span></span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 20. 通过点击事件跳转</span></span><br><span class="line">    handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// this.props.history 全局路由对象，用来做跳转用的，push replace go goback...</span></span><br><span class="line">        <span class="comment">// 21. 字符串写法[传递参数直接在后面拼接参数队列，类似get传参，刷新参数不丢失 有长度限制；不安全]</span></span><br><span class="line">        <span class="comment">// this.props.history.push(&#x27;/my&#x27;) // push会变成历史记录可以回退，而replace不可以【浏览器地址栏旁边小箭头，能回退就能点，不能回退就不能点】</span></span><br><span class="line">        <span class="comment">// 22. 对象写法[pathname就是path值]</span></span><br><span class="line">        <span class="comment">// this.props.history.push(&#123;</span></span><br><span class="line">        <span class="comment">//     pathname: &#x27;my&#x27;</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        <span class="comment">// 23. 动态路由传参(单个 /:xx?)，需要路由支持去App.js配置:xx?  [?表示可传可不传，没有?必须传递才能跳转成功]</span></span><br><span class="line">        <span class="comment">// this.props.history.push(&#x27;/my/123&#x27;) // 刷新参数不丢失 有长度限制 不安全</span></span><br><span class="line">        <span class="comment">// 26. 动态路由传参(单个 /:xx?)，需要路由支持去App.js配置: xx ? [?表示可传可不传，没有 ? 必须传递才能跳转成功]</span></span><br><span class="line">        <span class="comment">// 27. 在落地组件中（My.jsx）通过this.props.match.params接收</span></span><br><span class="line">        <span class="comment">// this.props.history.push(&#x27;/my/123/456&#x27;) // 刷新参数不丢失 有长度限制 不安全</span></span><br><span class="line">        <span class="comment">// 28. query传参，通过地址栏中的 home?key=value&amp;key=value传递</span></span><br><span class="line">        <span class="comment">// 29. 在落地组件中（My.jsx）通过this.props.location.search得到</span></span><br><span class="line">        <span class="comment">// this.props.history.push(&#x27;/my?name=aa&amp;age=22&#x27;) //刷新参数不丢失 有长度限制  不安全</span></span><br><span class="line">        <span class="comment">// 30. post传参，隐式传参（state），通过地址栏是观察不到的，通过路由对象中的state属性进行数据传递</span></span><br><span class="line">        <span class="comment">// 31. 在落地组件中（My.jsx）通过this.props.location.state得到</span></span><br><span class="line">        <span class="built_in">this</span>.props.history.push(&#123; <span class="comment">//刷新参数会丢失  没有长度限制   安全比较高</span></span><br><span class="line">            <span class="attr">pathname</span>:<span class="string">&#x27;my&#x27;</span>,</span><br><span class="line">            <span class="attr">state</span>:&#123;</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>:<span class="number">22</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>User页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 16. 声明式导航---&gt;My页面，这里的to就是之前一级路由的path值，也支持传递参数类似get,后面?拼接即可，to可以使用to=&#123;&#125;；类似get传参，刷新参数不丢失，有长度限制；不安全 */&#125;</span></span><br><span class="line"><span class="xml">                &#123;/* <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/my&#x27;</span>&gt;</span>跳转到My页面<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">                &#123;/* 19. 编程式导航 this.props.history.push */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>点击跳转到My页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 18. 使用withRouter高阶组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(User)</span><br></pre></td></tr></table></figure></li></ol><p>My.jsx<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 32. 接收数据</span></span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;动态路由接收参数：&#x27;, this.props.match.params) // &#123;id: &#x27;123&#x27;, age: &#x27;456&#x27;&#125;</span></span><br><span class="line">        <span class="comment">// note: 处理地址栏参数转对象？工具类、js原生方法、node.js方法之url+queryString、node.js方法之url的解构方法</span></span><br><span class="line">        <span class="comment">// console.log(&#x27;query接收参数：&#x27;, this.props.location.search) // ?name=aaa&amp;age=22</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;post接收参数：&#x27;</span>, <span class="built_in">this</span>.props.location.state) <span class="comment">// &#123;name: &#x27;小明&#x27;, age: 22&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>My页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> My</span><br></pre></td></tr></table></figure></p><blockquote><p>处理地址栏参数转对象？<br>工具类、js原生方法、node.js方法之url+queryString、node.js方法之url的解构方法</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React笔记(八)</title>
      <link href="/archives/d88b044f.html"/>
      <url>/archives/d88b044f.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">eg：代表代码对照</mark> <mark class="hl-label pink">若文章有误，欢迎读者留言反馈</mark> <h2 id="Redux学习【store】"><a href="#Redux学习【store】" class="headerlink" title="Redux学习【store】"></a>Redux学习【store】</h2><blockquote><p>配置store</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">store 类似vue中的store, 项目中唯一的仓库</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">安装redux</span></span><br><span class="line"><span class="comment">npm i -S redux</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入createStore</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// store存储数据，要遵循不可变值，不能直接修改此state</span></span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reducer 函数逻辑，如果修改state的逻辑，初始化还是修改都是返回一个新的state</span></span><br><span class="line"><span class="comment">// 参数1 把默认的state传入      参数2 actions是我们的触发规则</span></span><br><span class="line"><span class="comment">// reducer执行多次，只要你触发actions就会执行reducer</span></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = defaultState, actions</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里也可以使用switch，redux的state和setState两者覆盖区别，setState是合并而redux的则是整个state覆盖，为了避免新的state覆盖旧的state造成属性丢失，我们可以加上...state。</span></span><br><span class="line">    <span class="keyword">if</span> (actions.type == <span class="string">&#x27;addHandle&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">num</span>: actions.add + state.num&#125; <span class="comment">// 返回新的state</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> state <span class="comment">// 初始化的时候返回新的state</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入reducer函数逻辑</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>ReduxDemo.jsx代码：<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 学习的案例，项目中把store放在入口文件中</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../store/index&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ReduxDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        <span class="built_in">this</span>.state = store.getState() <span class="comment">// 获取redux中的state</span></span><br><span class="line">        <span class="comment">// 加一个监听redux state改变的函数</span></span><br><span class="line">        store.subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(<span class="function">() =&gt;</span> store.getState()) <span class="comment">// 当redux中state改变的时候，自动更新当前的state</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 同步的actions对象，type是规则，type的值要和reducer中的actions.type对应即可</span></span><br><span class="line">        <span class="keyword">const</span> userActions = &#123; <span class="attr">type</span>: <span class="string">&#x27;increhander&#x27;</span>, <span class="attr">incre</span>: <span class="number">1</span> &#125;</span><br><span class="line">        store.dispatch(userActions) <span class="comment">//store.dispatch（actions对象） 调用reducer中的代码逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>redux使用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>store已经挂载在全局了，然后我们页面中现在如何使用？</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="comment">// store已经挂载在全局了，然后我们页面中现在如何使用？</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReduxDemo1</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>redux使用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; this.props.mynum &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.props.increseFun</span> &#125;&gt;</span>+2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把redux中的state映射过来，然后放入当前组件props中，通过this.props.属性获取到。</span></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">mynum</span>:state.num  <span class="comment">//this.props.mynum 来调用</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把redux中的方法映射过来，然后放入当前组件的props中，通过this.props.方法来调用。</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">     <span class="function"><span class="title">increseFun</span>(<span class="params"></span>)</span>&#123; <span class="comment">//方法是自己定义的， this.props.increseFun来调用</span></span><br><span class="line">        <span class="keyword">const</span> myAction = &#123; <span class="attr">type</span>:<span class="string">&#x27;increhander&#x27;</span>,<span class="attr">incre</span>:<span class="number">2</span>&#125;</span><br><span class="line">        dispatch(myAction) <span class="comment">//用来触发acitons的</span></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps,mapDispatchToProps)(ReduxDemo1)</span><br></pre></td></tr></table></figure><blockquote><p>redux简化版本</p><p>规则放到一个文件中</p></blockquote><p>actionTypes.js代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> increType = <span class="string">&#x27;home/increhander&#x27;</span> <span class="comment">//常量 字符串随便</span></span><br></pre></td></tr></table></figure></p><blockquote><p>导出刚才不同actions，不同写法：<br>actions.js代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 导出刚才不同actions  加3操作</span></span><br><span class="line"><span class="comment">// export const myActions = &#123;</span></span><br><span class="line"><span class="comment">//     type:&#x27;increhander&#x27;,</span></span><br><span class="line"><span class="comment">//     incre:3</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">import</span> &#123; increType &#125; <span class="keyword">from</span> <span class="string">&#x27;./actionTypes&#x27;</span></span><br><span class="line"><span class="comment">// actions写法2 函数形式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> myActions = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">type</span>:increType, <span class="comment">//&#x27;increhander&#x27;,</span></span><br><span class="line">        <span class="attr">incre</span>: val</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// redux使用异步的action，需要安装一个包  redux-thunk 中间件</span></span><br><span class="line"><span class="comment">// npm i -S redux-thunk</span></span><br><span class="line"><span class="comment">// 异步actions 2s后执行加5操作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> myActionsAsync = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//写异步逻辑,异步actions需要调用通过action才可以进行操作</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            dispatch(myActions(<span class="number">5</span>))</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; myActions, myActionsAsync &#125; <span class="keyword">from</span> <span class="string">&#x27;./actions&#x27;</span></span><br><span class="line"><span class="comment">//装饰器模式 配置</span></span><br><span class="line">@connect(</span><br><span class="line">    <span class="function"><span class="params">state</span> =&gt;</span> (&#123; <span class="comment">// state映射写法</span></span><br><span class="line">        <span class="attr">mynum</span>: state.num</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="function"><span class="params">dispatch</span> =&gt;</span> (&#123; <span class="comment">// dispatch函数映射写法</span></span><br><span class="line">        <span class="function"><span class="title">increfun</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">            dispatch(myActions(val))</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">increfun2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            dispatch(myActionsAsync()) <span class="comment">// 注意：函数形式的actions别丢失了小括号</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReduxDemo2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>redux使用案例--简化版<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.props.mynum&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.props.increfun(4)&#125;&gt;+3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.increfun2&#125;</span>&gt;</span>+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ReduxDemo2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React笔记(七)</title>
      <link href="/archives/11d9bb43.html"/>
      <url>/archives/11d9bb43.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">eg：代表代码对照</mark> <mark class="hl-label pink">若文章有误，欢迎读者留言反馈</mark> <h2 id="知识点回顾"><a href="#知识点回顾" class="headerlink" title="知识点回顾"></a>知识点回顾</h2><ol><li>插值 {}  变量，表达式，函数调用</li><li>动态属性  属性={ 变量 }</li><li>样式写法  <code>className=&#123; 变量 &#125;</code>   <code>className=&#123;&#39;active btn&#39;&#125;</code>  <code>className=&#123; arr.join(&#39; &#39;) &#125;</code><br><code>style=&#123;&#123; fontSize:'12px',color:变量 &#125;&#125;</code></li><li>循环<ul>  {arr.map((item,index)=>{return <li key={ item.id }>{ item }</li>})  }</ul><ul>  {Object.keys(obj).map((item,index)=>{return <li key={ item }>属性：{ item }，属性值：{ ob[item] }<li > })   }</ul></li><li>组件基本认识<ul><li>函数组件就是函数，函数名称大写，有return值，return的是jsx，函数没有实例，没有生命周期，没有状态，<br>没有this, 函数组件我们也可以叫纯函数，参数不变的情况下，函数组件也不会变化。</li><li>类组件就继承react中的父类，重写了render函数，函数中有return值，return是jsx。</li><li>组件中jsx必须有唯一的跟标签，组件名称遵循大驼峰</li></ul></li><li>props<ul><li>类组件中可以this.props.属性 可以获取父组件的值。</li><li>函数组件通过props.属性获取父组件的值。</li><li>props只读，单项数据流，父组件更新数据，props中的数据也随之更新。props就是父组件流转给子组件的数据。</li></ul></li><li>事件<ul><li>语法：on + 事件类型（首字符大写） = 执行函数</li><li>event 事件对象是混合事件对象</li><li>react的事件对象和原生事件对象区别？<br> react为了更好的兼容性和跨平台。为了事件的统一管理，所有的事件绑定在document上，避免频繁解绑，提来性能。</li><li>this问题<br> =&gt;react中执行函数中默认是没有this的，需要手动传入，推荐使用箭头函数来作为我们的执行函数。</li></ul></li><li>props进阶<ul><li>props.children 类似vue中的匿名插槽，获取父组件中子组件占位符闭合标签中的内容。</li><li>props校验<br>=&gt; npm i -S prop-types<br>=&gt; 语法：组件名.propTypes = { //适用于类组件和函数组件<br>   arr:PropTypes.array //类型校验 number string bool fun object<br>}<br>=&gt; 类组件专属写法 static propTypes = { num:PropTypes.number }</li><li>props默认值<br> =&gt; 语法1:组件名.defaultProps = { num:0 } //定义默认值<br> =&gt; 语法2：static defaultProps = { num:0} //只适用于类组件。</li></ul></li><li>受控组件和ref使用（非受控组件）<br>=&gt; state = { inputVal:’’ }<br>=&gt; <input value={ this.state.inputVal } onInput={ this.handleClick }/><br>=&gt; handleClick = (e) =&gt; {<pre><code>this.setState(&#123; inputVal:e.target.value &#125;)</code></pre>}<br>// ref使用 简写<br><input value={ this.state.inputVal } ref={ (inputVal)=>{ this.inputVal = inputVal } }/&gt;<br>this.inputVal.value 就可以获取当前input的元素值</li><li>生命周期<br>挂载阶段：constructor getDerivedStateFromProps render componentDidMount（挂载后常用）<br>更新阶段：getDerivedStateFromProps  shouldComponentUpdate render getSnapshotBeforeUpdate<pre><code>      componentDidUpdate更新后</code></pre>销毁阶段： componentWillUnmount销毁前<br>废弃生命周期： componentWillMount 挂载前 componentWillReceiveProps props改变就执行<pre><code>       componentWillUpdate更新前</code></pre></li><li>组件通信<ul><li>父子通信<br> =&gt;父组件传递属性变量或者函数给子组件，子组件使用或者调用函数来实现父子通信。</li><li>跨层级通信<br> =&gt; 定义全局的context<pre><code> cosnt mycontext = React.createContext() //定义context 参数设置默认值 export default mycontext   //mycontext.Provder   mycontext.Consumer export default &#123; Provder,Consumer )</code></pre> =&gt; 祖先组件通过mycontext.Provder 通过value属性存入数据<br> =&gt;后代组件通过mycontext.Consumer 来获取数据</li><li>eventbus通信，事件总线通信<br> =&gt; 定义全局事件中心<pre><code>npm i -S eventsimport &#123; Emitter &#125; from &#39;events&#39;export default new EventEmitter()</code></pre> =&gt; 被调用组件添加自定义事件<br> =&gt; 调用组件通过bus.emit 触发自定义事件</li><li>redux</li></ul></li><li>传送门  Portal</li></ol><ul><li>作用：把某个子元素逃离父组件，逃离到body下面去。</li><li>语法：<br> {<br>   ReactDOM.createPortal(要逃离的子元素，document.body)<br> }</li></ul><ol><li>scu</li></ol><ul><li>作用：通过scu这个生命周期可以控制当前组件中的render要不要刷新，提高性能。</li><li>语法：<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params">nextProps,nextState</span>)</span>&#123;</span><br><span class="line">&#123;<span class="comment">/* suc要想正确使用，肯定要遵循不可变值 */</span>&#125;</span><br><span class="line">    <span class="keyword">if</span>(nextProps.arr == <span class="built_in">this</span>.state.arr)&#123; <span class="comment">// 父组件如果没有更新，我们就可以不更新render</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>suc简写<br>=&gt; 类组件直接继承 PureComponent 得到一个浅比较的suc。<br>=&gt; 函数组件的话，就使用memo这个高阶组件来实现浅比较的scu。</li></ul><ol><li>hoc 高阶组件<br>高阶组件，组件作为参数，并且返回一个新组件的函数组件，我们叫高阶组件。<br>作用：抽离公共功能，抽离公共逻辑。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HOC</span>(<span class="params">Component</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">newCom</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//&#123;...this.props&#125; 承上启下的作用</span></span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...this.props</span>&#125;/&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="记忆组件【计算属性】"><a href="#记忆组件【计算属性】" class="headerlink" title="记忆组件【计算属性】"></a>记忆组件【计算属性】</h2><blockquote><p>记忆组件 实现类似计算属性的功能</p></blockquote><p>记忆组件功能、特性：</p><ol><li>缓存性：在参数不变的情况下，直接使用之前缓存的值</li><li>依赖性：依赖的参数发生改变，函数就会重新计算</li></ol><blockquote><p>使用</p><ol><li>安装插件<br>npm i -S memoize-one</li><li>引入memoize-one<br>import Memoize from ‘memoize-one’</li><li>直接包裹函数</li><li>从memoize-one中引入memoize</li></ol></blockquote><p>代码如下：<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 记忆组件 实现类似计算属性的功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">记忆组件功能、特性：</span></span><br><span class="line"><span class="comment">1. 缓存性：在参数不变的情况下，直接使用之前缓存的值</span></span><br><span class="line"><span class="comment">2. 依赖性：依赖的参数发生改变，函数就会重新计算</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用：</span></span><br><span class="line"><span class="comment">1. 安装插件</span></span><br><span class="line"><span class="comment">npm i -S memoize-one</span></span><br><span class="line"><span class="comment">2. 引入memoize-one</span></span><br><span class="line"><span class="comment">import Memoize from &#x27;memoize-one&#x27;</span></span><br><span class="line"><span class="comment">3. 直接包裹函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 引入memoize-one</span></span><br><span class="line"><span class="keyword">import</span> Memoize <span class="keyword">from</span> <span class="string">&#x27;memoize-one&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoizeDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    getValue = Memoize(<span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;函数执行了加法函数：&#x27;</span>, x, y)</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>记忆组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.getValue(1, 2)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.getValue(1, 2)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.getValue(2, 2)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MemoizeDemo</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React笔记(六)</title>
      <link href="/archives/8ed1a3c9.html"/>
      <url>/archives/8ed1a3c9.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">eg：代表代码对照</mark> <mark class="hl-label pink">若文章有误，欢迎读者留言反馈</mark> <h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><blockquote><p>问题：在项目中某些情况下，子元素样式会受父元素样式的影响<br>传送门作用：让当前元素逃离父元素，去想去的地方【一般是body】<br>使用场景：</p><ol><li>overflow: hidden</li><li>父组件z - index值太小，逃离父组件</li><li>fixed需要放在body第一层级</li><li>loading  弹框 全局组件  也应该放在最外面</li></ol></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PortalDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;/* 当前div逃离当前父元素，然后去body下面,参数1 将要逃离的子元素，参数2 逃离到哪里去 */&#125;</span></span><br><span class="line"><span class="xml">                        &#123;/* 注意：样式和功能不变，只是最终的渲染位置跑到指定的位置。 */&#125;</span></span><br><span class="line"><span class="xml">                        &#123;</span></span><br><span class="line"><span class="xml">                            ReactDOM.createPortal(<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;portal-class&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>, document.body)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React中的Axios"><a href="#React中的Axios" class="headerlink" title="React中的Axios"></a>React中的Axios</h2><blockquote><p><code>Axios</code>发请求</p><ol><li><code>react</code>中通过npm来安装<code>axios</code>插件</li><li><code>npm i -S axios</code></li><li>引入`axios包</li></ol><p>挂载后，发送请求【组件渲染完成就开始发送请求，将请求到的数据渲染】</p><p>get方法请求[第一参数为请求接口地址,第二参数为对象,param形参名随意设定,但是里面params固定,简写{ params: id: 11, name: ‘aa’ }]</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法格式:</span></span><br><span class="line"><span class="comment">// axios.get(url, param: &#123; params: &#123; id: 11, name: &#x27;aa&#x27; &#125;&#125;).then(res =&gt; &#123; // 数据操作(res.data就是返回的数据) &#125;)</span></span><br><span class="line">axios.get(<span class="string">&#x27;https://api.i-lynn.cn/ip&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">this</span>.setState(&#123;<span class="attr">obj</span>: res.data&#125;))</span><br></pre></td></tr></table></figure><blockquote><p>post方法请求[第一参数为请求接口地址,第二参数为对象,简写{ firstName: ‘black’ }]</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法格式:</span></span><br><span class="line"><span class="comment">// axios.post(url, data: &#123; firstName: &#x27;black&#x27; &#125;).then(res =&gt; &#123; // 数据操作(res.data就是返回的数据) &#125;)</span></span><br><span class="line">axios.post(<span class="string">&#x27;https://api.i-lynn.cn/ip&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">this</span>.setState(&#123; <span class="attr">obj</span>: res.data &#125;))</span><br></pre></td></tr></table></figure><blockquote><p>对象写法【常规写法】</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get方式</span></span><br><span class="line">axios(&#123; <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;https://api.i-lynn.cn/ip&#x27;</span>, <span class="attr">params</span>: &#123;&#125;, <span class="attr">headers</span>: &#123;&#125; &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">obj</span>: res.data&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// post方式【后面data不一定非得data，如果data不行就使用params】</span></span><br><span class="line">axios(&#123; <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;https://api.i-lynn.cn/ip&#x27;</span>, <span class="attr">data</span>: &#123;&#125;, <span class="attr">headers</span>: &#123;&#125; &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">obj</span>: res.data&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>post方式也能使用params，拼接到url后面，具体原因分析：<a href="http://www.qianduanheidong.com/blog/article/319066/b5ef11c3754262a378ec/">http://www.qianduanheidong.com/blog/article/319066/b5ef11c3754262a378ec/</a></p><h3 id="eg1"><a href="#eg1" class="headerlink" title="eg1:"></a>eg1:</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Axios发请求</span></span><br><span class="line"><span class="comment">// 1. react中通过npm来安装axios插件</span></span><br><span class="line"><span class="comment">// 2. npm i -S axios</span></span><br><span class="line"><span class="comment">// 3. 引入axios包</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AxiosDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">obj</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 挂载后，发送请求【组件渲染完成就开始发送请求，将请求到的数据渲染】</span></span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// get方法请求[第一参数为请求接口地址,第二参数为对象,param形参名随意设定,但是里面params固定,简写&#123; params: id: 11, name: &#x27;aa&#x27; &#125;]</span></span><br><span class="line">        <span class="comment">// axios.get(url, param: &#123; params: &#123; id: 11, name: &#x27;aa&#x27; &#125;&#125;).then(res =&gt; &#123; // 数据操作(res.data就是返回的数据) &#125;)</span></span><br><span class="line">        <span class="comment">// axios.get(&#x27;https://api.i-lynn.cn/ip&#x27;).then(res =&gt; this.setState(&#123;obj: res.data&#125;))</span></span><br><span class="line">        <span class="comment">// post方法请求[第一参数为请求接口地址,第二参数为对象,简写&#123; firstName: &#x27;black&#x27; &#125;]</span></span><br><span class="line">        <span class="comment">// axios.post(url, data: &#123; firstName: &#x27;black&#x27; &#125;).then(res =&gt; &#123; // 数据操作(res.data就是返回的数据) &#125;)</span></span><br><span class="line">        <span class="comment">// axios.post(&#x27;https://api.i-lynn.cn/ip&#x27;).then(res =&gt; this.setState(&#123; obj: res.data &#125;))</span></span><br><span class="line">        <span class="comment">// 对象写法【常规写法】</span></span><br><span class="line">        <span class="comment">// axios(&#123; method: &#x27;get&#x27;, url: &#x27;https://api.i-lynn.cn/ip&#x27;, params: &#123;&#125;, headers: &#123;&#125; &#125;).then(res =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//     this.setState(&#123;obj: res.data&#125;)</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        axios(&#123; <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;https://api.i-lynn.cn/ip&#x27;</span>, <span class="attr">data</span>: &#123;&#125;, <span class="attr">headers</span>: &#123;&#125; &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">obj</span>: res.data&#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Axios发请求<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.obj.area&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.obj.country&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.obj.ip&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AxiosDemo</span><br></pre></td></tr></table></figure><p>post方式也能使用params，拼接到url后面，具体原因分析：<a href="http://www.qianduanheidong.com/blog/article/319066/b5ef11c3754262a378ec/">http://www.qianduanheidong.com/blog/article/319066/b5ef11c3754262a378ec/</a></p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><blockquote><p>反向代理用途:解决浏览器跨域问题<br>同源策略  <a href="http://localhost:8080">http://localhost:8080</a> 请求 <a href="https://api.i-lynn.cn/ip">https://api.i-lynn.cn/ip</a>  协议域名端口号有一个不同就报跨域错误。<br>如何解决跨域：</p><ol><li>前端: 反向代理</li><li>后端: <code>cors</code> 反向代理</li><li>服务器: <code>linux</code> 正向 反向代理</li></ol><p><code>React</code>的反向代理</p><ol><li>安装代理插件 <code>npm i -S http-proxy-middleware</code></li><li>在<code>src</code>目录下，创建一个<code>setupProxy.js</code>文件【该文件不需要引入到哪里，配置完就可以使用了】</li><li>开始配置反向代理</li></ol></blockquote><p>setupProxy.js文件配置代码如下[可以配置多个代理,例如/bpi]:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">createProxyMiddleware</span>: proxy &#125; = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 第一个参数api接口的别名</span></span><br><span class="line">    app.use(<span class="string">&#x27;/api&#x27;</span>, proxy(&#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;https://api.i-lynn.cn&#x27;</span>, <span class="comment">// 被代理的域名[我们真实请求接口地址的域名]</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 开启反向代理</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="comment">// 重定向[与接口别名保存一致]</span></span><br><span class="line">            <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="comment">// app.use(&#x27;/bpi&#x27;, proxy(&#123;</span></span><br><span class="line">    <span class="comment">//     target: &#x27;https://www.baidu.com&#x27;, // 被代理的域名[我们真实请求接口地址的域名]</span></span><br><span class="line">    <span class="comment">//     changeOrigin: true, // 开启反向代理</span></span><br><span class="line">    <span class="comment">//     pathRewrite: &#123; // 重定向[与接口别名保存一致]</span></span><br><span class="line">    <span class="comment">//         &#x27;^/bpi&#x27;: &#x27;&#x27;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;))</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 配置完之后使用/api替换域名</span></span><br></pre></td></tr></table></figure><blockquote><p>如何使用[以get为例]:</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 以get为例</span></span><br><span class="line">    axios.get(<span class="string">&#x27;/api/ip&#x27;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">obj</span>:res.data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>没做反向代理前</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10011.png" alt="没做反向代理前"></p><blockquote><p>做了反向代理后</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10012.png" alt="做了反向代理后"></p><h2 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h2><ol><li>异步引入组件[执行时不加载,需要用到的时候加载]</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Child = React.lazy(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./Child&#x27;</span>))</span><br></pre></td></tr></table></figure><ol><li>对比一下vue异步组件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">components: &#123; <span class="attr">Child</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./Child&#x27;</span>) &#125;</span><br></pre></td></tr></table></figure><ol><li>异步组件使用[使用React.Suspense标签包裹异步组件标签占位符]</li></ol><p><strong>fallback属性可选,fallback是异步引入的loading销毁，fallback可以放一些loading好看的效果,刷新几下可以看到效果</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;React.Suspense fallback=&#123;<span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>------loading--------<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>&#125;&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line">&lt;/React.Suspense&gt;</span><br></pre></td></tr></table></figure><ol><li>对比同步组件[直接使用]</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步组件使用</span></span><br><span class="line">&lt;ChildDemo /&gt;</span><br></pre></td></tr></table></figure><h2 id="SCU性能优化"><a href="#SCU性能优化" class="headerlink" title="SCU性能优化"></a>SCU性能优化</h2><p><strong>shouldComponentUpdate</strong>（简称<strong>SCU</strong>）</p><p>react里面父组件刷新，他所有子组件都会自动刷新,SCU可以解决某个子组件依赖数据不发生变化,而对其不刷新</p><p>SCU 一定要每次都用吗？—— 需要的时候才优化，没有特殊要求，可以先完成功能为主，后期再优化</p><p>num的变化，当前组件要刷新，但是Child组件依赖数据没有变化，所以Child组件可以不用刷新，性能提升的点。</p><blockquote><p>模拟场景：父组件里放一个num、arr，当我们更改num，父组件更新子组件无条件更新，而子组件依赖于arr，我们对子组件做性能优化（让其不更新）:</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">state = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">arr</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="comment">// arr是对象，就1层</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addHandle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">num</span>: <span class="built_in">this</span>.state.num+<span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>SCU单性能优化<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addHandle&#125;</span>&gt;</span>点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Child1</span> <span class="attr">arr</span>=<span class="string">&#123;this.state.arr&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们要对<code>Child1</code>子组件做<code>SCU</code>，性能优化，<code>this.props.arr</code>数组没有改变，<code>Child1</code>组件中的<code>render</code>就不用执行。</p></blockquote><ol><li>需要用到<code>shouldComponentUpdate(nextProps, nextState)</code></li><li><code>SCU</code>是<code>render</code>的开关，默认返回是<code>true</code>，默认情况下<code>render</code>是要被渲染的。</li><li><code>nextProps</code>是最新的<code>props</code>，并不等于<code>this.props</code>，所以我们可以判断<code>nextProps</code>和<code>this.props</code>是否相等就可以判断出数据有没有变化。</li><li><code>nextState</code>就是最新<code>state</code>.并不等于<code>this.state</code>这两个也可以进行SCU的比较。</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// SCU是render的开关，默认返回是true，默认情况下render是要被渲染的。</span></span><br><span class="line">    <span class="comment">// nextProps是最新的props，并不等于this.props，所以我们可以判断nextProps和this.props是否相等就可以判断出数据有没有变化。</span></span><br><span class="line">    <span class="comment">// nextState就是最新state.并不等于this.state 这两个也可以进行scu的比较。</span></span><br><span class="line">    <span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nextProps.arr === <span class="built_in">this</span>.props.arr) &#123; <span class="comment">//对象的1层的比较值，==是可以比较的</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// 不进行重新渲染</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 默认值，默认进行渲染</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Child1子组件渲染了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child1</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;</span></span><br><span class="line"><span class="xml">                    this.props.arr.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">                &#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面只是浅比较，深比较【递归，借助第三方模块】</p></blockquote><ol><li>安装插件：<code>npm i -S lodash</code></li><li>子组件需要做<code>SCU</code>引入<code>import _ from &#39;lodash&#39;</code></li><li><code>lodash</code>工具类 <code>_.isEqual(obj1,obj2)</code>递归比较对象的值是否相等  相等返回true</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">state = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">person</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">        <span class="attr">jobs</span>: [<span class="string">&#x27;前端&#x27;</span>, <span class="string">&#x27;后端&#x27;</span>] <span class="comment">// 多层的对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addHandle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="built_in">this</span>.state.num+<span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>SCU单性能优化<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addHandle&#125;</span>&gt;</span>点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Child3</span> <span class="attr">person</span>=<span class="string">&#123;this.state.person&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Child2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//nextProps.person  this.props.person 比较这两个对象的值是不是发生改变。递归</span></span><br><span class="line">        <span class="comment">// lodash 工具类 _.isEqual（obj1,obj2）递归比较对象的值是否相等  相等返回true</span></span><br><span class="line">        <span class="keyword">var</span> b = _.isEqual(nextProps.person, <span class="built_in">this</span>.props.person)</span><br><span class="line">        <span class="keyword">if</span> (b) <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// 不进行重新渲染</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 默认值，默认进行渲染</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;child2更新了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child2</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.props.person.jobs&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类组件还自带一个浅比较的SCU,继承<code>PureComponent</code>来实现</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">state = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">arr</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] <span class="comment">// arr是对象，就1层</span></span><br><span class="line">&#125;</span><br><span class="line">addHandle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="built_in">this</span>.state.num+<span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>SCU单性能优化<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addHandle&#125;</span>&gt;</span>点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Child3</span> <span class="attr">arr</span>=<span class="string">&#123;this.state.arr&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件【注意引入的是PureComponent】</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类组件自带一个浅比较的SCU，继承PureComponent来实现，注意：数据的浅比较</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Child3</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Child3子组件渲染了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child3</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;</span></span><br><span class="line"><span class="xml">                    this.props.arr.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">                &#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>函数组件可以使用memo高阶组件来实现浅比较的SCU</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">state = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">arr</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] <span class="comment">// arr是对象，就1层</span></span><br><span class="line">&#125;</span><br><span class="line">addHandle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="built_in">this</span>.state.num+<span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>SCU单性能优化<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addHandle&#125;</span>&gt;</span>点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Child4</span> <span class="attr">arr</span>=<span class="string">&#123;this.state.arr&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件【注意引入的是高阶组件memo】</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 函数组件可以使用memo高阶组件来实现浅比较的scu</span></span><br><span class="line"><span class="comment">// 高阶组件，组件作为参数，组件作为返回值，当前组件就叫高阶组件。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child5</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Child4 更新了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child4</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;</span></span><br><span class="line"><span class="xml">            props.arr.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#125;)</span></span><br><span class="line"><span class="xml">        &#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> memo(Child4)</span><br></pre></td></tr></table></figure><blockquote><p>函数组件的深比较</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">state = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">jobs</span>: [<span class="string">&#x27;前端&#x27;</span>, <span class="string">&#x27;后端&#x27;</span>] <span class="comment">// 多层的对象</span></span><br><span class="line">&#125;</span><br><span class="line">addHandle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="built_in">this</span>.state.num+<span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>SCU单性能优化<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addHandle&#125;</span>&gt;</span>点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Child5</span> <span class="attr">person</span>=<span class="string">&#123;this.state.person&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="comment">// 函数组件深比较案例</span></span><br><span class="line"><span class="keyword">const</span> Child6 = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Child5更新了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child5</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.person.jobs&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用来比较nextProps中的person 和 props.person两个的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatchObj</span>(<span class="params">nextPros, props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = _.isEqual(nextPros.person, props.person) <span class="comment">//b true代表相等</span></span><br><span class="line">    <span class="comment">// b===true返回true  b===false返回false</span></span><br><span class="line">    <span class="keyword">if</span> (b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// memo如果进行深度比较，参数2就是我们的比较函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> memo(Child5, dispatchObj)</span><br></pre></td></tr></table></figure><h3 id="SCU小结："><a href="#SCU小结：" class="headerlink" title="SCU小结："></a>SCU小结：</h3><ul><li>类组件自带一个浅比较继承自<code>PureComponent</code>，不需要我们去做判断，同时如果对象只有一层我们也可以使用<code>shouldComponentUpdate</code>直接使用<code>===</code>比较，深比较依旧是可以借助递归或工具类<code>lodash</code></li><li>函数组件需要通过<code>memo</code>高阶组件来进行浅比较，不需要我们去做判断，深比较需要借助<code>memo</code>高阶组件和<code>lodash</code></li></ul><h2 id="HOC高阶组件【函数组件】"><a href="#HOC高阶组件【函数组件】" class="headerlink" title="HOC高阶组件【函数组件】"></a>HOC高阶组件【函数组件】</h2><ol><li>高阶组件一般是函数组件，参数是组件，返回值也还是一个组件。</li><li>高阶组件是为了提取公共功能用的，公共逻辑。高阶组件写越得越多说明能力越强，质量越高。</li><li>封装高阶组件，创建函数组件，传入一个组件作为参数，return一个类组件，这个类组件相当于穿插到了父子组件之间</li><li>使用：引入高阶组件，把高阶组件当函数用就行了【哪个组件需要这个高阶组件功能就往哪里引入，调用】</li></ol><blockquote><p>父组件<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HOCDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Child</span> <span class="attr">arr</span>=<span class="string">&#123;this.state.arr&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HOCDemo</span><br></pre></td></tr></table></figure></p><p>开始封装高阶组件<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hoc 高阶组件</span></span><br><span class="line"><span class="comment">// 高阶组件一般是函数组件，把组件作为参数传递进去，返回值还是一个组件</span></span><br><span class="line"><span class="comment">// 高阶组件是为了提取公共功能、公共逻辑用的。高阶组件写越多说明能力越强，质量越高。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 封装高阶组件，创建函数组件，传入一个组件作为参数，return一个类组件，这个类组件相当于穿插到了父子组件之间</span></span><br><span class="line"><span class="comment">// 2. 使用：引入高阶组件，把高阶组件当函数用就行了【哪个组件需要这个高阶组件功能就往哪里引入，调用】</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HOC = <span class="function">(<span class="params">COM</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">newCom</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;/* &#123;...this.props&#125; 承上启下 高阶组件必须携带，否则出现父子通信中断的bug */&#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">COM</span> &#123;<span class="attr">...this.props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HOC</span><br></pre></td></tr></table></figure></p><p>子组件调用高阶组件</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入高阶组件</span></span><br><span class="line"><span class="keyword">import</span> HOC <span class="keyword">from</span> <span class="string">&#x27;./HOC&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        this.props.arr.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                            return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#125;)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用高阶组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HOC(Child)</span><br></pre></td></tr></table></figure><blockquote><p>开启装饰器模式，使用高阶组件语法糖@</p><p>装饰器模式的配置步骤：</p></blockquote><ol><li><p>配置装饰器支持<br>在当前项目根目录下面创建一个名称为config-overrides.js文件，对webpack进行配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// react 配置文件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;override,addDecoratorsLegacy,disableEsLint,addWebpackAlias&#125; = <span class="built_in">require</span>(<span class="string">&quot;customize-cra&quot;</span>)</span><br><span class="line"><span class="comment">// 配置项 覆盖webpack某些配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">    disableEsLint(), <span class="comment">// 在webpack中禁用eslint</span></span><br><span class="line">    addDecoratorsLegacy(), <span class="comment">// 开启装饰器</span></span><br><span class="line">    addWebpackAlias(&#123; <span class="comment">// 路径别名配置</span></span><br><span class="line">        [<span class="string">&quot;@&quot;</span>]: path.resolve(__dirname, <span class="string">&quot;./src&quot;</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>npm i -D customize-cra react-app-rewired</p></li><li>到package.json中的script命令中修改”start”: “react-app-rewired start”</li></ol><p><strong>会出现的bug:</strong><br>对装饰器的实验支持功能在将来的版本中可能更改。在 “tsconfig” 或 “jsconfig” 中设置 “experimentalDecorators” 选项以删除此警告。ts(1219)(<a href="https://www.cnblogs.com/Annely/p/14613567.html">https://www.cnblogs.com/Annely/p/14613567.html</a>)</p><ol><li>npm i @babel/plugin-proposal-decorators -D</li><li>项目根目录下创建babel.config.js 或者 .babelrc.js，复制粘贴如下代码：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">presets</span>: [</span><br><span class="line">[<span class="string">&quot;@babel/preset-env&quot;</span>], <span class="comment">// ES语法转换</span></span><br><span class="line">],</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        [<span class="string">&#x27;@babel/plugin-proposal-decorators&#x27;</span>, &#123; <span class="string">&#x27;legacy&#x27;</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><code>vscode</code>的设置里搜索<code>Experimental Decorators</code>打勾如下图</li></ol><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10047.png" alt="img"></p><p>开启装饰器之后，使用语法糖：<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高阶组件语法糖</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入高阶组件</span></span><br><span class="line"><span class="keyword">import</span> HOC <span class="keyword">from</span> <span class="string">&#x27;./HOC&#x27;</span></span><br><span class="line"><span class="comment">// 装饰器模式  语法糖</span></span><br><span class="line"><span class="comment">// 调用高阶组件</span></span><br><span class="line">@HOC</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        this.props.arr.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                            return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#125;)</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HOC(Child)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React笔记(五)</title>
      <link href="/archives/17deebbb.html"/>
      <url>/archives/17deebbb.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">eg：代表代码对照</mark> <mark class="hl-label pink">若文章有误，欢迎读者留言反馈</mark> <h2 id="知识点回顾"><a href="#知识点回顾" class="headerlink" title="知识点回顾"></a>知识点回顾</h2><ol><li>插值 {}  变量，表达式，函数调用 ☞ 落脚点是值</li><li>动态属性  属性={ 变量 }</li><li>样式写法  <code>className=&#123; 变量 &#125;</code>   <code>className=&#123;&#39;active btn&#39;&#125;</code>  <code>className=&#123; arr.join(&#39; &#39;) &#125;</code><br><code>style=&#123;&#123; fontSize:'12px',color:变量 &#125;&#125;</code></li><li>循环</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;arr.map(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;</span> <span class="attr">item.id</span> &#125;&gt;</span>&#123; item &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>&#125;)  &#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;</span></span><br><span class="line"><span class="xml">        Object.keys(obj).map((item,index)=&gt;&#123;return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;</span> <span class="attr">item</span> &#125;&gt;</span>属性：&#123; item &#125;，属性值：&#123; ob[item] &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> &#125;)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol><li>组件基本认识<ul><li>函数组件就是函数，函数名称大写，有return值，return的是jsx，函数没有实例，没有生命周期，没有状态，没有this, 函数组件我们也可以叫纯函数，参数不变的情况下，函数组件也不会变化。</li><li>类组件就继承react中的父类，重写了render函数，函数中有return值，return是jsx。</li><li>组件中jsx必须有唯一的跟标签，组件名称遵循大驼峰</li></ul></li><li>props<ul><li>类组件中可以this.props.属性 可以获取父组件的值。</li><li>函数组件通过props.属性获取父组件的值。</li><li>props只读，单项数据流，父组件更新数据，props中的数据也随之更新。props就是父组件流转给子组件的数据。</li></ul></li><li>事件<ul><li>语法：on + 事件类型（首字符大写） = 执行函数</li><li>event 事件对象是混合事件对象</li><li>react的事件对象和原生事件对象区别？<br> react为了更好的兼容性和跨平台。为了事件的统一管理，所有的事件绑定在document上，避免频繁解绑，提来性能。</li><li>this问题<br> =&gt;react中执行函数中默认是没有this的，需要手动传入，推荐使用箭头函数来作为我们的执行函数。</li></ul></li><li><p>props进阶</p><ul><li>props.children 类似vue中的匿名插槽，获取父组件中子组件占位符闭合标签中的内容。</li><li><p>props校验</p><ul><li>npm i -S prop-types</li><li><p>语法:</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">组件名.propTypes = &#123; <span class="comment">// 适用于类组件和函数组件</span></span><br><span class="line">            <span class="attr">arr</span>: PropTypes.array <span class="comment">// 类型校验 number string bool fun object</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类组件专属写法 static propTypes = { num:PropTypes.number }</p></li></ul></li><li>props默认值<ul><li>语法1: 组件名.defaultProps = { num:0 } // 定义默认值</li><li>语法2: static defaultProps = { num:0} // 只适用于类组件</li></ul></li></ul></li><li><p>受控组件和ref使用（非受控组件）</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">state = &#123; <span class="attr">inputVal</span>:<span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">&lt;input value=&#123; <span class="built_in">this</span>.state.inputVal &#125; onInput=&#123; <span class="built_in">this</span>.handleClick &#125;/&gt;</span><br><span class="line">handleClick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">inputVal</span>:e.target.value &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> ref使用 简写</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value=&#123; <span class="built_in">this</span>.state.inputVal &#125; ref=&#123; <span class="function">(<span class="params">inputVal</span>)=&gt;</span>&#123; <span class="built_in">this</span>.inputVal = inputVal &#125; &#125;/&gt;</span><br><span class="line"><span class="built_in">this</span>.inputVal.value  <span class="comment">// 就可以获取当前input的元素值</span></span><br></pre></td></tr></table></figure></li><li><p>生命周期</p><ul><li>挂载阶段：constructor getDerivedStateFromProps render componentDidMount（挂载后常用）</li><li>更新阶段：getDerivedStateFromProps  shouldComponentUpdate render getSnapshotBeforeUpdate componentDidUpdate更新后</li><li>销毁阶段：componentWillUnmount销毁前</li><li>废弃生命周期：componentWillMount 挂载前 componentWillReceiveProps props改变就执行 componentWillUpdate更新前</li></ul></li><li>组件通信<ul><li>父子通信<ul><li>父组件传递属性变量或者函数给子组件，子组件使用或者调用函数来实现父子通信。</li></ul></li><li>跨层级通信</li><li>eventBus通信，事件总线通信</li><li>redux</li></ul></li></ol><h2 id="React的受控组件"><a href="#React的受控组件" class="headerlink" title="React的受控组件"></a>React的受控组件</h2><blockquote><p>受控组件[类似vue中的双向绑定v-model]，input这个元素受state中某个变量的控制【但是需要自己实现】</p></blockquote><p>使用方法：</p><ol><li>定义一个state中变量，元素上使用value属性，把这个值绑定上去</li><li>元素上添加onChange事件，当前元素进行修改的使用，state变量值随之改变。</li></ol><blockquote><p>个人理解：先在state中定义变再量把值绑定到输入框上，再通过事件、事件对象把值取回来存放到state中【双向绑定实现原理】</p><p>普通输入框</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">    <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, <span class="comment">// input框用户名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 普通输入框</span></span><br><span class="line">handleA = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">username</span>: e.target.value <span class="comment">// react没有封装双向绑定，需要我们自己实现</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsx模板</span></span><br><span class="line">&lt;p&gt;&#123; <span class="built_in">this</span>.state.username &#125;&lt;/p&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;</span> <span class="attr">this.state.username</span> &#125; <span class="attr">onInput</span>=<span class="string">&#123;</span> <span class="attr">this.handleA</span> &#125; <span class="attr">placeholder</span>=<span class="string">&#x27;请输入用户名&#x27;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>文本域textarea</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">    <span class="attr">textField</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 文本域</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 文本域</span></span><br><span class="line">handleB = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">       <span class="attr">textField</span>: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsx模板</span></span><br><span class="line">&#123;<span class="comment">/* 文本域 */</span>&#125;</span><br><span class="line">&lt;p&gt;&#123;<span class="built_in">this</span>.state.textField&#125;&lt;/p&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">value</span>=<span class="string">&#123;this.state.textField&#125;</span> <span class="attr">onInput</span>=<span class="string">&#123;this.handleB&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>下拉框【它的值在select身上，同时一般结合映射对象，value值会使用1，2，3，通过对象中括号语法映射成需要显示的 字符串】</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">    <span class="attr">selectVal</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 下拉框</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下拉框【它的值在select身上】</span></span><br><span class="line">handleC = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">selectVal</span>: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsx模板</span></span><br><span class="line">&#123;<span class="comment">/* 下拉框【它的值在select身上】 ，同时一般结合映射对象，value值会使用1，2，3，通过对象中括号语法映射成需要显示的字符串 */</span>&#125;</span><br><span class="line">&lt;select value=&#123;<span class="built_in">this</span>.state.selectVal&#125; onChange=&#123;<span class="built_in">this</span>.handleC&#125;&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>全部<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;上海&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;北京&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;深圳&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><blockquote><p>单选按钮</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">    <span class="attr">radioVal</span>: <span class="string">&#x27;male&#x27;</span>, <span class="comment">// 单选按钮</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 单选按钮</span></span><br><span class="line">handleD = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">radioVal</span>: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsx模板</span></span><br><span class="line">&#123;<span class="comment">/* 单选按钮 */</span>&#125;</span><br><span class="line">&lt;p&gt;&#123;<span class="built_in">this</span>.state.radioVal&#125;&lt;/p&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleD&#125;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.radioVal</span> === <span class="string">&#x27;male&#x27;</span>&#125;/&gt;</span></span></span><br><span class="line">&#123;<span class="comment">/* react中用的htmlFor来实现label的绑定，vue中使用的是for这个属性 */</span>&#125;</span><br><span class="line">&lt;label htmlFor=<span class="string">&quot;male&quot;</span>&gt;&lt;/label&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleD&#125;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.radioVal</span> === <span class="string">&#x27;female&#x27;</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;female&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>复选框【单个使用】</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">    <span class="attr">checkVal</span>: <span class="literal">false</span>, <span class="comment">// checkbox绑定的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 复选框单个使用[不绑定value,通过布尔值取反]</span></span><br><span class="line">handleE = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">checkVal</span>: !<span class="built_in">this</span>.state.checkVal</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsx模板</span></span><br><span class="line">&#123;<span class="comment">/* 复选框checkbox */</span>&#125;</span><br><span class="line">&#123;<span class="comment">/* 单个使用，不绑定value,通过布尔值取反决定选中状态 */</span>&#125;</span><br><span class="line">&lt;p&gt;&#123;<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.state.checkVal)&#125;&lt;/p&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleE&#125;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.checkVal&#125;</span> /&gt;</span></span>大武汉</span><br></pre></td></tr></table></figure><blockquote><p>复选框【多个使用】</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">    <span class="attr">checkArr</span>: [], <span class="comment">// 选中的checkbox的value的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 复选框多个使用</span></span><br><span class="line">handleF = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.state.checkArr))</span><br><span class="line">    <span class="keyword">var</span> val = e.target.value</span><br><span class="line">    <span class="keyword">var</span> index = arr.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item===val)</span><br><span class="line">    <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">        arr.push(val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        arr.splice(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">checkArr</span>: arr</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsx模板</span></span><br><span class="line">&#123;<span class="comment">/* 多个使用，绑定value值，通过判断数组是否包含决定选中状态 */</span>&#125;</span><br><span class="line">&lt;p&gt;&#123;<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.state.checkArr)&#125;&lt;/p&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Wuhan&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleF&#125;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.checkArr.includes(</span>&#x27;<span class="attr">Wuhan</span>&#x27;)&#125; /&gt;</span></span>大武汉</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;Beijing&quot;</span> onChange=&#123;<span class="built_in">this</span>.handleF&#125; checked=&#123;<span class="built_in">this</span>.state.checkArr.includes(<span class="string">&#x27;Beijing&#x27;</span>)&#125; /&gt;老北京</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;Shanghai&quot;</span> onChange=&#123;<span class="built_in">this</span>.handleF&#125; checked=&#123;<span class="built_in">this</span>.state.checkArr.includes(<span class="string">&#x27;Shanghai&#x27;</span>)&#125; /&gt;大上海</span><br></pre></td></tr></table></figure><h3 id="eg1"><a href="#eg1" class="headerlink" title="eg1:"></a>eg1:</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,<span class="comment">//input框用户名</span></span><br><span class="line">        <span class="attr">textField</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//文本域</span></span><br><span class="line">        <span class="attr">selectVal</span>: <span class="string">&#x27;&#x27;</span>,<span class="comment">//下拉框</span></span><br><span class="line">        <span class="attr">radioVal</span>: <span class="string">&#x27;male&#x27;</span>,<span class="comment">//单选按钮</span></span><br><span class="line">        <span class="attr">checkVal</span>: <span class="literal">false</span>,<span class="comment">//checkbox绑定的值</span></span><br><span class="line">        <span class="attr">checkArr</span>: [],<span class="comment">//选中的checkbox的value的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 普通输入框</span></span><br><span class="line">    handleA = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">username</span>: e.target.value <span class="comment">// react没有封装双向绑定，需要我们自己实现</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 文本域</span></span><br><span class="line">    handleB = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> arr = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.state.checkArr))</span><br><span class="line">        <span class="keyword">var</span> val = e.target.value</span><br><span class="line">        <span class="keyword">var</span> index = arr.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item === val)</span><br><span class="line">        <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">            arr.push(val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr.splice(index, <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">checkArr</span>: arr</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 下拉框【它的值在select身上】</span></span><br><span class="line">    handleC = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">selectVal</span>: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 单选按钮</span></span><br><span class="line">    handleD = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">radioVal</span>: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 复选框单个使用[不绑定value,通过布尔值取反]</span></span><br><span class="line">    handleE = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">checkVal</span>: !<span class="built_in">this</span>.state.checkVal</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 复选框多个使用</span></span><br><span class="line">    handleF = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> arr = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.state.checkArr))</span><br><span class="line">        <span class="keyword">var</span> val = e.target.value</span><br><span class="line">        <span class="keyword">var</span> index = arr.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item===val)</span><br><span class="line">        <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">            arr.push(val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr.splice(index, <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">checkArr</span>: arr</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>受控组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 普通输入框 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.username&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.state.username&#125;</span> <span class="attr">onInput</span>=<span class="string">&#123;this.handleA&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;请输入用户名&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 文本域 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.textField&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">value</span>=<span class="string">&#123;this.state.textField&#125;</span> <span class="attr">onInput</span>=<span class="string">&#123;this.handleB&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 下拉框【它的值在select身上，同时一般会结合映射对象(自行创建好这个映射对象)，value值会使用1，2，3这种，而表单中的各元素取值都是字符串类型，再通过对象中括号语法映射成需要显示的字符串】 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.selectVal&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;this.state.selectVal&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleC&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>全部<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;上海&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;北京&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;深圳&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 单选按钮 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.radioVal&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleD&#125;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.radioVal</span> === <span class="string">&#x27;male&#x27;</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* react中用的htmlFor来实现label的绑定，vue中使用的是for这个属性 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;male&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleD&#125;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.radioVal</span> === <span class="string">&#x27;female&#x27;</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;female&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 复选框checkbox */&#125;</span></span><br><span class="line"><span class="xml">                &#123;/* 单个使用，不绑定value,通过布尔值取反决定选中状态 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;JSON.stringify(this.state.checkVal)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleE&#125;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.checkVal&#125;</span> /&gt;</span>大武汉</span></span><br><span class="line"><span class="xml">                &#123;/* 多个使用，绑定value值，通过判断数组是否包含决定选中状态 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;JSON.stringify(this.state.checkArr)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Wuhan&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleF&#125;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.checkArr.includes(</span>&#x27;<span class="attr">Wuhan</span>&#x27;)&#125; /&gt;</span>大武汉</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Beijing&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleF&#125;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.checkArr.includes(</span>&#x27;<span class="attr">Beijing</span>&#x27;)&#125; /&gt;</span>老北京</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Shanghai&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleF&#125;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.checkArr.includes(</span>&#x27;<span class="attr">Shanghai</span>&#x27;)&#125; /&gt;</span>大上海</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ModelDemo</span><br></pre></td></tr></table></figure><h2 id="非受控组件，ref的使用"><a href="#非受控组件，ref的使用" class="headerlink" title="非受控组件，ref的使用"></a>非受控组件，ref的使用</h2><blockquote><p>react中ref 不止获取dom元素，也可以获取子组件的实例</p></blockquote><ol><li>获取dom元素进而获取元素的值，通过ref内联方式<strong>快速获取</strong></li></ol><p>ref内联方式，ref传入的实参username，是对该元素的标记===能获取该元素，挂到组件的username属性上，这样就能直接通过this.username获取到该元素</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">handleA = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;获取用户名&#x27;</span>, <span class="built_in">this</span>.username.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsx模板</span></span><br><span class="line">&lt;input ref=&#123;<span class="function"><span class="params">username</span> =&gt;</span> <span class="built_in">this</span>.username = username&#125; type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&#x27;请输入用户名&#x27;</span> /&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleA&#125;</span>&gt;</span>登录A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol><li>获取dom元素进而获取元素的值，引入<code>createRef</code>,通过构造器定义一个ref，再去模板上给对应元素绑定ref属性</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引入createRef</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component, createRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定义一个ref出来</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">    <span class="built_in">this</span>.pwd = createRef()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleB = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;获取密码&#x27;</span>, <span class="built_in">this</span>.pwd.current.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsx模板</span></span><br><span class="line">&#123;<span class="comment">/* 3. 绑定ref属性 */</span>&#125;</span><br><span class="line">&lt;input ref=&#123;<span class="built_in">this</span>.pwd&#125; type=<span class="string">&quot;pwd&quot;</span> placeholder=<span class="string">&#x27;请输入密码&#x27;</span>/&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleB&#125;</span>&gt;</span>登录B<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol><li>获取子组件里面的数据即state中的值，引入<code>createRef</code>,通过构造器定义一个ref，再去模板上给子组件占位标签绑定ref属性</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="comment">// 1. 引入createRef</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component, createRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定义一个ref出来</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">    <span class="built_in">this</span>.child = createRef()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleC = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;获取子组件中的state&#x27;</span>, <span class="built_in">this</span>.child.current.state) <span class="comment">// 获取到子组件中state对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;获取子组件中的state里面的值&#x27;</span>, <span class="built_in">this</span>.child.current.state.num) <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsx模板</span></span><br><span class="line">&#123;<span class="comment">/* 获取子组件里面的数据即state中的值 */</span>&#125;</span><br><span class="line">&lt;Child ref=&#123;<span class="built_in">this</span>.child&#125; /&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleC&#125;</span>&gt;</span>登录C<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                Child</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Child</span><br></pre></td></tr></table></figure><h2 id="React的生命周期"><a href="#React的生命周期" class="headerlink" title="React的生命周期"></a>React的生命周期</h2><blockquote><p>生命周期:</p><ul><li>挂载阶段：constructor getDerivedStateFromProps render componentDidMount（常用）</li><li>更新阶段：getDerivedStateFromProps  shouldComponentUpdate render getSnapshotBeforeUpdate<pre><code>         componentDidUpdate更新后</code></pre></li><li>销毁阶段： componentWillUnmount销毁前</li><li>废弃生命周期： componentWillMount 挂载前 componentWillReceiveProps props改变就执行<pre><code>          componentWillUpdate更新前</code></pre></li></ul><p>挂载阶段，挂载前通过constructor继承父类，获取props和state</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;constructor初始化组件时候执行一次，继承父类，获取props和state&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>挂载阶段，挂载前的render,把jsx模板转化成vdom，多次调用</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;render 把jsx模板转化成vdom，多次调用&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>挂载阶段：挂载后，dom节点渲染完毕再执行</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;componentDidMount 挂载后，dom节点渲染完毕在执行&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>更新阶段，同步父组件props到当前组件中的state</p></blockquote><p><strong>nextProps是最新的props，prevState是上一个状态的state</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">getDerivedStateFromProps</span>(<span class="params">nextProps, prevState</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;getDerivedStateFromProps 同步父组件props到当前组件中的state&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>更新阶段，shouldComponentUpdate简称SCU做性能优化，return true标识render会执行，false标识render不执行</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;shouldComponentUpdate 做性能优化，return true标识render会执行，false标识render不执行&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>更新阶段，修改更新后</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;componentDidUpdate 修改后&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>销毁阶段，销毁前</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;componentWillUnmount 销毁前&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数据发生改变，更新</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">handleClick = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">num</span>:<span class="built_in">this</span>.state.num+<span class="number">1</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsx模板</span></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;render 把jsx模板转化成vdom，多次调用&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>生命周期<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; this.state.num &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.handleClick</span> &#125;&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="父子通信"><a href="#父子通信" class="headerlink" title="父子通信"></a>父子通信</h2><blockquote><p>父往子通信<br>父组件的数据动态属性绑定在子组件占位符，子组件通过props获取即可。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">state = &#123;</span><br><span class="line">    <span class="attr">arr</span>: [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">username</span>: <span class="string">&#x27;小明&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">username</span>: <span class="string">&#x27;小洪&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">username</span>: <span class="string">&#x27;小李&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件jsx模板</span></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Child</span> <span class="attr">arr</span>=<span class="string">&#123;this.state.arr&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件jsx模板</span></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;</span></span><br><span class="line"><span class="xml">                this.props.arr.map(item =&gt; <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.username&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>子往父通信<br>父组件把某个函数动态属性绑定到子组件的占位符，子组件通过props回调这个函数并传参即可。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">addHandle = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;触发了&#x27;</span>, val)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">arr</span>: <span class="built_in">this</span>.state.arr.concat(&#123; <span class="comment">// 注意concat参数可以是其它类型元素，不一定非是数组，同时它不影响原数组</span></span><br><span class="line">            <span class="attr">id</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span><br><span class="line">            <span class="attr">username</span>: val</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件jsx模板</span></span><br><span class="line">&lt;Child arr=&#123;<span class="built_in">this</span>.state.arr&#125; addHandle=&#123;<span class="built_in">this</span>.addHandle&#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件jsx模板</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onKeyDown</span>=<span class="string">&#123;this.handleClick&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;username</span> =&gt;</span> this.username=username&#125; type=&quot;text&quot; placeholder=&#x27;请输入用户名&#x27;/&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">this</span>.props.arr.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.username&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleClick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.keyCode === <span class="number">13</span>) &#123; <span class="comment">// 回车键</span></span><br><span class="line">        <span class="keyword">var</span> val = <span class="built_in">this</span>.username.value <span class="comment">// 通过ref获取元素再取值</span></span><br><span class="line">        <span class="built_in">this</span>.props.addHandle(val) <span class="comment">// 通过props回调父组件传递的函数即可</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨层级通信"><a href="#跨层级通信" class="headerlink" title="跨层级通信"></a>跨层级通信</h2><p>在实际的项目中，当需要组件间跨级访问信息时，如果还使用组件层层传递props，此时代码显得不那么优雅，甚至有些冗余。在react中，我们还可以使用context来实现跨级父子组件间的通信。</p><p>Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据。</p><p>在React的Context中，数据我们可当成商品，发布数据的组件会用provider身份（卖方），接收数据的组件使用consumer身份（卖方）</p><p>步骤：</p><ol><li>定义全局context，全局数据源</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义全局context，全局数据源创建一个context.js文件]</span></span><br><span class="line"><span class="comment">// import &#123; createContext &#125; from &quot;react&quot;</span></span><br><span class="line"><span class="comment">// export default createContext()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者下面这种写法</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createContext(<span class="string">&#x27;1000&#x27;</span>)  <span class="comment">//创建全局context出来，全局数据载体,设置默认值</span></span><br></pre></td></tr></table></figure><ol><li><p>方案一：适用类组件和函数组件<br>引入全局context到提供商品的组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 祖先-&gt;Child1-&gt;Child2</span></span><br><span class="line"><span class="comment">// 祖先组件 [提供数据]</span></span><br><span class="line"><span class="keyword">import</span> Child1 <span class="keyword">from</span> <span class="string">&#x27;./Child1&#x27;</span> <span class="comment">// 在上面，不能在context下面</span></span><br><span class="line"><span class="keyword">import</span> context <span class="keyword">from</span> <span class="string">&quot;../context&quot;</span></span><br><span class="line"><span class="comment">// provider是用来给后代传递数据的，value就是传递的数据</span></span><br><span class="line"><span class="keyword">let</span> &#123; Provider &#125; = context</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="number">100</span>, <span class="comment">// 基础</span></span><br><span class="line">        <span class="attr">arr</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] <span class="comment">// 引用</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>跨层级通信<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* provider是用来给后代传递数据的，value就是传递的数据 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&#123;this.state.num&#125;</span>&gt;</span> // 不能直接传递state</span></span><br><span class="line"><span class="xml">                    &#123;/* 子组件1 */&#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Child1</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child1 [不需要什么操作]</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child1</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Child1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 子组件2 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Child2</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child2 [购买数据]  需要context</span></span><br><span class="line"><span class="keyword">import</span> context <span class="keyword">from</span> <span class="string">&quot;../context &quot;</span></span><br><span class="line"><span class="comment">// 后代获取祖先组件传递的值 Consumer获取祖先组件的数据</span></span><br><span class="line"><span class="keyword">let</span> &#123; Consumer &#125; = context</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Child2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;</span></span><br><span class="line"><span class="xml">                        value =&gt; &#123;</span></span><br><span class="line"><span class="xml">                            return <span class="tag">&lt;<span class="name">div</span>&gt;</span>获取到的数据：&#123;value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方案二，只适用于类组件，通过this.context 拿到我们的值,可以在任意地方使用</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 祖先组件</span></span><br><span class="line"><span class="keyword">import</span> Child1 <span class="keyword">from</span> <span class="string">&#x27;./Child1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入context对象</span></span><br><span class="line"><span class="keyword">import</span> context <span class="keyword">from</span> <span class="string">&quot;../context&quot;</span></span><br><span class="line"><span class="keyword">let</span> &#123; Provider &#125; = context</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">arr</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>跨层级通信<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* Provider是用来给后代传递数据的，value就是传递的数据 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&#123;this.state&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;/* 子组件1 */&#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Child1</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child2  也需要context</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> context <span class="keyword">from</span> <span class="string">&quot;../context&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类组件可以通过静态的属性 contextType来接收全局的context数据</span></span><br><span class="line">    <span class="keyword">static</span> contextType = context</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Child2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 方案2 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.context.arr&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>两者区别：方案一与方案二如果祖先提供this.state，那么方案一需要value.arr取值，方案二直接this.context就是arr；如果祖先提供this.state.arr，那么方案一value直接就是arr，方案二需要this.context.arr取值</li></ol><h2 id="Bus通信"><a href="#Bus通信" class="headerlink" title="Bus通信"></a>Bus通信</h2><blockquote><p>bus通信：任何两个毫无相关的组件都可以使用bus通信来进行传递。</p></blockquote><p>步骤：</p><ol><li><p>安装插件<code>npm i -S events</code>，创建一个eventBus文件，定义全局事件中心并抛出</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.定义全局的事件中心  抛出</span></span><br><span class="line"><span class="keyword">import</span> &#123; EventEmitter &#125; <span class="keyword">from</span> <span class="string">&#x27;events&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> EventEmitter()</span><br></pre></td></tr></table></figure></li><li><p>发送自定义事件的组件</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入eventBus</span></span><br><span class="line"><span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">&#x27;../eventBus&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child1</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">    handle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 通过emit发送事件并携带数据</span></span><br><span class="line">        eventBus.emit(<span class="string">&#x27;handleClick&#x27;</span>, <span class="built_in">this</span>.state.num)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Child1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handle&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>添加自定义事件的组件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">&#x27;../eventBus&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 挂载后</span></span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        eventBus.addListener(<span class="string">&#x27;handleClick&#x27;</span>, <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;触发了&#x27;</span>, val) <span class="comment">// 100</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Child2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React笔记(四)</title>
      <link href="/archives/1175bcc6.html"/>
      <url>/archives/1175bcc6.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">eg：代表代码对照</mark> <mark class="hl-label pink">若文章有误，欢迎读者留言反馈</mark> <h2 id="知识点回顾"><a href="#知识点回顾" class="headerlink" title="知识点回顾"></a>知识点回顾</h2><ol><li>插值 {}  变量，表达式，函数调用</li><li>动态属性  属性={ 变量 }</li><li>样式写法  <code>className=&#123; 变量 &#125;</code>   <code>className=&#123;&#39;active btn&#39;&#125;</code>   <code>className=&#123; arr.join(&#39; &#39;) &#125;</code><br><code>style=&#123;&#123; fontSize:'12px',color:变量 &#125;&#125;</code></li><li>循环 <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;arr.map(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;</span> <span class="attr">item.id</span> &#125;&gt;</span>&#123; item &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;Object.keys(obj).map((item,index)=&gt;&#123;</span></span><br><span class="line"><span class="xml">return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;</span> <span class="attr">item</span> &#125;&gt;</span>属性：&#123; item &#125;，属性值：&#123; ob[item] &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> &#125;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>组件基本认识<ul><li>函数组件就是函数，函数名称大写，有return值，return的是jsx，函数没有实例，没有生命周期，没有状态，没有this, 函数组件我们也可以叫纯函数，参数不变的情况下，函数组件也不会变化。</li><li>类组件就继承react中的父类，重写了render函数，函数中有return值，return是jsx。</li><li>组件中jsx必须有唯一的跟标签，组件名称遵循大驼峰</li></ul></li><li>props<ul><li>类组件中可以this.props.属性 可以获取父组件的值。</li><li>函数组件通过props.属性获取父组件的值。</li><li>props只读，单项数据流，父组件更新数据，props中的数据也随之更新。props就是父组件流转给子组件的数据。</li></ul></li><li>事件<ul><li>语法：on + 事件类型（首字符大写） = 执行函数</li><li>event 事件对象是混合事件对象</li><li>react的事件对象和原生事件对象区别？<ul><li>react为了更好的兼容性和跨平台。为了事件的统一管理，所有的事件绑定在document上，避免频繁解绑，提来性能。</li></ul></li></ul></li></ol><h2 id="this问题：React事件在定义的时候，默认情况下是没有给事件传递this进去【这个this就是当前组件，如何获取到它？】"><a href="#this问题：React事件在定义的时候，默认情况下是没有给事件传递this进去【这个this就是当前组件，如何获取到它？】" class="headerlink" title="this问题：React事件在定义的时候，默认情况下是没有给事件传递this进去【这个this就是当前组件，如何获取到它？】"></a>this问题：React事件在定义的时候，默认情况下是没有给事件传递this进去【这个this就是当前组件，如何获取到它？】</h2><blockquote><p>产生问题代码：</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jsx模板</span></span><br><span class="line">&lt;h3&gt;<span class="built_in">this</span>问题：React事件定义里拿不到<span class="built_in">this</span>&lt;/h3&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClickA&#125;</span>&gt;</span>点击A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 定义事件函数</span></span><br><span class="line"><span class="function"><span class="title">handleClickA</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>解决方法：</p><ol><li>在函数调用的时候传递this进去</li><li>在类构造器中通过bind更改this指向</li><li>使用箭头函数【推荐】</li></ol></blockquote><ol><li>在函数调用的时候传递this进去</li></ol><ul><li>回调传递this【传递参数需要回调，不回调默认执行一次】  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jsx模板</span></span><br><span class="line">&#123;<span class="comment">/* this传递进去【传递参数写法】 */</span>&#125;</span><br><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.handleClickB(<span class="built_in">this</span>)&#125;&gt;点击B&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义事件函数</span></span><br><span class="line"><span class="function"><span class="title">handleClickB</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// 成功拿到this,当前组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过bind改变this指向，为什么不使用call和apply改变this指向？call和apply会默认调用一次函数，而bind不会</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jsx模板</span></span><br><span class="line">&#123;<span class="comment">/* 通过bind，为什么不使用call和apply改变this指向？call和apply会默认调用一次函数，而bind不会 */</span>&#125;</span><br><span class="line">&lt;button onClick=&#123;<span class="built_in">this</span>.handleClickC.bind(<span class="built_in">this</span>)&#125;&gt;点击C&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义事件函数</span></span><br><span class="line"><span class="function"><span class="title">handleClickC</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// 成功拿到this,当前组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>在类构造器中通过bind更改this指向</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jsx模板</span></span><br><span class="line">&#123;<span class="comment">/* 在类构造器中通过bind更改this指向 */</span>&#125;</span><br><span class="line">&lt;button onClick=&#123;<span class="built_in">this</span>.handleClickD&#125;&gt;点击D&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义事件</span></span><br><span class="line"><span class="comment">// class类构造器</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props) <span class="comment">// 调用super(props)，用来将父组件传来的props绑定到继承类中。</span></span><br><span class="line">    <span class="built_in">this</span>.handleClickD = <span class="built_in">this</span>.handleClickD.bind(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义事件函数</span></span><br><span class="line"><span class="function"><span class="title">handleClickD</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// 成功拿到this,当前组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用箭头函数【推荐】</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jsx模板</span></span><br><span class="line">&#123;<span class="comment">/* 事件定义使用箭头函数 */</span>&#125;</span><br><span class="line">&lt;button onClick=&#123;<span class="built_in">this</span>.handleClickE&#125;&gt;点击E&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义事件函数</span></span><br><span class="line">handleClickE = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;this&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// 成功拿到this,当前组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>总结：传递参数使用箭头函数写法，直接写会默认给你执行一次（不传参可直接写不要加小括号，主要是加了小括号会默认执行一次），事件定义时也选择箭头函数写法</p></blockquote><h3 id="eg1"><a href="#eg1" class="headerlink" title="eg1:"></a>eg1:</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThisDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 问题：React事件在定义的时候，默认情况下是没有给事件传递this进去【这个this就是当前组件，如何获取到它？】</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        解决方法：</span></span><br><span class="line"><span class="comment">            1.在函数调用的时候传递this进去</span></span><br><span class="line"><span class="comment">            2.在类构造器中通过bind更改this指向</span></span><br><span class="line"><span class="comment">            3.使用箭头函数【推荐】</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="title">handleClickA</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;this&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">handleClickB</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;this&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// 成功拿到this,当前组件</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">handleClickC</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;this&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// 成功拿到this,当前组件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// class类构造器</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props) <span class="comment">// 调用super(props)，用来将父组件传来的props绑定到继承类中。</span></span><br><span class="line">        <span class="built_in">this</span>.handleClickD = <span class="built_in">this</span>.handleClickD.bind(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">handleClickD</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;this&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// 成功拿到this,当前组件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleClickE = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;this&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// 成功拿到this,当前组件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>this问题：React事件定义里拿不到this<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClickA&#125;</span>&gt;</span>点击A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* this传递进去【传递参数写法】 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.handleClickB(this)&#125;&gt;点击B<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 通过bind，为什么不使用call和apply改变this指向？call和apply会默认调用一次函数，而bind不会 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClickC.bind(this)&#125;</span>&gt;</span>点击C<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 在类构造器中通过bind更改this指向 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClickD&#125;</span>&gt;</span>点击D<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 事件定义时使用箭头函数 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClickE&#125;</span>&gt;</span>点击E<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ThisDemo</span><br></pre></td></tr></table></figure><h2 id="State状态操作"><a href="#State状态操作" class="headerlink" title="State状态操作"></a>State状态操作</h2><blockquote><p>概念性知识：<br>类组件可以放状态，函数组件不能。</p><ul><li>构造器定义我们的状态</li><li>state定义属性来定义状态</li><li>state状态要遵循不可变值，state的数据，你不能直接修改改。</li><li>setState方法来修改state的值。react管理的地方是异步方法。</li></ul></blockquote><h3 id="更新state中的数据"><a href="#更新state中的数据" class="headerlink" title="更新state中的数据"></a>更新state中的数据</h3><blockquote><p>更新state状态【遵循不可变值：不能更改state里面的值，再覆盖，主要针对于引用值，可用一个跟它不相关的数据覆盖[深拷贝或一个新数据]】<br>使用方法this.setState()，更新state的值【实际上是与state合并，覆盖】</p><p>定义状态变量写法1【推荐】</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">state = &#123; <span class="comment">// 等价于vue中的data,定义我们的状态变量，状态都是响应式</span></span><br><span class="line">    <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">str</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">bool</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    <span class="attr">obj</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>定义状态变量写法2【利用构造器函数】</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">   <span class="built_in">super</span>(props) <span class="comment">// 调用super(props)，用来将父组件传来的props绑定到继承类中。</span></span><br><span class="line">   <span class="built_in">this</span>.state = &#123; <span class="comment">// 等价于vue中的data,定义我们的状态变量，状态都是响应式</span></span><br><span class="line">       <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">       <span class="attr">str</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">       <span class="attr">bool</span>: <span class="literal">false</span>,</span><br><span class="line">       <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       <span class="attr">obj</span>: &#123;</span><br><span class="line">           <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>更新state状态【遵循不可变值：不能更改state里面的值】</strong></p><p>基本数据类型更新</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义事件函数</span></span><br><span class="line">addHandleA = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.setState(&#123; <span class="comment">// 更新state的值【实际上是与state合并，覆盖】</span></span><br><span class="line">       <span class="comment">// 不要使用自增自减这种赋值操作，它会改变this.state.num中的值</span></span><br><span class="line">       <span class="attr">num</span>: <span class="built_in">this</span>.state.num + <span class="number">1</span> <span class="comment">// num不是state中的num，【遵循不可变值】--方式正确</span></span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line">addHandleB = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">       <span class="attr">str</span>: <span class="built_in">this</span>.state.str + <span class="string">&#x27; world&#x27;</span> <span class="comment">// str不是state中的str，【遵循不可变值】--方式正确</span></span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line">addHandleC = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">       <span class="attr">bool</span>: !<span class="built_in">this</span>.state.bool <span class="comment">// bool不是state中的bool，【遵循不可变值】--方式正确</span></span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsx模板</span></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">       <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">h3</span>&gt;</span>状态操作<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">           &#123;/* 基本数据类型 */&#125;</span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">p</span>&gt;</span>数字：&#123;this.state.num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addHandleA&#125;</span>&gt;</span>点击A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">p</span>&gt;</span>字符串：&#123;this.state.str&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addHandleB&#125;</span>&gt;</span>点击B<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">           &#123;/* 0默认不显示，转话一下 */&#125;</span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">p</span>&gt;</span>布尔值：&#123;JSON.stringify(this.state.bool)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addHandleC&#125;</span>&gt;</span>点击C<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">           &#123;/* 引用数据类型 */&#125;</span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">p</span>&gt;</span>数组：&#123;JSON.stringify(this.state.arr)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addHandleD&#125;</span>&gt;</span>点击D<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">p</span>&gt;</span>对象：&#123;JSON.stringify(this.state.obj)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addHandleE&#125;</span>&gt;</span>点击E<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>引用数据类型更新</p><ol><li>数组：</li></ol></blockquote><pre><code><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">addHandleD = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 深拷贝state中的arr</span></span><br><span class="line">    <span class="keyword">var</span> myarr = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.state.arr))</span><br><span class="line">    myarr.push(<span class="number">6</span>)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="comment">// 错误方法：使用能够改变原数组的方法【只要是改变原数组的方法都不能在这里直接使用，需要通过深拷贝，不对state中的数据造成影响】</span></span><br><span class="line">        <span class="comment">// arr: this.state.arr.push(6) // 改变了state中的arr ----- 错误</span></span><br><span class="line">        <span class="comment">// 方法1：使用不改变原数组的方法如concat，里面参数6或者[6]都可以</span></span><br><span class="line">        <span class="comment">// arr: this.state.arr.concat(6) // arr不是state中的arr(合并覆盖)-----正确</span></span><br><span class="line">        <span class="comment">// 方法2：使用...</span></span><br><span class="line">        <span class="comment">// arr: [...this.state.arr, 6] // arr不是state中的arr(合并覆盖)-----正确</span></span><br><span class="line">        <span class="comment">// 方法3：深拷贝一份原数组中的数据[在setState方法外面]，这样就可以使用数组的所有方法，不会对state中的数组造成影响</span></span><br><span class="line">        <span class="attr">arr</span>: myarr <span class="comment">// arr不是state中的arr(合并覆盖)-----正确</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ol><li><p>对象</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">addHandleE = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 深拷贝state中的obj</span></span><br><span class="line">    <span class="keyword">var</span> myobj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.state.obj))</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">    <span class="comment">// 同理与数组思路一样</span></span><br><span class="line">    <span class="comment">// 方法1：使用...</span></span><br><span class="line">    <span class="comment">// obj: &#123;...this.state.obj, name: &#x27;小红&#x27;&#125; // obj不是state中的obj(合并覆盖)-----正确</span></span><br><span class="line">    <span class="comment">// 方法2：使用不改变原对象的方法如Object.assign(&#123;&#125;,this.state.obj,&#123;name: &#x27;小张&#x27;&#125;)</span></span><br><span class="line">    <span class="comment">// assign和数组concat是一样的做对象键名合并，assign是把参数2之后的所有对象合并到参数1对象中，并且返回参数1</span></span><br><span class="line">    <span class="comment">// obj: Object.assign(this.state.obj, &#123;name: &#x27;小红&#x27;&#125;) // 正确</span></span><br><span class="line">    <span class="comment">// 方法3：深拷贝一份原对象中的数据</span></span><br><span class="line">    <span class="attr">obj</span>: &#123;...myobj, <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>&#125; <span class="comment">// 正确</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="eg2"><a href="#eg2" class="headerlink" title="eg2:"></a>eg2:</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义状态变量写法1【推荐】</span></span><br><span class="line">    state = &#123; <span class="comment">// 等价于vue中的data,定义我们的状态变量，状态都是响应式</span></span><br><span class="line">        <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">str</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">        <span class="attr">bool</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">        <span class="attr">obj</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义状态变量写法2【利用构造器函数】</span></span><br><span class="line">    <span class="comment">// constructor(props) &#123;</span></span><br><span class="line">    <span class="comment">//     super(props) // 调用super(props)，用来将父组件传来的props绑定到继承类中。</span></span><br><span class="line">    <span class="comment">//     this.state = &#123; // 等价于vue中的data,定义我们的状态变量，状态都是响应式</span></span><br><span class="line">    <span class="comment">//         num: 0,</span></span><br><span class="line">    <span class="comment">//         str: &#x27;hello&#x27;,</span></span><br><span class="line">    <span class="comment">//         bool: false,</span></span><br><span class="line">    <span class="comment">//         arr: [1, 2, 3, 4, 5],</span></span><br><span class="line">    <span class="comment">//         obj: &#123;</span></span><br><span class="line">    <span class="comment">//             name: &#x27;小明&#x27;</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新state状态【遵循不可变值：不能更改state里面的值】</span></span><br><span class="line">    <span class="comment">// 基本数据类型更新</span></span><br><span class="line">    addHandleA = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123; <span class="comment">// 更新state的值【实际上是与state合并，覆盖】</span></span><br><span class="line">            <span class="attr">num</span>: <span class="built_in">this</span>.state.num + <span class="number">1</span> <span class="comment">// num不是state中的num，【遵循不可变值】--方式正确</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    addHandleB = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">str</span>: <span class="built_in">this</span>.state.str + <span class="string">&#x27; world&#x27;</span> <span class="comment">// str不是state中的str，【遵循不可变值】--方式正确</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    addHandleC = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">bool</span>: !<span class="built_in">this</span>.state.bool <span class="comment">// bool不是state中的bool，【遵循不可变值】--方式正确</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引用数据类型更新</span></span><br><span class="line">    <span class="comment">// 数组</span></span><br><span class="line">    addHandleD = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 深拷贝state中的arr</span></span><br><span class="line">        <span class="keyword">var</span> myarr = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.state.arr))</span><br><span class="line">        myarr.push(<span class="number">6</span>)</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="comment">// 错误方法：使用能够改变原数组的方法【只要是改变原数组的方法都不能在这里直接使用，需要通过深拷贝，不对state中的数据造成影响】</span></span><br><span class="line">            <span class="comment">// arr: this.state.arr.push(6) // 改变了state中的arr ----- 错误</span></span><br><span class="line">            <span class="comment">// 方法1：使用不改变原数组的方法如concat，里面参数6或者[6]都可以</span></span><br><span class="line">            <span class="comment">// arr: this.state.arr.concat(6) // arr不是state中的arr(合并覆盖)-----正确</span></span><br><span class="line">            <span class="comment">// 方法2：使用...</span></span><br><span class="line">            <span class="comment">// arr: [...this.state.arr, 6] // arr不是state中的arr(合并覆盖)-----正确</span></span><br><span class="line">            <span class="comment">// 方法3：深拷贝一份原数组中的数据[在setState方法外面]，这样就可以使用数组的所有方法，不会对state中的数组造成影响</span></span><br><span class="line">            <span class="attr">arr</span>: myarr <span class="comment">// arr不是state中的arr(合并覆盖)-----正确</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象</span></span><br><span class="line">    addHandleE = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 深拷贝state中的obj</span></span><br><span class="line">        <span class="keyword">var</span> myobj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.state.obj))</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="comment">// 同理与数组思路一样</span></span><br><span class="line">            <span class="comment">// 方法1：使用...</span></span><br><span class="line">            <span class="comment">// obj: &#123;...this.state.obj, name: &#x27;小红&#x27;&#125; // obj不是state中的obj(合并覆盖)-----正确</span></span><br><span class="line">            <span class="comment">// 方法2：使用不改变原对象的方法如Object.assign(&#123;&#125;,this.state.obj,&#123;name: &#x27;小张&#x27;&#125;)</span></span><br><span class="line">            <span class="comment">// assign和数组concat是一样的做对象键名合并，assign是把参数2之后的所有对象合并到参数1对象中，并且返回参数1</span></span><br><span class="line">            <span class="comment">// obj: Object.assign(this.state.obj, &#123;name: &#x27;小红&#x27;&#125;) // 正确</span></span><br><span class="line">            <span class="comment">// 方法3：深拷贝一份原对象中的数据</span></span><br><span class="line">            <span class="attr">obj</span>: &#123;...myobj, <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>&#125; <span class="comment">// 正确</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>状态操作<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 基本数据类型 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>数字：&#123;this.state.num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addHandleA&#125;</span>&gt;</span>点击A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>字符串：&#123;this.state.str&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addHandleB&#125;</span>&gt;</span>点击B<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 0默认不显示，转话一下 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>布尔值：&#123;JSON.stringify(this.state.bool)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addHandleC&#125;</span>&gt;</span>点击C<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 引用数据类型 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>数组：&#123;JSON.stringify(this.state.arr)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addHandleD&#125;</span>&gt;</span>点击D<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>对象：&#123;JSON.stringify(this.state.obj)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addHandleE&#125;</span>&gt;</span>点击E<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> StateDemo</span><br></pre></td></tr></table></figure><h3 id="面试题：setState是同步还是异步，是合并还是不合并？"><a href="#面试题：setState是同步还是异步，是合并还是不合并？" class="headerlink" title="面试题：setState是同步还是异步，是合并还是不合并？"></a>面试题：setState是同步还是异步，是合并还是不合并？</h3><blockquote><p>答案：<br>1.react管理的地方是异步方法。在回调，异步是同步的。React@18 自定义事件中setState是异步，React@17.0.2是同步。<br>2.setState参数是对象的形式下是默认合并的。 参数是函数情况下是不合并的<br>同步能获取最新值，异步拿不到最新值</p><p>上一段中更新数据实际上是默认合并了，因为我们往setState里面传递的是对象</p></blockquote><ol><li><p>React管理的地方是异步方法</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;0&#x27;</span>, <span class="built_in">this</span>.state.num)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">num</span>: <span class="built_in">this</span>.state.num + <span class="number">1</span> &#125;)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">num</span>: <span class="built_in">this</span>.state.num + <span class="number">1</span> &#125;)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">num</span>: <span class="built_in">this</span>.state.num + <span class="number">1</span> &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>, <span class="built_in">this</span>.state.num) <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义事件</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clickHandle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">num</span>:<span class="built_in">this</span>.state.num+<span class="number">1</span>&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>,<span class="built_in">this</span>.state.num);  <span class="comment">// 0  【React@17.0.2版本：自定义事件中，setState是同步的，获取最新值1。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>setState的回调</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;0&#x27;</span>, <span class="built_in">this</span>.state.num)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">num</span>: <span class="built_in">this</span>.state.num + <span class="number">1</span> &#125;)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">num</span>: <span class="built_in">this</span>.state.num + <span class="number">1</span> &#125;)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">num</span>: <span class="built_in">this</span>.state.num + <span class="number">1</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 当前是setState的回调函数，这里面是同步，能获取最新的值</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>, <span class="built_in">this</span>.state.num)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>异步中获取state值</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 异步中获取最新的state的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;获取最新state值&#x27;</span>, <span class="built_in">this</span>.state.num)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>setState合并操作</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this.setState是异步操作，多次异步操作，修改的属性相同会做合并操作。只有最后一个生效</span></span><br><span class="line"><span class="comment">// Object.assign(&#123; num: this.state.num + 1&#125;,&#123; num: this.state.num + 1&#125;,&#123; num: this.state.num + 1&#125;)</span></span><br><span class="line"><span class="built_in">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> &#123; <span class="comment">//每次state都是最新的state所以不会合并</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">num</span>: state.num + <span class="number">1</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">num</span>: state.num + <span class="number">1</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">num</span>: state.num + <span class="number">1</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="props进阶-gt-组件通信"><a href="#props进阶-gt-组件通信" class="headerlink" title="props进阶=&gt;组件通信"></a>props进阶=&gt;组件通信</h2><blockquote><p>this.props.children获取父组件中占位符【这个占位符是指当前子组件在父组件中的占位容器】闭合标签中的内容[获取innerHTML]<br>this.props.children类似vue里面的匿名插槽</p></blockquote><pre><code><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件jsx模板</span></span><br><span class="line">state = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>props进阶<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">i</span>&gt;</span>我是父组件中的文本<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件jsx模板</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* this.props.children获取父组件中占位符【这个占位符是指当前子组件在父组件中的占位容器】闭合标签中的内容[获取innerHTML] */&#125;</span></span><br><span class="line"><span class="xml">                &#123;this.props.children&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><blockquote><p>类型限定<code>prop-types</code>，props默认值</p><p>安装插件<br><code>npm i -S prop-types</code></p><p>引入<code>prop-types</code>包<br><code>import PropTypes from &#39;prop-types&#39;</code></p></blockquote><ol><li>方法1：类组件和函数组件都适用【写在export外面】</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法1  类组件和函数组件都适用</span></span><br><span class="line"><span class="comment">// Child是组件名称 PropTypes.number是类型的限定</span></span><br><span class="line">Child.propTypes = &#123;</span><br><span class="line">    <span class="attr">num</span>:PropTypes.number, <span class="comment">//定义num是number类型</span></span><br><span class="line">    <span class="attr">obj</span>:PropTypes.shape(&#123;  <span class="comment">//自定义对象属性 来进行验证</span></span><br><span class="line">        <span class="attr">color</span>: PropTypes.string,</span><br><span class="line">        <span class="attr">fontSize</span>: PropTypes.number</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">arr</span>:PropTypes.arrayOf(PropTypes.number).isRequired</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置默认值【父组件传递的有数据，就使用父组件的数据，如果没有就使用默认值，类似vue】</span></span><br><span class="line">Child.defaultProps = &#123;</span><br><span class="line">    <span class="attr">arr</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>方法2：只适用于类组件【写在export里面】</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    <span class="attr">num</span>:PropTypes.number, <span class="comment">//定义num是number类型</span></span><br><span class="line">    <span class="attr">obj</span>:PropTypes.shape(&#123;  <span class="comment">//自定义对象属性 来进行验证</span></span><br><span class="line">        <span class="attr">color</span>: PropTypes.string, <span class="comment">// color必须是字符串类型</span></span><br><span class="line">        <span class="attr">fontSize</span>: PropTypes.number <span class="comment">// fontSize必须为数字类型</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">arr</span>:PropTypes.arrayOf(PropTypes.number).isRequired <span class="comment">// 数组每个元素都是数字类型，必填</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置默认值【父组件传递的有数据，就使用父组件的数据，如果没有就使用默认值，类似vue】</span></span><br><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React笔记(三)</title>
      <link href="/archives/eb3653c9.html"/>
      <url>/archives/eb3653c9.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">eg：代表代码对照</mark> <mark class="hl-label pink">若文章有误，欢迎读者留言反馈</mark> <h2 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h2><blockquote><p>组件的嵌套<br>组件的嵌套，直接引入组件，然后直接当作自定义标签占位符使用【不需要注册】</p><p>props传值<br>组件间传值，在React中是通过只读属性 <code>props</code> 来完成数据传递的。</p></blockquote><p>props：接受任意的入参，并返回用于描述页面展示内容的 <code>React</code> 元素。</p><ol><li><p>函数组件</p><blockquote><p>函数组件可以通过props直接获取父组件传递的值【没有this，注意得把props传递进去，才能使用props】</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="comment">/* 父组件 */</span> &#125;</span><br><span class="line">&lt;Child2 hobby=&#123;<span class="string">&#x27;aaaa&#x27;</span>&#125;/&gt;</span><br><span class="line"></span><br><span class="line">&#123; <span class="comment">/* 子组件 */</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Child2 = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 函数组件可以通过props直接获取父组件传递的值【没有this，注意得把props传递进去，才能使用props】</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            爱好-&#123;props.hobby&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>类组件</p><blockquote><p>类组件，可以通过this.props.num 直接获取父组件传递过来的值<br>只读，单向数据流，父组件更新，子组件也随之更新<br>只要props中有数据，必定是父组件传递的值，vue react vue3同理<br>注意点：里面不能随便写计时器等其它内容，按照类的写法去写</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="comment">/* 父组件 */</span> &#125;</span><br><span class="line">&lt;Child name=<span class="string">&quot;小明&quot;</span> age=&#123;<span class="number">22</span>&#125;/&gt;</span><br><span class="line"></span><br><span class="line">&#123; <span class="comment">/* 子组件 */</span> &#125;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    姓名：&#123;<span class="built_in">this</span>.props.name&#125;&lt;br/&gt;年龄：&#123;<span class="built_in">this</span>.props.age&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="事件【分函数组件、类组件】"><a href="#事件【分函数组件、类组件】" class="headerlink" title="事件【分函数组件、类组件】"></a>事件【分函数组件、类组件】</h2><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><blockquote><p>react事件对象叫混合事件对象，全称SyntheticBaseEvent，是react为了提高性能所封装。<br>原生事件对象具有的功能，混合事件对象也具有。<br>为什么react要封装事件对象？</p><ol><li>为了更好的跨平台和兼容性，react中的event没有兼容性问题。</li><li>为了统一管理所有的事件，所有的事件都是直接绑定在document上的。提高性能。避免频繁解绑。</li><li>方便统一管理，（事务机制）</li></ol></blockquote><h3 id="eg1"><a href="#eg1" class="headerlink" title="eg1:"></a>eg1:</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    handleClick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;事件对象：&#x27;</span>, e)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;事件类型：&#x27;</span>, e.type)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;事件源：&#x27;</span>, e.target)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;javascript原生事件对象：&#x27;</span>, e.nativeEvent) <span class="comment">// vue事件对象是原生的</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleClickA = <span class="function">(<span class="params">val, e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;参数：&#x27;</span>, val)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;事件对象：&#x27;</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>事件对象<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 不传递参数，on+事件类型（首字母大写） */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>点击1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 传递参数，需要回调，如果不回调，就会直接调用一次 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> this.handleClickA(&#x27;aaa&#x27;, e)&#125;&gt;点击2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> EventDemo</span><br></pre></td></tr></table></figure><h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><blockquote><p>函数组件<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数组件</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ClickDemo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;点击了1&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> handleClickA = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;点击了2&#x27;</span>, val)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>函数组件点击事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;/* 不传递参数 */&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>点击1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;/* 传递参数，需要回调 */&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> handleClickA(&#x27;bbb&#x27;)&#125;&gt;点击2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ClickDemo</span><br></pre></td></tr></table></figure></p><p>类组件<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类组件</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClickDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 类组件里面方法的三种不同写法</span></span><br><span class="line">    <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;点击了1&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    handleClickA = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;点击了2&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    handleClickB = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;点击了3&#x27;</span>, val)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>类组件点击事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 不传递参数 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>点击1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClickA&#125;</span>&gt;</span>点击2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* 传递参数，需要回调 */&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.handleClickB(&#x27;aaa&#x27;)&#125;&gt;点击3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ClickDemo</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React笔记(二)</title>
      <link href="/archives/95c573e2.html"/>
      <url>/archives/95c573e2.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">eg：代表代码对照</mark> <mark class="hl-label pink">若文章有误，欢迎读者留言反馈</mark> <h2 id="脚手架创建React项目"><a href="#脚手架创建React项目" class="headerlink" title="脚手架创建React项目"></a>脚手架创建React项目</h2><blockquote><p>全局安装React脚手架<br><code>npm install -g create-react-app</code><br>构建一个my-app的项目<br><code>create-react-app my-app</code> 或 <code>npx create-react-app my-app</code></p><p>清除文件[全部删除]</p></blockquote><ul><li>App.css</li><li>App.test.js</li><li>index.css</li><li>logo.svg</li><li>reportWebVitals.js</li><li>setupTests.js</li></ul><blockquote><p>清除入口文件内容<br><strong>只保留下面这部分，严格模式等都清除</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = ReactDOM.createRoot(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">root.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>清除根组件【顶级组件】内容<br><strong>全部清除</strong></p><p>一般写个类组件，快捷键rcc</p><p>函数组件及注意事项【快捷键 <code>rfc</code>】</p><ol><li>jsx必须得有唯一的根标签</li><li>函数名称大写，遵循大驼峰</li><li>函数组件没有实例=&gt;没有<code>new</code>=&gt;没有<code>this</code>，反之类组件有</li><li>函数组件没有生命周期，没有state状态，不能做首屏，发送请求，只能做展示使用[函数组件不能放数据状态,没有生命周期，没有实例，没有this,也不能使用高阶组件的语法糖(能使用高阶组件)]</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      hello world</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><blockquote><p>类组件及注意事项【快捷键 <code>rcc</code>】</p><ol><li>jsx必须得有唯一的根标签</li><li>类组件名称大写，遵循大驼峰</li><li>类组件有实例=&gt;有<code>new</code>=&gt;有<code>this</code>，反之函数组件没有</li><li>类组件有生命周期，有状态，既能做首屏，发送请求，也能做展示使用</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类组件[重写了Component]</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        hello world</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><h3 id="eg1"><a href="#eg1" class="headerlink" title="eg1:"></a>eg1:</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数组件</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数组件方法调用不需要this，注意var声明</span></span><br><span class="line"><span class="keyword">var</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> App1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      hello world</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类组件[重写了Component]</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类组件方法调用需要this，注意不需要var声明</span></span><br><span class="line">handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        hello world</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App2</span><br></pre></td></tr></table></figure><h2 id="React组件及分类"><a href="#React组件及分类" class="headerlink" title="React组件及分类"></a>React组件及分类</h2><p><strong>与Vue不同，React组件不需要注册，直接使用</strong></p><p>React组件：以js或者jsx为后缀的文件都可以是组件<br>安装了如下jsx代码提示插件，文件以.jsx后缀有代码提示<br><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10010.png" alt="vscode-React提示插件"></p><blockquote><p>组件的划分：容器组件和展示组件。<br>类组件既可以是容器组件，也可以是展示组件，函数组件只能是展示组件。</p><p>函数组件  顶级组件</p><ul><li>函数组件，本质就是一个函数，函数中有return，return后面跟jsx语法。jsx语法必须有唯一的跟标签。</li><li>函数名称大写，组件名称都大写。</li><li>类组件是react中常用的组件类型，是已class类继承react中Component组件来创建的。render函数必须有，</li><li>return后面跟jsx语法。</li></ul></blockquote><p><strong>组件分为函数组件和类组件【后面很多地方一些功能都将会被划分为不同写法==&gt;类组件写法、函数组件写法和两者通用写法】</strong></p><p>小知识点：React与vue在启动上有点不同，React使用npm start启动省去了run，但是其它命令还是要带上run</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React笔记(一)</title>
      <link href="/archives/3af4e880.html"/>
      <url>/archives/3af4e880.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">eg：代表代码对照</mark> <mark class="hl-label pink">若文章有误，欢迎读者留言反馈</mark> <h2 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h2><h3 id="html文件中引入"><a href="#html文件中引入" class="headerlink" title="html文件中引入"></a>html文件中引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue就vue这个核心包，react有两个，react react-dom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="挂载点"><a href="#挂载点" class="headerlink" title="挂载点"></a>挂载点</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ReactDOM-render"><a href="#ReactDOM-render" class="headerlink" title="ReactDOM.render"></a>ReactDOM.render</h3><blockquote><p>react代码<br>ReactDOM.render 这个是react-dom提供的方法，render把模板变成虚拟dom</p><ul><li>参数1  类似于document.createElement(标签名，属性值，内容)</li><li>参数2 指定挂载点 把节点挂载到当前div#app下面</li></ul></blockquote><h3 id="eg1"><a href="#eg1" class="headerlink" title="eg1:"></a>eg1:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue就vue这个核心包，react有两个，react react-dom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 挂载点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// react代码</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// ReactDOM.render 这个是react-dom提供的方法，render把模板变成虚拟dom</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 参数1  类似于document.createElement(标签名，属性值，内容)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 参数2 指定挂载点 把节点挂载到当前div#app下面</span></span></span><br><span class="line"><span class="javascript">         ReactDOM.render(</span></span><br><span class="line"><span class="javascript">             React.createElement(<span class="string">&#x27;div&#x27;</span>,&#123;&#125;,<span class="string">&#x27;我的第一个页面&#x27;</span>),</span></span><br><span class="line"><span class="javascript">             <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            )</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="引入babel，jsx模板语法"><a href="#引入babel，jsx模板语法" class="headerlink" title="引入babel，jsx模板语法"></a>引入babel，jsx模板语法</h2><blockquote><p>在<code>script</code>标签内指定<code>type</code>类型<code>type=&quot;text/babel&quot;</code></p></blockquote><h3 id="eg2"><a href="#eg2" class="headerlink" title="eg2:"></a>eg2:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue就vue这个核心包，react有两个，react react-dom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 挂载点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// react代码 jsx jsx是语法标准，是react的模板语法，既可以写html 又可以写react语法</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// vue 中template是vue的模板，既可以写vue语法，有可以写html。</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 下面案例就是所谓的jsx语法，注意：jsx必须有个跟标签。</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vdom = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">               <span class="tag">&lt;<span class="name">h3</span>&gt;</span>hello wrod<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">               <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是内容部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">         ReactDOM.render(</span></span><br><span class="line"><span class="javascript">             vdom,</span></span><br><span class="line"><span class="javascript">             <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            )</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="React插值表达式"><a href="#React插值表达式" class="headerlink" title="React插值表达式"></a>React插值表达式</h2><ul><li>语法：{}</li><li>注释：jsx中添加注释，需要包裹{}，同时只能使用/<em> 注释内容 </em>/，而不是双斜杠//</li><li>类似<code>vue</code>，{}里面支持放数据、变量、表达式（&amp;&amp; || ！等）、函数调用【注意最终的落脚点都是一个具体的值】</li><li>花括号里面的数组默认会被遍历渲染【jsx中如果是一维数组，直接写上就可以遍历渲染了，但是会报警告，得加上key】</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="comment">/*  注意：jsx中添加注释，需要包裹&#123;&#125; */</span> &#125;</span><br><span class="line">&#123;<span class="comment">/* 默认对数组解析遍历 */</span>&#125;</span><br><span class="line">&#123;</span><br><span class="line">    [ <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">key</span>=<span class="string">&#123;1&#125;</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>, <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">key</span>=<span class="string">&#123;2&#125;</span>&gt;</span>bb<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">/* 解析html */</span>&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="eg3"><a href="#eg3" class="headerlink" title="eg3:"></a>eg3:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue就vue这个核心包，react有两个，react react-dom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 挂载点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">           react 插值表达式</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             + 类似vue，变量，表达式（链接且，链接或，三元），函数调用</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             + 语法： &#123;&#125; 单括号中可以放表达式</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        */</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> w = <span class="string">&#x27;word&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 解析普通变量</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// var vdom = &lt;div&gt;hello &#123; w &#125;&lt;/div&gt;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 三元表达式</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> b = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vdom = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello &#123; b ? &#x27;word&#x27;:&#x27;hello&#x27; &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">        ReactDOM.render(</span></span><br><span class="line"><span class="javascript">            vdom,</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        )</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h2><ul><li>回顾vue：v-bind:hello=”a”   变量a:’hello world’</li><li><p>React语法：hello={a}        变量a:’hello world’</p></li><li><p>class需要注意，React中没有class这个属性，与class类同名，用className替代[只要在jsx里面写只能写className]</p></li></ul><h3 id="eg4"><a href="#eg4" class="headerlink" title="eg4:"></a>eg4:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue就vue这个核心包，react有两个，react react-dom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.hello</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 挂载点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">           动态属性</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             + 回顾vue，v-bind:hello=&quot;a&quot;     变量a:&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             + jsx语法： hello=&#123; a &#125;         变量a:&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        */</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 动态属性写法 就是单大括号  跟插值一模一样</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// var vdom = &lt;div hello=&#123; a &#125;&gt;hello &lt;/div&gt;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 样式 动态class  react中没有class这个属性，用className取代[只要在jsx里面写只能写className]</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vdom = <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span> <span class="attr">hello</span> &#125;&gt;</span>hello <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">         ReactDOM.render(</span></span><br><span class="line"><span class="javascript">             vdom,</span></span><br><span class="line"><span class="javascript">             <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            )</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="React样式写法、插入html"><a href="#React样式写法、插入html" class="headerlink" title="React样式写法、插入html"></a>React样式写法、插入html</h2><ul><li>class绑定单个属性值<ul><li>className={ title }   变量title: ‘title’</li></ul></li><li>dangerouslySetInnerHTML   解析并插入标签，类似innerHTML、vue的v-html</li><li>插值中，加引号是字符串，不加是引号就是变量</li></ul><p><strong>[补充：有些标签自带的属性可以直接写，如表格自带的属性有的需要大括号有的需要引号，注意一下就行]</strong></p><ol><li>class不做动态绑定处理[下面这个title就是普通类名]<br><code>var vdom = &lt;div className=&quot;title&quot;&gt;hello world&lt;/div&gt;</code></li><li>class绑定单个值<br><code>var title = &#39;title&#39;</code><br><code>var vdom = &lt;div className=&#123; title &#125;&gt;hello world&lt;/div&gt;</code></li><li>class绑定多个值<br>使用变量<code>var styles = [&#39;title&#39;, &#39;bg&#39;]</code><br><code>var vdom = &lt;div className=&#123; styles.join(&#39; &#39;) &#125;&gt;hello world&lt;/div&gt;</code><br>不使用变量<br><code>var vdom = &lt;div className=&#123; &#39;title bg&#39; &#125;&gt;hello world&lt;/div&gt;</code></li><li>style行内样式<br>直接写在{}<br><code>var fon = &#39;12px&#39;</code><br><code>var vdom = &lt;div style=&#123;&#123;color:'red',fontSize:fon&#125;&#125;&gt;hello&lt;/div&gt;</code><br>使用变量<code>var s = &#123;color:&#39;red&#39;,fontSize:&#39;12px&#39;&#125;</code><br><code>var vdom = &lt;div style=&#123; s &#125;&gt;hello&lt;/div&gt;</code></li></ol><blockquote><p>dangerouslySetInnerHTML  react用来解析字符串，并识别标签  v-html<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vdom = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello，<span class="tag">&lt;<span class="name">p</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;&#123;__html:</span>&#x27;&lt;<span class="attr">a</span> <span class="attr">href</span>=<span class="string">&quot;http:www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;&#125;&#125;&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        vdom,</span><br><span class="line">            <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="eg5"><a href="#eg5" class="headerlink" title="eg5:"></a>eg5:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue就vue这个核心包，react有两个，react react-dom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.bg</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 挂载点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">       /*</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">          react样式写法</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            + class绑定单个属性值</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">               =&gt; className=&#123; title &#125;    变量title:&#x27;title&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            + dangerouslySetInnerHTML 解析并插入标签</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            + 插值中，加引号是字符串，没加引号的变量。</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">       */</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // var title = &#x27;title&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        var vdom = <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // 1.class绑定单个值</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // var vdom = <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span> <span class="attr">title</span> &#125;&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // 2.class绑定多个值</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        var styles = [&#x27;title&#x27;,&#x27;bg&#x27;]</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        //   var vdom = <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span> <span class="attr">styles.join</span>(&#x27; &#x27;) &#125;&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        //   var vdom = <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>&#x27;<span class="attr">title</span> <span class="attr">bg</span>&#x27;&#125;&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        //  3.三元</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        var b = false</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // var vdom = <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span> <span class="attr">b</span> ? &#x27;<span class="attr">title</span>&#x27;<span class="attr">:</span>&#x27;&#x27; &#125;&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        //  4.style行内样式</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        var fon = &#x27;12px&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // var vdom = <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=</span></span><span class="template-variable">&#123;&#123;<span class="name">color:</span><span class="string">&#x27;red&#x27;</span>,fontSize:fon&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // var s = &#123;color:&#x27;red&#x27;,fontSize:&#x27;12px&#x27;&#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // var vdom = <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">s</span> &#125;&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // dangerouslySetInnerHTML  react用来解析字符串，并识别标签  v-html</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // 了解下，容易被xss攻击</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // var vdom = <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello，<span class="tag">&lt;<span class="name">p</span> <span class="attr">dangerouslySetInnerHTML</span>=</span></span><span class="template-variable">&#123;&#123;<span class="name">__html:</span><span class="string">&#x27;&lt;a href=&quot;http:www.baidu.com&quot;&gt;百度一下&lt;/a&gt;&#x27;</span>&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">         ReactDOM.render(</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">             vdom,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">             document.querySelector(&#x27;#app&#x27;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            )</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><blockquote><p>React数组遍历</p><ul><li>回顾vue，v-for=”(item, index) in arr” :key=”item.id”</li><li>jsx，arr.map((item, index) =&gt; <li key={ item.id }>{ item.name }</li>)</li></ul></blockquote><h3 id="eg6"><a href="#eg6" class="headerlink" title="eg6:"></a>eg6:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue就vue这个核心包，react有两个，react react-dom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.bg</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 挂载点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">           react 数组遍历</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             + 回顾vue，v-for=&quot;(item,index) in arr&quot; :key=&quot;item.id&quot;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             + arr.map((item,index)=&gt;return &lt;li key=&#123;item.id&#125;&gt;&#123; item.name &#125;&lt;/li&gt;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        */</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> arr = [<span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;小红&#x27;</span>,<span class="string">&#x27;小黑&#x27;</span>]</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> vdom = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">               &#123;/*  注意：jsx中添加注释，需要包裹&#123;&#125;，数组有多少个元素，我们应该是有多个li标签 */&#125;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">               &#123;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">                 arr.map((item,index)=&gt;&#123;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">                    return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;</span> <span class="attr">index</span> &#125;&gt;</span>&#123; item &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                 &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="javascript">               &#125;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">       ReactDOM.render(</span></span><br><span class="line"><span class="javascript">             vdom,</span></span><br><span class="line"><span class="javascript">             <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            )</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对象遍历"><a href="#对象遍历" class="headerlink" title="对象遍历"></a>对象遍历</h2><blockquote><p>React对象遍历</p><ul><li>回顾vue，v-for=”(val,key,index) in obj” :key=”key”</li><li>jsx，Object.keys(obj).map((item,index) =&gt; <li key={ item }>键名：{ item } ---- 键值：{ obj[item] }</li>)<ul><li>把对象的每个键名转为数组，再使用map映射</li></ul></li></ul></blockquote><h3 id="eg7"><a href="#eg7" class="headerlink" title="eg7:"></a>eg7:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue就vue这个核心包，react有两个，react react-dom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.bg</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 挂载点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">           react 对象的遍历</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            + 回顾vue，v-for=&quot;(val,key,index) in obj&quot;  :key=&quot;key&quot;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            + Object.keys(obj).map((item.index)=&gt;&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                return &lt;li key=&#123; item &#125;&gt;属性：&#123; item &#125;，属性值：&#123; obj[item] &#125;&lt;/li&gt;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        */</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">         <span class="attr">id</span>:<span class="number">123</span>,</span></span><br><span class="line"><span class="javascript">         <span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span>,</span></span><br><span class="line"><span class="javascript">         <span class="attr">age</span>:<span class="number">22</span></span></span><br><span class="line"><span class="javascript">       &#125;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> vdom = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">               &#123;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">                 Object.keys(obj).map((item,index)=&gt;&#123;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">                    return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;</span> <span class="attr">item</span> &#125;&gt;</span>属性：&#123; item &#125;,属性值：&#123; obj[item] &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                 &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="javascript">               &#125;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">       ReactDOM.render(</span></span><br><span class="line"><span class="javascript">             vdom,</span></span><br><span class="line"><span class="javascript">             <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            )</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="后记-又出bug啦-："><a href="#后记-又出bug啦-：" class="headerlink" title="后记[又出bug啦]："></a>后记[又出bug啦]：</h2><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10014.jpg" alt="10014"><br>在写完这篇笔记后我就急着要发布到我的个人博客上了，但是在生成(hexo g)这里居然报错了，这个错误大概就是<code>React</code>的一些语法和我们渲染起了冲突，如双大括号，所以最好不管单行代码还是多行代码最好使用单反引号或三个反引号包裹住咱们的代码</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床搭建Github篇</title>
      <link href="/archives/f7ade587.html"/>
      <url>/archives/f7ade587.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <h2 id="vscode安装插件"><a href="#vscode安装插件" class="headerlink" title="vscode安装插件"></a>vscode安装插件</h2><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10007.png" alt="10007"></p><h2 id="picgo插件设置图床选用github"><a href="#picgo插件设置图床选用github" class="headerlink" title="picgo插件设置图床选用github"></a>picgo插件设置图床选用github</h2><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10008.png" alt="10008"></p><h2 id="上传图片快捷键是ctrl-alt-u，会直接生成md图片格式"><a href="#上传图片快捷键是ctrl-alt-u，会直接生成md图片格式" class="headerlink" title="上传图片快捷键是ctrl + alt + u，会直接生成md图片格式"></a>上传图片快捷键是ctrl + alt + u，会直接生成md图片格式</h2><h2 id="vscode写markdown格式文档必装插件"><a href="#vscode写markdown格式文档必装插件" class="headerlink" title="vscode写markdown格式文档必装插件"></a>vscode写markdown格式文档必装插件</h2><ul><li>Markdown All in One</li><li>Markdown Preview Enhanced</li></ul><blockquote><p>这样就能使用<code>vscode</code>愉快的编写<code>markdown</code>格式文档</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
          <category> 图床 </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> vscode </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3笔记</title>
      <link href="/archives/3c94855e.html"/>
      <url>/archives/3c94855e.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <h2 id="vue3重点"><a href="#vue3重点" class="headerlink" title="vue3重点"></a>vue3重点</h2><ol><li>setup中书写咱们以前的methods，data,computed,watch,生命周期等都书写在setup中，<br>setup在beforeCreate和created之间执行。<br>setup中没有this这个vue实例，但是有context上下文。</li><li>状态和事件<br>书写状态数据，一种方法在变量值外面用ref来包裹，实现了响应式，另一种方法使用reactive和toRefs来创建<br>响应式对象数据。<br>事件就熟悉函数表达式，然后return抛出，然后在模板使用即可。</li><li>computed计算属性<br>computed中放入回调函数，函数必须有返回值，并且其本质是数据。特性：缓存性，依赖性。<br>computed中放入对象，对象有get和set方法，次数据就可以使用v-model双向绑定。</li><li>跨层级通信<br>祖先组件通过 provide(key,value)方式给后代传递数据。<br>后代组件通过inject(key)方式来注入数据，即可使用，注意:inject只读<br>祖先组件数据进行更新，后代无条件同步数据，不管你是基本数据类型还是应用数据类型。</li><li>生命周期<br>挂载阶段 setup onBeforeMount onMounted<br>更新阶段 onBeforeUpdate onUpdated<br>销毁阶段 onBeforeUnmount  onUnmounted</li></ol><h2 id="计算属性【computed】"><a href="#计算属性【computed】" class="headerlink" title="计算属性【computed】"></a>计算属性【computed】</h2><blockquote><p>computed虽然是函数，但是本质是数据变量，特性：缓存性，依赖性<br>计算属性函数形式[计算属性的执行依赖于使用数据的改变，但是初始会获取一次所使用数据]</p></blockquote><h2 id="跨层级通信【provide—inject】"><a href="#跨层级通信【provide—inject】" class="headerlink" title="跨层级通信【provide—inject】"></a>跨层级通信【provide—inject】</h2><blockquote><p>vue2中父组件更新，如果是基本数据类型，后代组件不更新，如果是对象，后代会更新。<br>vue3中父组件更新，后代无条件更新，不管是不是引用数据类型。</p></blockquote><mark class="hl-label pink">props、data、computed都是数据变量，不能重复，重复就会覆盖</mark> <p>inject 和 props是一样的，数据只读。不能直接修改它。单项数据流</p><h2 id="响应式数据-ref和reactive"><a href="#响应式数据-ref和reactive" class="headerlink" title="响应式数据[ref和reactive]"></a>响应式数据[ref和reactive]</h2><p>ref 可用于任何类型的数据创建响应式，reactive只用于创建引用类型数据的响应式。<br>ref可用于任何类型的数据创建响应式【直接得到响应式变量】<br>reactive只用于创建引用数据类型的响应式【toRefs()是为了解构时保证属性具备响应式再抛出，在模板中直接使用响应式属性，如果直接抛出data，每次都需要data.属性】</p><blockquote><p>toRefs:使解构后的数据重新获得响应式</p></blockquote><ol><li>ref适用基本数据类型，模板中使用，直接在return中抛出，同时模板里面不需要.value,而在setup里面操作数据需要.value</li><li>reactive适用复杂数据类型，模板中使用，需要将属性抛出，再在模板中使用，而在setup里面操作数据需要.属性</li><li>通信上面，传递的是proxy实例对象,props接收的proxy实例对象可以直接在模板中使用，但是setup里面操作这个数据需要通过参数props，包括emit，由于没有this也需要一个参数一般是context</li></ol><h3 id="响应式数据eg："><a href="#响应式数据eg：" class="headerlink" title="响应式数据eg："></a>响应式数据eg：</h3><blockquote><p>ref：可用于任何类型的数据创建响应式, 取值需要.value。对于基本类型，ref的性能优于reactive,而对于对象类型数据，ref是通过reactive包装实现的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> name = ref(<span class="string">&#x27;小明&#x27;</span>)</span><br><span class="line">   <span class="comment">// 这里需要通过.value访问，模板中可直接使用name（vue内部会自动浅层次解析内部值）</span></span><br><span class="line">   <span class="built_in">console</span>.log(name.value)</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     name</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>reactive</code>：只用于创建引用类型数据的响应式，取值不用加<code>.value</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> userInfo = reactive(&#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="comment">// 下面三种写法的区别</span></span><br><span class="line">     <span class="comment">// 1.通过toRefs解构userInfo的内容，模板使用直接name，使每个属性具备响应性。【最佳方案】</span></span><br><span class="line">     ...toRefs(userInfo),</span><br><span class="line">     <span class="comment">// 2.直接return出去，模板中使用不能直接使用name需要userInfo.name，比较麻烦</span></span><br><span class="line">     <span class="comment">// userInfo,</span></span><br><span class="line">     <span class="comment">// 3.解构后，在模板中直接使用name,但是属性不再具有响应性</span></span><br><span class="line">     <span class="comment">// ...userInfo,</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>toRef</code>：复制 <code>reactive</code>里的单个属性并转成<code>ref</code><br><code>toRefs</code>：复制<code>reactive</code>里的所有属性并转成<code>ref</code><br><code>toRefs</code>和<code>toRef</code>功能是一致的，但是可以批量创建多个<code>ref</code>对象</p><p><code>toRef</code>: 将对象中的属性单独变成响应式数据(就是只能控制对象中的一个属性给外部使用)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> userInfo = reactive(&#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="attr">name</span>: toRef(userInfo, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>toRefs</code>：使解构后的数据重新获得响应式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userInfo = reactive(&#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> hello = ref(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">   hello,</span><br><span class="line">   ...toRefs(userInfo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="props和attrs【补充一个provide和inject】"><a href="#props和attrs【补充一个provide和inject】" class="headerlink" title="props和attrs【补充一个provide和inject】"></a>props和attrs【补充一个provide和inject】</h3><ol><li>props和attrs都可以获取父组件的数据</li><li>props接收的proxy实例对象可以直接在模板中使用，但是setup里面操作这个数据需要通过参数props；而attrs，在模板中使用需要解构var {num, arr} = context.attrs并抛出，方法可以context.attrs.fn()直接调用</li><li>props可以获取父组件的所有数据，不包含函数，attrs可以获取函数</li><li>props中出现的数据，attrs就不会出现，如果父给子传递数据，props没有接收，attrs就会接收，props接收，attrs就不接收，这两是互斥的[函数除外，props无法接收函数，但是attrs,所以也可以使用attrs接收函数来调用，两者可以搭配使用一个接收数据，一个接收函数来调用]。</li><li>父组件通过@+自定义事件方式传递函数给子组件，子组件通过context.attrs，on+自定义事件方式来触发它==emit【传递数据也是一样】</li><li>provide都可以传递包括函数，inject接收return抛出，直接把函数名放到模板中使用，可以传递实参，provide相当于桥梁【限制条件是只能祖先传递孙子，不能孙子传递祖先】</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js搭建后台基本流程</title>
      <link href="/archives/80cbaab9.html"/>
      <url>/archives/80cbaab9.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <blockquote><p>只需一篇就能学会node.js搭建后台基本流程</p></blockquote><h2 id="数据库准备工作和插件安装【提前创建好项目文件夹】"><a href="#数据库准备工作和插件安装【提前创建好项目文件夹】" class="headerlink" title="数据库准备工作和插件安装【提前创建好项目文件夹】"></a>数据库准备工作和插件安装【提前创建好项目文件夹】</h2><ol><li><p>在终端启动mongoDB服务器，进入mongoDB交互式shell<br><code>mongo</code></p></li><li><p>创建数据库[切换数据库]<br><code>use 数据库名</code></p><blockquote><p>use切换数据库时，若库存在则切换，如果数据库不存在则创建并切换<br>use创建的数据库只是一个空的数据库，没有集合，所以<code>show dbs</code>不显示空数据库。</p></blockquote></li></ol><p>可以使用<code>db</code>命令来查看当前所在的数据库名称：<br><code>db</code></p><ol><li>创建表并插入几条数据</li></ol><p>==表是不需要先行进行定义的==，当我们往一个表中插入记录后，表就自动出来了。<br>JSON格式数据：不是严格意义上的json数据，key名可以不使用引号包裹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.表名/集合名.insert(JSON格式数据)</span><br><span class="line"># 表名/集合名是不存在的（第一次插入数据的时候），当数据插入完毕则表名就存在了</span><br></pre></td></tr></table></figure><p>查看数据<br>db.表名加上s.find()</p><ol><li>安装express+Mongoose+art-template模板引擎(默认你已经安装好了nodejs和express)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 全局安装express</span><br><span class="line">npm install express -g</span><br><span class="line">// art-template模板引擎</span><br><span class="line">npm i -S art-template express-art-template</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>包管理文件【package.json,这里选择快捷方式】<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></li><li>安装依赖<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure></li><li><strong>安装Mongoose 模块</strong>[连接数据库的模块]</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 进入当前项目根目录，输入：</span><br><span class="line">//安装Mongoose,   --save或者-S把Mongoose模块加入到项目依赖</span><br><span class="line">npm install mongoose --S</span><br></pre></td></tr></table></figure><h2 id="express操作mongodb"><a href="#express操作mongodb" class="headerlink" title="express操作mongodb"></a>express操作mongodb</h2><ol><li>创建服务</li><li>查询数据，拿到数据</li><li>定义模板页面用来渲染查询的数据</li></ol><blockquote><p>先跑通前后端<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建服务实例</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">// 监听请求</span></span><br><span class="line">app.get(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 启动服务</span></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;your server running at http://locahost:8080&#x27;</span>))</span><br></pre></td></tr></table></figure></p><p>连接数据库<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="comment">// 参数  mongodb关键词  localhost是数据ip地址  27017是默认端口号  members链接的库</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost:27017/members&#x27;</span>)</span><br><span class="line"><span class="comment">// 定义表结构</span></span><br><span class="line"><span class="keyword">const</span> demoSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="built_in">Number</span>, <span class="comment">//key是表的字段  value是字段的类型</span></span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">Number</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">String</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>定义Model<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1 是Model的名称</span></span><br><span class="line"><span class="comment">// 参数2 上面的表结构 schema</span></span><br><span class="line"><span class="comment">// 参数3 是对应的表名称，可以省略，不写的话默认就是model名称的复数形式。</span></span><br><span class="line"><span class="keyword">const</span> model = mongoose.model(<span class="string">&#x27;demoModel&#x27;</span>,demoSchema,<span class="string">&#x27;demo&#x27;</span>)</span><br></pre></td></tr></table></figure></p><p>监听请求里操作数据库，并把数据返回给前端</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// find默认是查询所有数据，后面可以跟条件，.then可以拿到回调的数据，data就是数据</span></span><br><span class="line">model.find().then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;data&#x27;</span>,data); <span class="comment">//data 返回的数据</span></span><br><span class="line">    res.send(&#123;</span><br><span class="line">      <span class="attr">code</span>:<span class="number">200</span>,</span><br><span class="line">      <span class="attr">msg</span>:<span class="string">&#x27;请求成功&#x27;</span>,</span><br><span class="line">      data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.创建服务</span></span><br><span class="line"><span class="comment">    2.查询数据，拿到数据</span></span><br><span class="line"><span class="comment">    3.定义模板页面用来渲染查询的数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">// 1.安装npm i -S art-template express-art-template</span></span><br><span class="line"><span class="comment">// 2.配置模板引擎</span></span><br><span class="line">app.engine(<span class="string">&#x27;html&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>))</span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>,path.join(__dirname,<span class="string">&#x27;views&#x27;</span>)) <span class="comment">//指定views模板去哪里找。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.链接数据库</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="comment">// 参数  mongodb关键词  localhost是数据ip地址  27017是默认端口号  members链接的库</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost:27017/members&#x27;</span>)</span><br><span class="line"><span class="comment">// 2.定义表结构</span></span><br><span class="line"><span class="keyword">const</span> demoSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="built_in">Number</span>, <span class="comment">//key是表的字段  value是字段的类型</span></span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">Number</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 3.定义Model</span></span><br><span class="line"><span class="comment">// 参数1 是Model的名称</span></span><br><span class="line"><span class="comment">// 参数2 上面的表结构 schema</span></span><br><span class="line"><span class="comment">// 参数3 是对应的表名称，可以省略，不写的话默认就是model名称的复数形式。</span></span><br><span class="line"><span class="keyword">const</span> model = mongoose.model(<span class="string">&#x27;demoModel&#x27;</span>,demoSchema,<span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 4.操作数据库</span></span><br><span class="line">    <span class="comment">// find默认是查询所有数据，后面可以跟条件，.then可以拿到回调的数据，ret就是数据</span></span><br><span class="line">    model.find().then(<span class="function"><span class="params">ret</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ret&#x27;</span>,ret); <span class="comment">//ret 是数组的一个格式</span></span><br><span class="line">        <span class="comment">// res.send(&#123;</span></span><br><span class="line">        <span class="comment">//     code:200,</span></span><br><span class="line">        <span class="comment">//     msg:&#x27;请求成功&#x27;,</span></span><br><span class="line">        <span class="comment">//     data:ret</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        res.render(<span class="string">&#x27;user.html&#x27;</span>,&#123;</span><br><span class="line">            <span class="attr">ret</span>:ret</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;您的服务已启动， http://localhost:8080&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="mongoDB操作命令"><a href="#mongoDB操作命令" class="headerlink" title="mongoDB操作命令"></a>mongoDB操作命令</h2><blockquote><p>mongo操作</p><ul><li>mongo进入数据库</li><li>show dbs 显示所有的库</li><li>db 显示当前所在的库</li><li>use 库名  切换数据库，创建数据库</li><li>db.表名.insert(json数据)  在某个表当中插入一条数据。</li><li>show tables 查看所有表</li><li>db.表名.drop() 删除某一个表</li><li>db.dropDatabase() 删除当前库，清空数据库，但是库名还在。<br>增删改查</li><li>增<br>db.表名.insert(json数据)  添加一条     insertOne<br>db.表名.insert([json1,json2])  添加多条   insertMany</li><li>删除<br>db.表名.deleteOne({key:value}) 删除一条，满足条件的第一条被删除。<br>db.表名.deleteMany({key:value}) 删除多条，只要满足条件就被删除。</li><li>修改<br>db.表名.updateOne({条件},{$set:{json数据}}) 修改的时候，如果字段包含就修改，不包含就添加字段。<br>db.表名.updateMany({条件},{$set:{json数据}}) 修改多条数据，只要满足条件就会被修改</li><li>查询<br>db.表名.find(条件)  按条件查询</li><li>获取总条数<br>db.表名.find().count() 获取总条数</li><li>分页<br>db.表名.find().skip(开始下标).limit(截取数据的个数)</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express后台框架学习笔记</title>
      <link href="/archives/b7bcb10.html"/>
      <url>/archives/b7bcb10.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <blockquote><p>一篇文章学会express后台框架</p></blockquote><h2 id="express介绍"><a href="#express介绍" class="headerlink" title="express介绍"></a>express介绍</h2><p>链接地址：<a href="https://www.expressjs.com.cn">https://www.expressjs.com.cn</a></p><p>Express 是基于 Node.js 平台，<code>快速、开放、极简</code>的 Web 开发框架。<strong>搭建web服务器</strong></p><p>Express 的本质：就是一个 npm 上的第三方包，提供了快速创建 Web 服务器的便捷方法。</p><p>使用Express开发框架可以非常方便、快速的创建Web网站的服务器或API接口的服务器</p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><h4 id="创建项目文件夹"><a href="#创建项目文件夹" class="headerlink" title="创建项目文件夹"></a>创建项目文件夹</h4><h4 id="安装一个nodemon工具，代码改变之后自动重启"><a href="#安装一个nodemon工具，代码改变之后自动重启" class="headerlink" title="安装一个nodemon工具，代码改变之后自动重启"></a>安装一个nodemon工具，代码改变之后自动重启</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装【全局安装一次后就不需要重复安装了】</span><br><span class="line">npm i -g nodemon</span><br><span class="line"></span><br><span class="line"># 执行node脚本</span><br><span class="line">nodemon 脚本文件名</span><br></pre></td></tr></table></figure><h4 id="初始化生成包管理文件package-json"><a href="#初始化生成包管理文件package-json" class="headerlink" title="初始化生成包管理文件package.json"></a>初始化生成包管理文件package.json</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init -y[不询问]</span><br><span class="line"></span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><h4 id="安装express生产包"><a href="#安装express生产包" class="headerlink" title="安装express生产包"></a>安装express生产包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S express</span><br></pre></td></tr></table></figure><blockquote><p>在项目文件夹下创建一个js文件</p></blockquote><h4 id="使用express"><a href="#使用express" class="headerlink" title="使用express"></a>使用express</h4><ol><li>导入express模块<ul><li><code>const express = require(&#39;express&#39;)</code></li></ul></li><li>创建web实例<ul><li><code>const app = express()</code></li></ul></li><li>监听请求<ul><li>用户通过get方式访问根<code>/</code>输出<code>hello world</code></li><li><code>app.get(&#39;/&#39;, (req, res) =&gt; &#123; res.send(&#39;hello world&#39;) &#125;)</code></li><li>用户通过post访问<code>/post</code>输出<code>hello post</code></li><li>app.post(‘/post’, (req, res) =&gt; { res.send(‘hello post’) })</li></ul></li><li>启动后台服务<ul><li><code>app.listen(8080, () =&gt; &#123; console.log(&#39;server is running at http://127.0.0.1:8080&#39;) &#125;)</code></li></ul></li></ol><h4 id="请求类型"><a href="#请求类型" class="headerlink" title="请求类型"></a>请求类型</h4><ol><li>GET: 查询请求类型<ol><li>主要用于获取数据，一般用于首屏，展示首页，通过get方式，更快获取到数据进行渲染。</li></ol></li><li>POST：新增请求类型<ol><li>发送更多的数据给后端，不像get是在地址栏，数据放到body中以form或者json【raw】格式向后台发送</li></ol></li><li>PUT：修改请求类型<ol><li>修改是要条件的，修改条件的传递是通过地址栏传递的（restful规范）</li><li>修改的数据主体是通过请求体传递的（请求体发送方式与post一致）</li><li>PUT也是由POST封装的</li></ol></li><li>DELETE：删除请求类型<ol><li>删除是要条件的，删除条件的传递是通过地址栏传递的（restful规范）</li><li>PUT也是由POST封装的</li></ol></li></ol><h4 id="GET方式传参如何获取"><a href="#GET方式传参如何获取" class="headerlink" title="GET方式传参如何获取"></a>GET方式传参如何获取</h4><blockquote><p>通过<code>req.query</code>对象，可以访问到客户端通过查询字符串的形式发送到服务器的参数：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// http://localhost:8080/?id=12&amp;name=aa</span><br><span class="line">app.get(&#x27;/&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">console.log(req.query)// 获取到的直接就是个对象，&#123; id: &#x27;12&#x27;, name: &#x27;aa&#x27; &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="动态参数传参"><a href="#动态参数传参" class="headerlink" title="动态参数传参"></a>动态参数传参</h4><blockquote><p>Express也支持类似于Vue中<code>动态路由</code>的形式传递参数，传递的参数通过 req.params 对象可以访问到：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// http://localhost:8080/123</span><br><span class="line"></span><br><span class="line">// 必须的路由参数（不传就匹配不上，返回404错误）</span><br><span class="line">app.get(&#x27;/:id&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">console.log(req.params.id) // 123</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 可选的路由参数（传递与否都不会报错）</span><br><span class="line">app.get(&#x27;/:id?&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">console.log(req.params.id) // 123，没有就undefined</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>==通过?可以指定可传可不传，与正则表达式?一样==</p><h4 id="静态资源托管"><a href="#静态资源托管" class="headerlink" title="静态资源托管"></a>静态资源托管</h4><blockquote><p>express提供了一个非常好用的方法，叫做 <code>express.static()</code>，通过此方法，可以非常方便地创建一个静态web资源服务器：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(&#x27;assets&#x27;))</span><br><span class="line">// app.use()表示使用（中间件）</span><br><span class="line">// 现在可以访问assets目录下所有的文件</span><br><span class="line">// 如assets/a.jpg文件，则可以通过 : http://xxxx/a.jpg</span><br></pre></td></tr></table></figure><p>express还支持给静态资源文件创建一个<strong>虚拟的</strong>文件前缀（实际上文件系统中并不存在），可以使用 <code>express.static</code> 函数指定一个虚拟的静态目录，就像下面这样：</p><blockquote><p>前缀的使用意义：</p><ul><li>可以迷惑别人，一定程度上阻止别人猜测我们服务器的目录结构</li><li>可以帮助我们更好的组织和管理静态资源</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(&#x27;/static&#x27;, express.static(&#x27;assets&#x27;))</span><br></pre></td></tr></table></figure><p>现在你可以使用 <code>/static</code> 作为前缀来加载 <code>assets</code> 文件夹下的文件了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/static/a.jpg</span><br><span class="line">http://localhost:8080/static/css/style.css</span><br></pre></td></tr></table></figure><p>==使用<code>app.use()</code>方法<strong>一般</strong>写在具体的<strong>路由监听</strong>之前。==</p><h5 id="静态资源托管eg："><a href="#静态资源托管eg：" class="headerlink" title="静态资源托管eg："></a>静态资源托管eg：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  静态资源托管</span></span><br><span class="line"><span class="comment">      + 静态资源服务器，把静态资源变成url请求的样式。</span></span><br><span class="line"><span class="comment">      + express.static 是express封装好的中间件，专门用来设置静态资源托管的目录。</span></span><br><span class="line"><span class="comment">      + 需求：把某些图片放入服务器上。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)<span class="comment">//1.使用已经安装好的express</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express() <span class="comment">//2.创建一个服务</span></span><br><span class="line"><span class="comment">// app.use 使用注册中间件</span></span><br><span class="line"><span class="comment">// 参数1.设置虚拟的目录 提供一些安全性</span></span><br><span class="line"><span class="comment">// 参数2 某个中间件，中间件是某个有特殊功能的一个方法或者函数。</span></span><br><span class="line">app.use(<span class="string">&#x27;/a/b/c&#x27;</span>,express.static(<span class="string">&#x27;assets&#x27;</span>))</span><br><span class="line"><span class="comment">// 3. 接口类型，get post put delete</span></span><br><span class="line"><span class="comment">// 参数1 接口名或者请求名</span></span><br><span class="line"><span class="comment">// 参数2 命名这个请求然后返回的内容，回调</span></span><br><span class="line">app.get(<span class="string">&#x27;/home&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123; <span class="comment">//get传参  query传参</span></span><br><span class="line">    res.send(<span class="string">&#x27;hello word&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;您的服务已经启动&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="路由模块化"><a href="#路由模块化" class="headerlink" title="路由模块化"></a>路由模块化</h4><mark class="hl-label green">把路由拆分成多个js文件，每个js文件就是一个模块，【整个模块负责这个页面的所有请求】</mark> <blockquote><p>路由模块化处理主要分以下几个步骤：</p><ol><li>创建一个目录，一般是router目录，再创建一个js文件<ul><li>该文件即路由模块化文件</li></ul></li><li>引入express模块，再通过express.Router方法创建路由模块对象router<ul><li>const express = require(‘express)</li><li>const router = express.Router()</li></ul></li><li>使用路由对象完成路由规则对应的业务编写<ul><li>router.get(‘/gethome’, (req, res) =&gt; { res.send(‘hello gethome’) })</li><li>router.post(‘/posthome’, (req, res) =&gt; { res.send(‘hello posthome’) })</li></ul></li><li>使用模块化导出<ul><li>module.exports = router</li><li>或者exports = router</li></ul></li><li>在你的文件需要使用的地方引入路由模块化文件<ul><li>const homeData = require(路径)</li></ul></li><li>注册使用[使用的该文件也要引入express，创建实例，最后启动监听端口]<ul><li>app.use(homeData)</li></ul></li></ol></blockquote><h5 id="路由模块化操作eg："><a href="#路由模块化操作eg：" class="headerlink" title="路由模块化操作eg："></a>路由模块化操作eg：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   路由模块化</span></span><br><span class="line"><span class="comment">      + 模块化，把路由拆分多个js文件，每个js文件就是一个模块。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)<span class="comment">//1.使用已经安装好的express</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express() <span class="comment">//2.创建一个服务</span></span><br><span class="line"><span class="comment">// 1个页面有5接口，1个项目有100页面，我们就有500个接口。</span></span><br><span class="line"><span class="comment">// 模块化，home页面的接口放在一起，user页面接口放在一起，my个人中心接口放在一起。归类，模块化。</span></span><br><span class="line"><span class="comment">// app.get(&#x27;/home&#x27;,(req,res)=&gt;&#123; //get传参  query传参</span></span><br><span class="line"><span class="comment">//     res.send(&#x27;hello home&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// 模块化的导入操作</span></span><br><span class="line"><span class="keyword">const</span> homeRouter = <span class="built_in">require</span>(<span class="string">&#x27;./router/home.js&#x27;</span>)</span><br><span class="line">app.use(homeRouter)</span><br><span class="line"><span class="comment">// app.get(&#x27;/user&#x27;,(req,res)=&gt;&#123; //get传参  query传参</span></span><br><span class="line"><span class="comment">//     res.send(&#x27;hello user&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="keyword">const</span> uerRouer = <span class="built_in">require</span>(<span class="string">&#x27;./router/user.js&#x27;</span>)</span><br><span class="line">app.use(uerRouer)</span><br><span class="line"><span class="comment">// app.get(&#x27;/my&#x27;,(req,res)=&gt;&#123; //get传参  query传参</span></span><br><span class="line"><span class="comment">//     res.send(&#x27;hello my&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="keyword">const</span> myRouter = <span class="built_in">require</span>(<span class="string">&#x27;./router/my.js&#x27;</span>)</span><br><span class="line">app.use(myRouter)</span><br><span class="line">app.listen(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;您的服务已经启动&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="中间件，post传递参数如何取值"><a href="#中间件，post传递参数如何取值" class="headerlink" title="中间件，post传递参数如何取值"></a>中间件，post传递参数如何取值</h4><p>==使用内置中间件 <code>express.urlencoded(&#123; extended: false &#125;)</code> 接收post表单数据的键值对【参数队列】==<br>==使用内置中间件 <code>express.json()</code> 接收json格式提交的数据 ==<br>两个可以同时使用，应对不同格式数据来取值，数据放在请求体中【body】<br>在接收完数据后，会将数据的对象形式挂载到<code>req</code>请求对象的<code>body</code>属性上</p><h5 id="中间件操作eg："><a href="#中间件操作eg：" class="headerlink" title="中间件操作eg："></a>中间件操作eg：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用内置中间件 express.urlencoded(&#123;extended:false&#125;)  接收form数据的</span></span><br><span class="line"><span class="comment">// 使用内置中间 express.json()  接收json数据的</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)<span class="comment">//1.使用已经安装好的express</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express() <span class="comment">//2.创建一个服务</span></span><br><span class="line">app.use(express.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line">app.use(express.json())</span><br><span class="line">app.post(<span class="string">&#x27;/post&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123; <span class="comment">//get传参  query传参</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;获取post参数&#x27;</span>,req.body); <span class="comment">//&#123; age: &#x27;22&#x27;, name: &#x27;xiaohong&#x27; &#125;</span></span><br><span class="line">    res.send(<span class="string">&#x27;hello post&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;您的服务已经启动&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h4><blockquote><p>使用第三方中间件来获取表单的数据  body-parser</p></blockquote><ol><li>安装 npm i -S body-parser</li><li>使用第三方中间件<code>const body = require(&#39;body-parser&#39;)</code></li><li>接口处获取前端发送过来的数据<code>req.body</code></li></ol><h4 id="第三方中间件操作eg："><a href="#第三方中间件操作eg：" class="headerlink" title="第三方中间件操作eg："></a>第三方中间件操作eg：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用第三方中间件来获取表单的数据  body-parser</span></span><br><span class="line"><span class="comment">//  1.安装 npm i -S body-parser</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)<span class="comment">//1.引入express</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express() <span class="comment">//2.创建一个服务</span></span><br><span class="line"><span class="comment">// 使用第三方的中间件</span></span><br><span class="line"><span class="keyword">const</span> body = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)  <span class="comment">//包和目录 分清？</span></span><br><span class="line"><span class="comment">// app.use(body.urlencoded(&#123;extended:false&#125;)) //类似内置中间件 express.urlencoded(&#123;extended:false&#125;)</span></span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/post&#x27;</span>,body.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;),<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123; <span class="comment">//3.书写接口</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;post参数&#x27;</span>,req.body); <span class="comment">//&#123; id: &#x27;225&#x27;, name: &#x27;小红&#x27; &#125;</span></span><br><span class="line">    <span class="comment">// throw new Error(&#x27;参数丢失错误&#x27;)  //抛出一个错误</span></span><br><span class="line">    res.send(<span class="string">&#x27;hello wrod&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/data&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123; <span class="comment">//3.书写接口</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;post参数&#x27;</span>,req.body); <span class="comment">//&#123; id: &#x27;225&#x27;, name: &#x27;小红&#x27; &#125;</span></span><br><span class="line">    <span class="comment">// throw new Error(&#x27;参数丢失错误&#x27;)  //抛出一个错误</span></span><br><span class="line">    res.send(<span class="string">&#x27;hello wrod&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误类型中间件  放在最末尾，用来捕获错误的，只要接口报错就执行错误中间件。来提示用户。</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;报错了，请从新访问&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123; <span class="comment">//如果访问的接口不存在，就通知用户，提高体验度。</span></span><br><span class="line">    res.status(<span class="number">404</span>).send(<span class="string">&#x27;&lt;h1&gt;您访问的请求不存在，请确认后在从新访问！！！&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//启动服务</span></span><br><span class="line">app.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h4 id="404处理"><a href="#404处理" class="headerlink" title="404处理"></a>404处理</h4><blockquote><p>404错误中间件也要求在所有的正常请求路由的后面去声明使用，<strong>不要放在路由的前面，否则会导致后面的路由都是404错误。</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设定义这个路由，但是实际请求的时候请求了/12345，这个时候就会404</span></span><br><span class="line">app.post(<span class="string">&quot;/1234&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;你请求成功了&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 404的输出</span></span><br><span class="line"><span class="comment">// 该中间件也需要写在最后（与异常中间件的顺序无所谓，只要确保其在所有的路由方法之后就可）</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 输出404错误</span></span><br><span class="line">    res.status(<span class="number">404</span>).send(<span class="string">&#x27;&lt;h1&gt;404&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">    <span class="comment">// 先指定404状态码，然后再输出错误信息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="cookie后台获取"><a href="#cookie后台获取" class="headerlink" title="cookie后台获取"></a>cookie后台获取</h4><blockquote><p>HTTP是一个无状态协议，客户端每次发出请求时候，下一次请求得不到上一次请求的数据，我们如何将上一次请求和下一次请求的数据关联起来呢？如用户登录成功后，跳转到其他页面时候，其他的页面是如何知道该用户已经登录了呢？此时就可以使用到cookie中的值来判断用户是否登录，cookie可以保持用户数据。</p><p>cookie简介：cookie它是一个由浏览器（存储cookie）和服务器（产生cookie）共同协作实现的（<strong>cookie是存储于浏览器中</strong>）。cookie分为如下几步实现：</p></blockquote><ul><li>服务器端向客户端发送cookie并指定cookie的过期时间。</li><li>浏览器将cookie保存起来。</li><li>之后每次请求都会将cookie发向服务器端，在cookie没有过期时间内服务器都可以得到cookie中的值。</li></ul><p>express中操作的cookie使用cookie-parser模块。</p><p>cookie-parser模块（也是中间件），所以其也会去操作req，res对象；</p><ol><li>设置cookie是通过<code>res.cookie(name,value,[选项])</code></li><li>读cookie的时候需要通过<code>req.cookies</code>对象来获取。</li></ol><p>安装cookie-parser模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S cookie-parser</span><br></pre></td></tr></table></figure></p><h5 id="cookie操作eg："><a href="#cookie操作eg：" class="headerlink" title="cookie操作eg："></a>cookie操作eg：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   cookie</span></span><br><span class="line"><span class="comment">      + 前端的所有请求都默认是携带cookie的。</span></span><br><span class="line"><span class="comment">      + cookie有效期内，后端服务是可以获取cookie的值的。</span></span><br><span class="line"><span class="comment">     1.npm i -S cookie-parser</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)<span class="comment">//1.引入express</span></span><br><span class="line"><span class="keyword">const</span> cookie = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express() <span class="comment">//2.创建一个服务</span></span><br><span class="line">app.use(cookie()) <span class="comment">//使用这个中间件</span></span><br><span class="line">app.get(<span class="string">&#x27;/post&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123; <span class="comment">//3.书写接口</span></span><br><span class="line">    <span class="keyword">if</span>(req.cookies.username)&#123;</span><br><span class="line">        res.send(<span class="string">&#x27;欢迎您&#x27;</span>+req.cookies.username+<span class="string">&#x27;再次回来&#x27;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.cookie(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;小明&#x27;</span>,&#123; <span class="attr">maxAge</span>:<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">8</span> &#125;) <span class="comment">//8小时</span></span><br><span class="line">        res.send(<span class="string">&#x27;小明登陆了&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//启动服务</span></span><br><span class="line">app.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><p>cookie操作很方便，但是使用cookie安全性不高，cookie中的所有数据存储在客户端浏览器中，数据很容易被伪造；所以一些重要的数据就不能放在cookie当中了，并且cookie还有一个缺点就是不能存放太多的数据，一般浏览大约在4k左右，为了解决这些问题，session就产生了，<strong>session中的数据保留在服务端的</strong>。</p><p>数据放到cookie中是不安全的，我们可以在cookie中存放一个sessionId值,该sessionId会与服务器端之间会产生映射关系，如果sessionId被篡改的话，那么它就不会与服务器端数据之间产生映射，因此安全性就更好，并且<strong>session的有效期一般比较短，一般都是设置是20分钟左右</strong>，如果在20分钟内客户端与服务端没有产生交互，服务端就会将数据删除。</p><p>express操作session使用cookie-session模块</p><blockquote><p>cookie-session包对session设置与获取都是基于req请求对象</p></blockquote><p>安装：<code>npm i -S cookie-session</code></p><h5 id="session操作eg："><a href="#session操作eg：" class="headerlink" title="session操作eg："></a>session操作eg：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;cookie-session&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// cnpm i -S cookie-session</span></span><br><span class="line"><span class="comment">// session现在很少用，redis 缓存框架，速度超快，cookie+redis搭配</span></span><br><span class="line">app.use(</span><br><span class="line">    session(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;sessionId&quot;</span>, <span class="comment">//类似token</span></span><br><span class="line">        <span class="comment">// 给sessionid加密的key,随便填写，擦下键盘即可</span></span><br><span class="line">        <span class="attr">secret</span>: <span class="string">&quot;afsfwefwlfjewlfewfef&quot;</span>, <span class="comment">//盐 提供加密的复杂度</span></span><br><span class="line">        <span class="attr">maxAge</span>: <span class="number">20</span> * <span class="number">60</span> * <span class="number">1000</span>, <span class="comment">// 20分钟</span></span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.session[<span class="string">&quot;view&quot;</span>]) &#123;</span><br><span class="line">        req.session[<span class="string">&quot;view&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        req.session[<span class="string">&quot;view&quot;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(<span class="string">`欢迎您第 <span class="subst">$&#123;req.session[<span class="string">&quot;view&quot;</span>]&#125;</span> 次访问！`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm基本使用</title>
      <link href="/archives/2835b457.html"/>
      <url>/archives/2835b457.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <h2 id="npm基本概念"><a href="#npm基本概念" class="headerlink" title="npm基本概念"></a>npm基本概念</h2><p><code>npm</code> 全称为 <code>Node Package Manager</code>，是一个基于 <code>Node.js</code> 的<strong>包管理器</strong>，也是 <code>Node.js</code> 社区最流行、支持的第三方模块最多的包管理器。它的初衷就是让开发人员更容易<strong>分享和重用代码</strong>。<code>npm</code> 提供了命令行工具，其主要功能是<code>管理Node.js包</code>，包括安装、更新、删除、查看、搜索、发布等。</p><p><code>npm</code> 最初只是 <code>Node.js</code> 的包管理器，但随着前端技术的不断发展，它的定位变成了广义的包管理器，可以实现<code>JavaScript</code>、<code>React</code>、<code>Vue</code>、<code>Gulp</code>、<code>移动开发</code>等包管理，是目前最大、生态最为健全的包管理器。</p><p><code>npm</code> 能解决 <code>Node.js</code> 在模块管理上的很多问题，其常见的应用场景如下：</p><ul><li>从<code>npm</code>镜像服务器下载第三方模块；</li><li>从<code>npm</code>镜像服务器下载并安装命令行程序到本地；</li><li>自己发布模块到<code>npm</code>镜像服务器供他人使用。<br><code>npm</code> 不需要单独安装，在安装 <code>Node.js</code> 时，就会连带着一起安装 <code>npm</code> 了。但是安装的 <code>npm</code> 不一定是最新的版本，可以使用以下命令来查看本地 <code>npm</code> 的版本：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>这里的 <code>-v</code> 是 <code>--version</code> 的缩写，表示版本。如果想升级 <code>npm</code> 版本，可以使用以下命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm@latest -g</span><br></pre></td></tr></table></figure>这里<code>@latest</code>表示最新的版本，<code>-g</code> 是 <code>--global</code> 的缩写，表示全局安装。<br>我将常用的 <code>npm</code> 命令放到文章后面，归纳为一个表格了</li></ul><h2 id="npm基本使用"><a href="#npm基本使用" class="headerlink" title="npm基本使用"></a>npm基本使用</h2><ul><li>npm init -y 可以快速生成一个package.json文件<ul><li>没有该包管理文件，就没法安装依赖得到node_modules</li></ul></li><li>npm i -S 包名@版本号，指定版本安装【不指定版本号就会安装最新版本】</li><li>npm i -D 包名@版本号，指定版本安装【不指定版本号就会安装最新版本】</li><li>npm up 包名@版本号，指定版本更新【不指定包名及版本号，会更新所有包为最新版本即npm update】<ul><li>【指定包名不指定版本号直接更新为最新版本】</li></ul></li><li>npm un 包名@版本号，指定版本卸载【必须指定包名，npm uninstall简写，有个弊端就是卸载包或插件了，但是package.json文件里还有该包名及版本号信息，需要自己手动清除】<ul><li>npm un 包名@版本号 -S，加这个参数可以清除package.json里的生产环境(dependencies)里的包名及版本号信息</li><li>npm un 包名@版本号 -D，加这个参数可以清除package.json里的开发环境(devDependencies)里的包名及版本号信息</li></ul></li></ul><p>【注意：打包时不包含开发环境的包，会出现丢包，不知道安装在哪就安装到运行环境，运行环境不会出现丢包】</p><h2 id="切换阿里的镜像源"><a href="#切换阿里的镜像源" class="headerlink" title="切换阿里的镜像源"></a>切换阿里的镜像源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>cnpm -v可以用来检测是否安装成功，之后使用<code>cnpm i -S 包名</code>来安装我们需要的包</p><h2 id="g、-S、-D参数说明"><a href="#g、-S、-D参数说明" class="headerlink" title="-g、-S、-D参数说明"></a>-g、-S、-D参数说明</h2><ol><li>npm i moduleName<br>局部安装，安装依赖到项目根目录的<code>node_modules</code>目录下，老版本不写入节点【<code>npm 5.0+</code> 版本默认添加到<code>package.json</code>文件中的<code>dependencies</code>节点中】，<code>npm i</code>时不下载该依赖</li><li>npm i -g moduleName<br>全局安装，不在<code>node_modules</code>目录下，不写入节点，<code>npm i</code>时不下载该依赖</li><li>npm i —save moduleName<br>局部安装，<code>--save</code>简写为<code>-S</code>，安装依赖到<code>node_modules</code>目录下，写入<code>dependencies</code>节点，<code>npm i</code>时下载该依赖，一般安装运行环境依赖，如<code>vue</code>、<code>element-ui</code>、<code>echarts</code>、<code>express</code>等</li><li>npm i —save-dev moduleName<br>局部安装，<code>--save-dev</code>简写为<code>-D</code>，安装依赖到<code>node_modules</code>目录下，写入<code>devDependencies</code>节点，<code>npm i</code>时下载该依赖，一般安装开发环境依赖，如<code>webpack</code>、<code>eslint</code>、<code>gulp</code>、<code>babel</code>等</li></ol><blockquote><p>两个节点：<code>dependencies</code>和<code>devDependencies</code><br>两个节点属于package.json文件中<br><code>dependencies</code> 节点是项目运行时的依赖，当程序上线后仍然需要的依赖，比如 <code>express</code>这些，这时需要<code>--save</code>参数<br><code>devDependencies</code>节点是开发依赖，当我们在开发时会用到这些依赖，当项目部署了就不需要了，如<code>webpack</code>、<code>gulp</code>、<code>babel</code>这些，这时需要<code>--save-dev</code>参数</p></blockquote><p><strong><code>npm 5.0+</code>版本在默认情况下会将安装的模块添加到<code>package.json</code>文件中的 <code>dependencies</code>节点中。</strong><br><strong>对于较老的<code>npm</code>版本，你就必须指定参数，才能加入到不同节点中。</strong></p><h2 id="命令行删除项目里的node-modules"><a href="#命令行删除项目里的node-modules" class="headerlink" title="命令行删除项目里的node_modules"></a>命令行删除项目里的node_modules</h2><ol><li>全局安装 rimraf<blockquote><p>rimraf包的作用：以包的形式包装rm -rf命令，用来删除文件和文件夹的，不管文件夹是否为空，都可以删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g rimraf</span><br></pre></td></tr></table></figure></blockquote></li><li>执行删除命令<blockquote><p>进入需要清理的项目中，执行 rimraf node_modules 命令即可将node_modules文件删除干净</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rimraf node_modules</span><br><span class="line"><span class="comment"># 或者下面这个</span></span><br><span class="line">rimraf .\node_modules\</span><br></pre></td></tr></table></figure></blockquote></li><li>安装node_modules<blockquote><p>如果需要重新安装回来，只要项目根目录有<code>package.json</code><strong>包管理文件</strong>就可以安装回来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="常用的npm命令"><a href="#常用的npm命令" class="headerlink" title="常用的npm命令"></a>常用的npm命令</h2><div class="table-container"><table><thead><tr><th>命令</th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>npm -v</td><td>查看 npm 版本。</td></tr><tr><td>npm init</td><td>初始化后会出现一个 package.json 配置文件。可以在后面加上 -y ，快速跳过问答式界面。</td></tr><tr><td>npm install</td><td>根据项目中的 package.json 文件自动下载项目所需的全部依赖。</td></tr><tr><td>npm install 包名 —save-dev(npm install 包名 -D)</td><td>安装的包只用于开发环境，不用于生产环境，会出现在 package.json 文件中的 devDependencies 属性中。</td></tr><tr><td>npm install 包名 —save(npm install 包名 -S)</td><td>安装的包需要发布到生产环境的，会出现在 package.json 文件中的 dependencies 属性中。</td></tr><tr><td>npm list</td><td>查看当前目录下已安装的 node 包。</td></tr><tr><td>npm list -g</td><td>查看全局已经安装过的 node 包。</td></tr><tr><td>npm —help</td><td>查看 npm 帮助命令。</td></tr><tr><td>npm update 包名</td><td>更新指定包。</td></tr><tr><td>npm uninstall 包名</td><td>卸载指定包。</td></tr><tr><td>npm config list</td><td>查看配置信息。</td></tr><tr><td>npm 指定命令 —help</td><td>查看指定命令的帮助。</td></tr><tr><td>npm info 指定包名</td><td>查看远程 npm 上指定包的所有版本信息。</td></tr><tr><td>npm config set registry <a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a></td><td>修改包下载源，这里修改为了淘宝镜像。</td></tr><tr><td>npm root</td><td>查看当前包的安装路径。</td></tr><tr><td>npm root -g</td><td>查看全局的包的安装路径。</td></tr><tr><td>npm ls 包名</td><td>查看本地安装的指定包及版本信息，没有显示 empty。</td></tr><tr><td>npm ls 包名 -g</td><td>查看全局安装的指定包及版本信息，没有显示 empty。</td></tr></tbody></table></div><h2 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h2><h3 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h3><p>可以安装<code>nvm</code>管理<code>node</code>版本</p><h3 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h3><p>可以安装<code>nrm</code>管理<code>npm</code>源</p>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2项目搭建流程</title>
      <link href="/archives/1f925d69.html"/>
      <url>/archives/1f925d69.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <blockquote><p>只需一篇文章学会Vue2的PC端项目搭建流程</p></blockquote><h2 id="搭建Vue后台项目"><a href="#搭建Vue后台项目" class="headerlink" title="搭建Vue后台项目"></a>搭建Vue后台项目</h2><h3 id="Vue工具安装"><a href="#Vue工具安装" class="headerlink" title="Vue工具安装"></a>Vue工具安装</h3><blockquote><p>vue脚手架工具(vue命令行工具)<br>vue command line tool，简单的来讲，就是一个基于命令行的vue开发工具。<br>[注：<strong>Vue-CLI ≠ Vue</strong>，Vue-CLI就是一个Vue工具,重点在于指令，安装了就可以使用指令创建项目。]</p></blockquote><p><a href="http://npmjs.com">npm官网</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -g：全局安装</span></span><br><span class="line">npm i -g @vue/cli</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装成功后，检查</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">vue -V</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载（了解）</span></span><br><span class="line">npm uninstall -g @vue/cli</span><br></pre></td></tr></table></figure><blockquote><p>如果需要安装其他版本，可以使用<code>npm install -g @vue/cli@版本号</code>的方式进行指定版本</p></blockquote><h2 id="myadmin【后台管理项目】"><a href="#myadmin【后台管理项目】" class="headerlink" title="myadmin【后台管理项目】"></a>myadmin【后台管理项目】</h2><h3 id="vue创建项目"><a href="#vue创建项目" class="headerlink" title="vue创建项目"></a>vue创建项目</h3><blockquote><p>通过脚手架创建vue项目主要有两种，其实还有一种不使用脚手架，即自己使用npm创建项目安装vue框架和打包工具</p><ul><li>通过UI界面方式去创建（了解），在命令行中输入以下命令启动UI界面<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>通过命令行的方式切创建（推荐），按照如下命令敲即可</li></ul><ol><li>vue create [项目名称]<br><br>vue create myadmin</li><li>Please pick a preset: (Use arrow keys)<br><br> Manually select features  【上下方向键选中手动配置然后回车】</li><li>Check the features needed for your project:<br>【空格进行选择和不选择】选择Babel、Router、Vuex、CSS Pre-processors<br></li><li>Choose a version of Vue.js that you want to start the project with (Use arrow keys)<br>  选择2.x</li><li>Use history mode for router? (Requires proper server setup for index fallback in production)<br><br>输入n ==&gt; no</li><li>Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): (Use arrow keys)<br><br> 选择Less即可</li><li>Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)<br><br>In package.json</li><li>Save this as a preset for future projects?<br><br>输入n ==&gt; no</li></ol><h3 id="项目初始配置"><a href="#项目初始配置" class="headerlink" title="项目初始配置"></a>项目初始配置</h3><ol><li><p>忽略node_modules文件夹<br><br>【vscode一般右下方会有提示窗口是否要忽略node_modules文件夹】<br><br>Git 存储库“d:.Study2022\三阶段\code\day8\myadmin”中存在大量活动更改，将仅启用部分 Git 功能。 是否要将“node_modules”添加到 .gitignore?<br>选择是<br><br> 如果没有就到.gitignore最上面添加<code>node_modules</code></p></li><li><p>cd 进入项目根目录[按tab键会提示你当前目录下的文件，可以切换]</p></li><li><p>开发阶段关闭eslint</p><ul><li>在项目根目录创建vue.config.js 文件，配置如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    lintOnSave: false// eslint-loader 是否在保存的时候检查</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>运许项目<ul><li>运行<code>npm run serve</code>命令来启动项目</li><li><blockquote><p>注意：默认端口号会从8080开始，如果再次启动其他项目后续会以8081、8082……进行监听。</p></blockquote></li><li><blockquote><p>如果需要停止正在运行的项目，可以选择以下两种方式任一：</p><ul><li>关闭终端</li><li>在终端中按下组合键<code>Ctrl + C</code>（Cancel），随后选择<code>Y</code>并键入<code>回车</code></li><li>也可以按下两次<code>Ctrl + C</code></li></ul></blockquote></li><li>==关于项目运行时，如果修改了项目代码是否需要重启的说明：==<ul><li>是否需要重启取决于我们修改了什么内容，如果只是修改了代码部分（js、css、vue文件等）是不需要开发者手动重启项目的，系统会自动重新编译（有点nodemon感觉）；<strong>但是如果修改的是配置文件，则必须需要自己先去停止项目，然后再去启动项目（手动实现重启）。</strong></li></ul></li></ul></li><li><p>清除文件【初次做项目，删除了很多不必要的文件，熟悉这些不同文件夹、文件的用途】</p><ul><li>分别删除src目录下的assets文件夹、components文件夹、router文件夹、store文件夹和views文件夹</li><li>清除一下App.vue里面内容【App.vue，只保留一个容器，它不需要script，里面不写js,main.js可以说就是App.vue里的js分离出去的】   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 容器，展示内容用 --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li>根组件去掉scoped 【scoped：把当前组件的样式变成局部样式】</li></ul></li><li><p>搭建项目目录结构，在src目录下创建文件夹</p><ul><li>api文件夹 统一api控制</li><li>assets文件夹 存放静态资源</li><li>components文件夹 公共组件</li><li>layout文件夹 布局+导航栏子组件【固定不变的内容作为子组件也一起放在这里，注意一点，子组件不和路径url，相关联,只做展示用，路由父组件得注册路由，总路由【路由实例】是挂载在根组件上的】<ul><li>主要放Layout.vue路由组件</li></ul></li><li>mock文件夹 mock接口</li><li>router文件夹 路由，主要做跳转配置文件<ul><li>在里面可以提前新建一个index.js</li></ul></li><li>store文件夹 vuex，管理数据中心<ul><li>在里面可以提前新建一个modules文件夹和index.js文件</li></ul></li><li>utils文件夹 工具类，存放封装好的方法【如axios请求的再次封装】</li><li>views 页面，内容组件，展示内容用<ul><li>可以提前创建一个404的vue路由组件，NotFound.vue,放点内容如页面飞走了！！</li></ul></li></ul></li></ol><hr><h3 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h3><ol><li>重置样式<ul><li>在assets目录创建reset.css文件重置样式<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">*&#123;<span class="attribute">box-sizing</span>: border-box;&#125;</span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">p</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">legend</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>&#123;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">html</span>&#123;<span class="attribute">font-family</span>:<span class="string">&quot;微软雅黑&quot;</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">background-color</span>:<span class="number">#eeeeee</span>;&#125;</span><br><span class="line"><span class="selector-class">.clear</span>:after&#123;content:<span class="string">&quot;&quot;</span>;<span class="attribute">display</span>:block;<span class="attribute">clear</span>:both;<span class="attribute">height</span>:<span class="number">0</span>;<span class="attribute">visibility</span>:hidden;<span class="attribute">overflow</span>:hidden;&#125;</span><br><span class="line"><span class="selector-class">.clear</span>&#123;zoom:<span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;<span class="attribute">list-style</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;<span class="attribute">vertical-align</span>:top;<span class="attribute">border</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">input</span>,select,<span class="selector-tag">button</span>,<span class="selector-tag">textarea</span>&#123;<span class="attribute">outline</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">textarea</span>&#123;<span class="attribute">resize</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;button&quot;</span>]</span>,<span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span>,<span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;file&quot;</span>]</span> &#123;<span class="attribute">cursor</span>:pointer;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>引入该文件<br><br>在main.js文件中引入<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;./assets/reset.css&#x27;</span><br></pre></td></tr></table></figure></blockquote></li></ul></li></ol><hr><blockquote><p>使用重置样式插件<br><br>介绍：Normalize.css只是一个很小的css文件，但它在磨人的HTML元素样式上提供了跨浏览器的高度一致性。相比于传统的CSS reset,Normalize.css是一种现代的、为HTML5准备的优质替代方案。总之，Normalize.css是一种CSS reset的替代方案。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装重置样式插件</span><br><span class="line">npm install --save normalize.css  /或者&quot;reset-css&quot;: &quot;^5.0.1&quot;,</span><br><span class="line"># main.js 引入</span><br><span class="line">import &#x27;normalize.css/normalize.css&#x27;</span><br></pre></td></tr></table></figure></p></blockquote><ol><li>安装ui库</li></ol><blockquote><p><code>npm i element-ui@2.15.6 -S</code><br><br>日期组件会有问题，版本选择2.15.6</p><ul><li><code>main.js</code>入口文件引入【全局js文件】  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import ElementUI from &#x27;element-ui&#x27;</span><br><span class="line">import &#x27;element-ui/lib/theme-chalk/index.css&#x27; // 全局引入样式</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI,&#123; size: &#x27;mini&#x27;&#125;) // 设置所有的ui都为小号</span><br></pre></td></tr></table></figure></li></ul></blockquote><ol><li>构件项目的布局页面【layout文件夹下操作】</li></ol><blockquote><p>首先得有一个大的路由组件，由于之前在App.vue已经放了展示容器，直接在layout文件夹下创建一个Layout.vue文件，并添加点内容<br><br>注册，找到路由文件夹创建一个index.js<br><br>index.js文件配置路由，导入vue、vue-router、导入该路由组件取个组件名，注意大驼峰<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &quot;vue&quot;</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line">import Layout from &#x27;../layout/Layout.vue&#x27;</span><br><span class="line">import NotFound from &#x27;../views/NotFound.vue&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter) // Vue上注册使用</span><br><span class="line"></span><br><span class="line">const routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/&#x27;,</span><br><span class="line">        redirect: &#x27;/layout&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/layout&#x27;, // 注意一级路由路径带/，而从二级路由开始不带/，一般最多三级路由。</span><br><span class="line">        name: &#x27;layout&#x27;,</span><br><span class="line">        component: Layout</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;*&#x27;,</span><br><span class="line">        component: NotFound</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><br>在入口文件main.js导入刚刚暴露的路由，挂到vue实例身上，npm run serve运行即可打开页面看一下Layout.vue里面内容是否生效</p><p>预览布局划分，划分完在element-ui找到合适的布局容器，复制代码粘贴过来【直接粘贴到template下，外层可以包div也可以不包】</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-container&gt;</span><br><span class="line">  &lt;el-header&gt;Header&lt;/el-header&gt;</span><br><span class="line">  &lt;el-container&gt;</span><br><span class="line">    &lt;el-aside width=&quot;200px&quot;&gt;Aside&lt;/el-aside&gt;</span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">      &lt;el-main&gt;Main&lt;/el-main&gt;</span><br><span class="line">      &lt;el-footer&gt;Footer&lt;/el-footer&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">  &lt;/el-container&gt;</span><br><span class="line">&lt;/el-container&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意样式也要copy过来放到style标签里面[可带style也可不带]</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">.el-header, .el-footer &#123;</span><br><span class="line"> background-color: #B3C0D1;</span><br><span class="line"> color: #333;</span><br><span class="line"> text-align: center;</span><br><span class="line"> line-height: 60px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-aside &#123;</span><br><span class="line"> background-color: #D3DCE6;</span><br><span class="line"> color: #333;</span><br><span class="line"> text-align: center;</span><br><span class="line"> line-height: 200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-main &#123;</span><br><span class="line"> background-color: #E9EEF3;</span><br><span class="line"> color: #333;</span><br><span class="line"> text-align: center;</span><br><span class="line"> line-height: 160px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &gt; .el-container &#123;</span><br><span class="line"> margin-bottom: 40px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-container:nth-child(5) .el-aside,</span><br><span class="line">.el-container:nth-child(6) .el-aside &#123;</span><br><span class="line"> line-height: 260px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-container:nth-child(7) .el-aside &#123;</span><br><span class="line"> line-height: 320px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>再看一下效果怎么样，发现高度存在一定问题，这时候需要把三个根元素高度设置100%，并设置到全局{公有}样式里=&gt;App.vue</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html,body,#app&#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>发现还是没占满，鼠标右键再接着看里面元素，发现咱们复制粘贴过来的容器高度不是100%，于是再回到Layout.vue,在样式最上面设置容器高度100%<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.el-container &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>复制粘贴过来的样式清除一下不需要的，只保留区块背景色</p><p>可以发现主题内容区域是切换的并是由侧边栏控制，可以想到二级路由，先提前到切换内容的地方放上容器占位[把main文本替换位容器即可]，创建二级路由组件[layout文件夹一般只放最大的布局路由组件]，我们需要在views文件夹下创建home文件夹=&gt;home目录下创建home.vue和components未来放子组件[注意vue文件名要采用大驼峰]</p><p>可以在Home.vue放一点内容文本如Home,方便查看路由是否配置成功</p></blockquote><p>【注：路由组件三步，容器占位=&gt;创建路由组件=&gt;路由里面注册】</p><blockquote><p>创建完就得注册了，进入<code>router/index.js</code>,首先就是引入二级路由组件，注意一个关键属性children,【注意路由配置这里都是数组里套对象，数组可以放多个路由配置】,然后写上配置对象</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: &#x27;/layout&#x27;,</span><br><span class="line">    name: &#x27;layout&#x27;,</span><br><span class="line">    component: Layout,</span><br><span class="line">    children: [</span><br><span class="line">           &#123;</span><br><span class="line">           path: &#x27;home&#x27;, // 不要带/</span><br><span class="line">           name: &#x27;home&#x27;,</span><br><span class="line">           component: Home</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>接着咱们可以多创建几个二级路由组件，并进行配置，平级的路由只需要第一个放容器就行，路径=&gt;互相切换内容，只需要注册好即可,在地址栏把hash值home替换为user测试一下</p><p>左边侧边栏可以先用类似a标签的<code>router-link</code>，to是path值[已经是在layout下了，也可以写完整路径<code>/layout/home</code>]</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;home&quot;&gt;home&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&quot;user&quot;&gt;user&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>测试一下可以跳转即可</p></blockquote><ol><li>开始书写内容区，划分内容区组件【路由组件home为父组件在里面划分出子组件】</li></ol><blockquote><p>划分为上中下，mySearch、myTable、myPage，首先子组件别名占位【注意是在父组件里】=&gt;创建子组件=&gt;在父组件里注册【这三步和路由组件差不多,组件别名个人习惯大驼峰包括组件文件名也是】</p><p>搜索组件应用：<br>书写MySearch.vue里面内容：<br>在子组件MySearch.vue文件里开始写内容，观察布局一左一右，刚好外层有个div里面直接使用两个div,再使用Element-ui组件【书写内容之前布置布局很重要，一般都是外面套div使用flex布局】</p></blockquote><p>【注意把v-model对应的数据也一起复制过来，不然会报错】</p><blockquote><p>复制过来后样式需要调整，采用样式覆盖【采用less嵌套语法，层级不够就在类名前面加上<code>/deep/</code>】</p><p>书写MySearch.vue里面内容：<br>这个可以直接复制粘贴表格组件即可</p><p>表格组件应用：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">表格两种写法：</span><br><span class="line">&lt;!-- slot-scope作用域插槽，template空标签，scope就当成变量即可，scope.row就是当前行数据 --&gt;</span><br><span class="line">&lt;template slot-scope=&quot;scope&quot;&gt;&#123;&#123; scope.row.date &#125;&#125;&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- label表头，prop指定的字段, 宽度去掉就会自适应 --&gt;</span><br><span class="line">&lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;120&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>自定义表格数据，替换字段即可</p><p>分页组件</p></blockquote><p>直接复制过来，对齐进行位置处理外面套个div，使用flex布局，静态页面内容基本完成</p><blockquote><p>写功能：<br>写功能之前，涉及到发送数据，请求接口，后端模拟数据<br><mark class="hl-label pink">以往是使用ajax发送请求，但是vue里面为我们提供了axios，axios就是利用promise对ajax进行了再次封装</mark> </p><p>使用axios,安装一下axios</p><ol><li>在工具类<code>utils目录</code>里面我们可以对axios进行再次封装，为了得到一个全局请求工具类，每个请求接口调用这个请求，配置get还是post以及传参<ol><li>可以把bus通信也一起配置了【注意都需要单独创建文件】</li><li>开发中把Axios进行二次封装，可以更好的使用Axios的请求拦截器，以及响应拦截器去处理数据</li><li>baseURL，主要放域名【一般后端接口都有相同域名，hash值不同】，由于没有真实后端接口地址，这里可以随便写，或者写空字符串就行了，最终它会和请求接口里配置得url拼接，而mock接口名采用正则，比如包含/home</li></ol></li></ol></blockquote><hr><ol><li>所有<code>请求接口</code>都进行统一管理，在api目录创建一个homeApi.js文件【这个文件用来处理home页面所有的请求】<ol><li>将我们的请求工具类引入</li><li>页面加载完得向后端请求数据，然后渲染，伪造数据和后端接口【使用mock进行模拟后端接口】</li><li>安装mockjs<ul><li>npm i -S mockjs</li><li>在mock目录下创建一个index.js文件用来放后端提供<code>数据接口</code>，先引入一下Mock,然后把它注入到main.js</li><li>在mock目录下创建一个homeData.js文件伪造home页面的数据,这时我们需要用到一个工具类，地址栏参数解析【参数转对象，提取url参数】</li><li>在utils目录下新建一个urlUtils.js文件,这个直接使用即可</li><li>回到homeData.js文件直接引入提取参数工具类,伪造100条数据，利用for循环往List添加数据，并使用Mock生成【List是我们用来存放伪造数据】</li><li>可以把之前表格静态数据拿过来，添加一个id,并把值全部替换为Mock来生成，每遍历一次都会生成一条数据<blockquote><p><code>/mock/homeData.js</code>文件暴露该对象,让index.js接收该对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    getHomeData: config =&gt; &#123;</span><br><span class="line">        console.log(config)</span><br><span class="line">        return &#123;</span><br><span class="line">            code: 200,</span><br><span class="line">            msg: &#x27;请求成功&#x27;,</span><br><span class="line">            res: List</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/mock/index.js</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// index.js主要提供数据接口,最终注入到main.js，某个页面数据增删改查需要创建js文件，进行操作然后暴露,暴露对象</span><br><span class="line">import Mock from &#x27;mockjs&#x27;</span><br><span class="line">// 引入homeData对象</span><br><span class="line">import homeData from &#x27;./homeData&#x27;</span><br><span class="line"></span><br><span class="line">// 写数据接口，与请求接口对应</span><br><span class="line">// 参数1：接口的正则表达式</span><br><span class="line">// 参数2：请求类型 get post put delete</span><br><span class="line">// 参数3：返回给前端的数据</span><br><span class="line">Mock.mock(/\/home/, &#x27;get&#x27;, homeData.getHomeData)</span><br></pre></td></tr></table></figure></blockquote></li></ul></li></ol></li></ol><hr><ol><li>回到home组件，请求数据统一放到父组件中，方便后续操作，不需要每个子组件都去请求数据<ol><li>父传子采用props，elementUI里表格有个tableData我们只需要父组件传值过去，替换一下就可以了</li><li>引入请求接口，来帮我们请求数据</li><li>在父组件mounted里请求数据，不要直接调用请求接口，进行封装，方便刷新操作能接着调用，请求数据不会只用一次一定要封装</li><li>请求成功会得到一个后端返回给我们的res对象，该对象包含了状态码、请求信息、数据【一般都是数组】</li></ol></li></ol><blockquote><p>正确的接口调用方式如下：</p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    this.initGetHome()</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    initGetHome() &#123;</span><br><span class="line">        getHomeApi().then((res) =&gt; &#123;</span><br><span class="line">            console.log(&quot;res&quot;, res)</span><br><span class="line">            if (res.code == 200) &#123;</span><br><span class="line">                this.arr = res.data</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></h2><p>从简单功能开始写，查询=&gt;删除=&gt;分页=&gt;添加=&gt;编辑</p><ol><li>MySearch组件里面的搜索功能,这个搜索功能可以放到初始请求数据里面，把keyword传进去，后端接收对数组过滤即可<ol><li>子传父，这里我们采用this.$emit(事件类型，关键词),父组件里用个keyword接收即可【工具类有键名，无键值默认为空串，不搜索，初次进入页面，始终都是有keyword的键名】</li><li>后端进行处理，回到<code>/mock/homeData.js</code>，对于关键字进行过滤，返回给前端</li><li>让父组件刷新数据</li></ol></li></ol><p><code>/home/Home.vue</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    searchFunParent(val) &#123;</span><br><span class="line">        this.keyword = val</span><br><span class="line">        this.initGetHome()</span><br><span class="line">    &#125;,</span><br><span class="line">    // 请求接口调用进行封装</span><br><span class="line">    // initGetHome() &#123;</span><br><span class="line">    //     getHomeApi().then((res) =&gt; &#123;</span><br><span class="line">    //         // console.log(&quot;res&quot;, res)</span><br><span class="line">    //         if (res.code == 200) &#123;</span><br><span class="line">    //             this.arr = res.data</span><br><span class="line">    //         &#125;</span><br><span class="line">    //     &#125;)</span><br><span class="line">    // &#125;,</span><br><span class="line">    // 引入关键词，对于请求接口调用进行升级[注意参数是对象]</span><br><span class="line">    initGetHome() &#123;</span><br><span class="line">        getHomeApi(&#123; keyword: this.keyword &#125;).then((res) =&gt; &#123;</span><br><span class="line">            // console.log(&quot;res&quot;, res)</span><br><span class="line">            if (res.code == 200) &#123;</span><br><span class="line">                this.arr = res.data</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br><code>/mock/homeData.js</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getHomeData: config =&gt; &#123;</span><br><span class="line">    // console.log(config) config是个对象里面有url，这个url刚好携带了get方式的参数【正好利用上参数解析该工具类】，同时里面还有请求方式</span><br><span class="line">    // console.log(config.url)</span><br><span class="line">    var &#123; keyword &#125; = param2Obj(config.url) // 参数解析</span><br><span class="line">    // console.log(1, keyword)</span><br><span class="line">    var res = List.filter(item =&gt; item.username.indexOf(keyword) != -1)</span><br><span class="line">    return &#123;</span><br><span class="line">        code: 200,</span><br><span class="line">        msg: &#x27;请求成功！&#x27;,</span><br><span class="line">        data: res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>get和post两种请求config不同，数据所在位置的不同【get需要参数解析】</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">get方式：config值如下</span><br><span class="line">&#123;url: &#x27;/home?keyword=%E9%87%91&#x27;, type: &#x27;GET&#x27;, body: null&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">post方式：config值如下</span><br><span class="line">&#123;url: &#x27;/deleteById&#x27;, type: &#x27;POST&#x27;, body: &#x27;&#123;&quot;id&quot;:&quot;CC5523bd-5cBF-58c9-b345-98B7fF39FFf2&quot;&#125;&#x27;&#125;</span><br></pre></td></tr></table></figure><hr><ol><li>MyTable组件的单删功能，单删功能【逻辑：直接调用请求接口把id发给后端，后端删除，如果成功就发送事件给父组件，因为咱们的数据都是放在父组件，父组件重新请求一下数组就更新了,该自定义事件执行初始化数据函数】<ol><li>点击每一个删除按钮它都对应一条数据对应一个id,这个id我们可以通过scope.row拿到，scope.row就是当前行数据</li><li>点击删除有个elementUI自带的handleDelete方法，把里面参数改为scope.row.id,注意scope.row就是当前行数据，数组里的遍历得到的一个对象，直接拿id</li><li>写删除请求接口</li><li>引入该请求接口，子组件里直接调用，数据是放在父组件，如果成功就发送事件[写上打印res.msg]，让父组件刷新数据</li><li>子传父，发送自定义事件，该自定义事件执行初始化数据函数【刷新数据】</li><li>后端处理，先简单处理，跑通前后端，再写后端逻辑[请求成功一定要打印res.msg测试一下是否跑通]</li><li>在mock的index.js由于首次已经引入homeData就不需要再引入，配置数据接口，与前端对应</li><li>写后端逻辑，post方式id是在请求体中，config.body，然后利用JSON.parse解析得到对象，再解构拿到id</li><li>使用过滤，id不符合的全部过滤出来,再重新赋值给List</li><li>发送自定义事件，让父组件刷新数据</li></ol></li></ol><blockquote><p>get和post两种请求config不同，数据所在位置的不同</p></blockquote><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">get方式：config值如下</span><br><span class="line">&#123;url: &#x27;/home?keyword=%E9%87%91&#x27;, type: &#x27;GET&#x27;, body: null&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">post方式：config值如下[id值是这样的，mock伪造时就长这样，JSON解析也还是长这样]</span><br><span class="line">&#123;url: &#x27;/deleteById&#x27;, type: &#x27;POST&#x27;, body: &#x27;&#123;&quot;id&quot;:&quot;CC5523bd-5cBF-58c9-b345-98B7fF39FFf2&quot;&#125;&#x27;&#125;</span><br></pre></td></tr></table></figure></h2><ol><li>MySearch批量选中删除,涉及两兄弟组件通信采用Bus通信<ol><li>选中数据是在MyTable组件中，有个v-model绑定的数组，里面放的是选中每一条数据，而批量删除按钮在MySearch组件里</li><li>思路：MySearch组件点击发送事件给MyTable组件，MyTable组件里面的选中数据提取出id放在一个数组里面，调用批量删除请求接口，发给后端</li><li>MySearch组件Bus通信MyTable组件,首先引入事件中心,发送一个自定义事件<ol><li>传递数据<ul><li>eventBus.$emit(‘自定义事件名’,传递的数据) // 这里不需要传递数据</li></ul></li></ol></li><li>MyTable组件接收，一样先引入事件中心，选择挂载后接收，mounted里接收<ol><li>接收数据<ul><li>eventBus.$on(‘自定义事件名’, callback) // 回调函数第一个参数就是传递过来的数据</li></ul></li></ol></li><li>这里callback我们可以替换为MyTable组件里的批量删除函数，单独写一个删除函数[建议删除函数名字不要与发送接收自定义事件名重复，不然报错]</li><li>写批量删除请求接口,引入接口,调用接口</li><li>后端数据操作，依旧是先跑通，逻辑后写【数据操作文件里面写】</li><li>写数据接口【mock的index.js】</li><li>如果能打印批量删除成功说明已跑通</li><li>后端逻辑，使用过滤，把过滤的值赋值给List</li><li>发送自定义事件，让父组件刷新数据</li></ol></li></ol><blockquote><p>先写成下面这样，不要直接写逻辑，把前后端跑通再写逻辑</p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">batchDelete: config =&gt; &#123;</span><br><span class="line">    console.log(config) // 查看请求信息，放的是前端发送过来的相关请求信息，包括携带的数据</span><br><span class="line">    return &#123;</span><br><span class="line">        code: 200,</span><br><span class="line">        msg: &#x27;批量删除成功&#x27;,</span><br><span class="line">        data: null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><ol><li>MyPage组件分页功能[分页后端有个公式，page页码和pageSize每页显示多少条数据，是必须传给后端]<ol><li>分页组件一般较为常用，封装为公共组件，提到<code>src/components</code>目录下，main.js入口文件注册，同时注释或删除掉之前在Home.vue组件里注册和引入</li><li>将elementUI里的页码、当前页、每页多少条、总条数替换为变量, 数据依旧放到父组件</li><li>父传子，把页码、当前页、每页多少条、总条数传给MyPage组件【虽然是公共组件，但是是在Home组件里面使用，父传子】</li><li>分页组件接收，不建议使用数组，使用对象有默认值</li><li>分页组件点击第几页和条数时，向Home组件发送数据，更改父组件里的页码和每页显示多少条的值</li><li>有了页码和每页显示多少条，由于是获取数据，可以直接作为参数和搜索请求接口合并，在请求接口调用里接着加入参数</li><li>每次更改和初始是需要请求数据并渲染的，都需要重新请求数据,分别在调用一下请求数据</li><li>后端处理数据操作,过滤条件为<code>(page - 1) * pageSize &lt;= index &amp;&amp; index &lt; page * pageSize</code></li><li>后端数据接口依旧是用原来初始数据接口</li></ol></li></ol></blockquote><h2 id="-3"><a href="#-3" class="headerlink" title=""></a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// page=1 控制当前页码</span><br><span class="line">// pageSize=20 控制当前页显示条数</span><br><span class="line">// total=0 控制总条数</span><br><span class="line">// pageSizes=[20, 40, 60, 80, 100] 控制当前每页多少条</span><br><span class="line">// changepageSize自定义事件 是切换pageSize触发</span><br><span class="line">// changePage 自定义事件，切换page触发</span><br></pre></td></tr></table></figure></h2><ol><li>MySearch组件的添加功能，添加需要弹框，有一个嵌套表单的对话框组件【对于这个组件采用v-if做，对话框内部的表单组件elementUI自带的是v-show，使用它自带的显示隐藏有问题,每次验证失败，下次点击依旧是验证失败的显示】<ol><li>创建对话框组件,注册并使用</li><li>elementUI里面找到合适的嵌套表单的对话框组件，代码复制过来，默认不显示弹框，自带的显示隐藏dialogVisible: true, //控制弹框的显示和隐藏的,我们让它显示，使用v-if控制它组件显示隐藏</li><li>对话框组件在父组件下，控制显示隐藏放到父组件下即可,在父组件用一个变量布尔值来控制对话框显示隐藏</li><li>读懂elementui里的参数意思，title改为添加，form对应数据的属性名修改一下，对话框里面有些没有，对话框里面嵌套的是表单这里我们可以去表单里面找可以使用的数据，例如表单验证规则，动态绑定,找对应的表单籍贯=&gt;级联框</li><li>关于自定义验证规则<code>src/views/home/components/MyDialog.vue</code>文件里的注释写的比较详细</li><li>开始书写前端逻辑，点击提交按钮[elementUI是有提供方法，我们只需要数据对上，验证成功把表单的数据发送给后端，后端执行添加逻辑，通知前端添加成功，Home.vue刷新表格发出请求获取最新数据即可]</li><li>补充一个表单籍贯，双向数据绑定options，我们直接引入中国的省市区json文件就行作为一个变量的值，这个文件里面放的就是数组</li><li>表单提交把elementUI自带的参数修改为我们对应的数据，如果验证跳过这个时候就要发请求获取数据</li><li>写添加数据请求接口,引入调用,提前写好请求成功返回的res.msg   【注意表单数据是个对象，axios内部会转json字符串，后端解析得到对象】</li><li>写后端数据接口，先写数据操作，别急着写逻辑，这一步主要是前后端跑通，数据操作直接return一个成功，再配置一下数据接口</li><li>前后端跑通，接着把前端传递数据进行解析得到表单数据对象，解构拿到对应数据</li><li>数据添加选择添加到头部选择unshift()方法，添加完不用返回【它是直接添加到最初的List】，我们最终是重新让父组件在请求数据，对接的是后端init数据接口,我们只需要改变List就行，让父组件重新刷新数据就行。。。【id依旧选择Mock伪造】</li><li>后端逻辑写完，前端在状态码成功，发送自定义事件让父组件刷新数据，再次调用父组件里的init数据方法即可</li><li>把表单默认显示的布尔值改为false</li></ol></li></ol><hr><h3 id="对话框组件三个非常重要的数据保存到父组件里面"><a href="#对话框组件三个非常重要的数据保存到父组件里面" class="headerlink" title="对话框组件三个非常重要的数据保存到父组件里面"></a>对话框组件三个非常重要的数据保存到父组件里面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show: false, // 控制弹框显示，由编辑和添加控制，作用于组件</span><br><span class="line">row: &#123;&#125;, // 保存当前编辑行数据，编辑和添加都会重新赋值</span><br><span class="line">btnType: 0 // 开关阀：传递给对话框组件，让对话框组件知道我是添加还是编辑，写不同的逻辑，发送不同的请求</span><br></pre></td></tr></table></figure><hr><ol><li>MyTable组件编辑功能【使用之前的对话框】<ol><li>点击编辑让对话框显示，发送事件改变父组件show的值取反</li><li>点击编辑elementUI已经提供了方法发现有个scope.row这个就是当前行数据，也就是我们要编辑的数据，通信的同时我们还需要把数据传给父组件，动态绑定书写row传给对话框组件</li><li>props接收父组件数据，成功拿到数据,但是得注意，这条数据是对象，引用传递进行深拷贝，深拷贝完重新赋值给表单原本数据,点击编辑发现成功渲染【mounted阶段进行深拷贝】</li><li>对于添加按钮和编辑按钮做区分，在父组件声明一个变量，使用开关法判断是哪个按钮，方便对话框组件分开写逻辑</li><li>根据类型来写逻辑，如果是添加就写添加逻辑和调用请求接口，修改就写修改逻辑和请求接口</li><li>这一块也比较复杂，结合代码注释，看<code>views/home/components/MyDialog.vue</code>文件</li></ol></li></ol><hr><ol><li><p>登录页静态和登录功能</p><ol><li>登录页是个一级路由组件,容器已经在App.vue里面有了，直接在view目录下创建一个login文件夹再创建<code>Login.vue</code>文件</li><li>引入和注册该路由，查看是否跑通,跑通开始写静态页面</li><li>给个div容器，书写静态页面</li><li>submitForm(formName) { // 注意formName是形参，最终通过中括号拿到组件，实参得是字符串的表单键名【那个表单对象存储用户名和密码】// 验证表单数据，这个是最终验证，之前每个输入框对应自己的验证规则都通过，代表最终验证通过【所有的都通过才表示都通过才能提交】</li><li>这一块也比较复杂，结合代码注释，看<code>views/login/Login.vue</code>文件</li><li>涉及到一个传递参数使用query传参</li></ol></li><li><p>header区域要有退出登录功能</p><ol><li>创建Header组件【属于布局路由组件的子组件】</li><li>静态页面书写</li><li>写退出功能</li><li>通过query取出值，<code>this.$route.query.username</code></li><li>点击退出按钮，移除token，跳转到登录页，不登陆不让访问首页</li></ol></li><li><p>侧边导航栏</p><ol><li>写一个组件，使用elementUI会发现有些时候会有滚动条，直接找父元素设置overflow: hidden;</li><li>多创建几个页面，路由组件</li><li>使用router-link包裹写上path值即可</li></ol></li><li><p>反向代理【涉及到三个文件】</p><ol><li>前端向后端发送请求的时候有个bug叫跨域问题，协议、域名、端口号有一个不同就报跨域错误</li><li>解决跨域问题：<ol><li>后端解决  cors 后台允许跨域，后台来配置，常见</li><li>前端解决 jsonp 反向代理</li><li>服务器来解决 tomcat nginx 软件服务器，可以配置反向代理</li></ol></li><li>在vue.config.js文件里进行配置<ol><li>devServer配置咱们服务的</li><li>域名、端口号都可以配置</li></ol></li><li>请求工具类axios的创建服务里修改baseurl为空字符串【以<code>/api</code>开头】</li><li>api文件请求接口封装时，把axios创建的服务通过import导入，往服务里传入url时，值以<code>/api</code>开头</li></ol></li></ol><mark class="hl-label green">配置完之后，会将所有以`/api`开头的请求全部代理到https://m.maoyan.com这个服务器上</mark> <ol><li>动态渲染菜单<ol><li>涉及到三个文件一个是路由文件做路由配置的<code>src/router/index.js</code>、一个是保存用户信息和权限菜单的文件<code>src/store/index.js</code>和最后一个文件渲染权限菜单文件<code>src/layout/Aside.vue</code></li><li>直接看这三个文件注释很详细【结合代码看】</li></ol></li></ol><h3 id="项目中的一些注意事项"><a href="#项目中的一些注意事项" class="headerlink" title="项目中的一些注意事项"></a>项目中的一些注意事项</h3><ol><li>项目中不能使用push来退出，页面不会刷新，vuex数据还是缓存状态</li><li>动态添加路由【路由会改变】vue2才有的bug,放行里面得加点参数，next({ …to, replace: true })</li><li>计算属性的bug,它是参数发送改变函数才会重新执行，获取某个数据最开始是undefined，参数需要发生改变才会重新执行，这时候可以使用短路运算符&amp;&amp;处理，发现computed有的类似watch监听，watch监听只是自己组件里的data但是computed直接去监听这个vuex管理的数据。</li><li>连接且 前面条件是true才执行后面的代码</li><li>连接或 前面条件是false才执行后面的代码</li><li>三元【常用】</li></ol><hr><p>vue搭建项目总结：网站只有一个index.html同时里面只放了一个div同时添加一个id，值为app，它就是我们的App.vue的挂载点，而App.vue作为根组件，它里面模板只放一个router-view，它是容器，页面上展示的内容不到这里面写，style里面一般只放公共样式，去掉作用域scoped，由于不放页面内容，访问首页、注册页、登录页都得用到一个—&gt;路由，首页布局就是一个大的路由组件，注册登录页也是，路由组件对应一个路径，所以我们需要到路由上进行注册，而路由最终也会挂到vue实例上，路由组件与App.vue如何产生联系，主要就是一起作为配置项，整合到一块了，页面输什么路径展示对应的路由组件，除了对应路径它也对应一个路由容器，主要是放在父组件里，占位置；至于路由组件的内容又得划分【一般不会超过3层】，哪一块内容固定的[例如导航栏、侧边栏一般固定，可以在路由组件里面直接写]，哪一块内容切换的【这些内容一般针对于布局，像主内容区来说】，切换某一块区域内容整个区域就得归为路由组件[二级路由],按照顺序一般是先在父组件里找到位置放容器，然后创建二级路由组件，随便写上一点内容，去router目录下index.js进行注册，注册先引入二级路由组件，注意二级路由的path值不能带/，接着运行一下，直接在地址栏后面输入path值，看下二级路由是否生效，写上的内容是否能展示。路由跳转一般就两种,声明式跳转，编程式跳转。</p><p>一个路由组件对应一个容器[要展示的地方]和一个路径hash值</p><h2 id="【备注：】同时二级重定向写在父亲的路由配置项上，注意写完整路径，-父亲-儿子。"><a href="#【备注：】同时二级重定向写在父亲的路由配置项上，注意写完整路径，-父亲-儿子。" class="headerlink" title="【备注：】同时二级重定向写在父亲的路由配置项上，注意写完整路径，/父亲/儿子。"></a>【备注：】同时二级重定向写在父亲的路由配置项上，注意写完整路径，/父亲/儿子。</h2><h3 id="面试题：开发中有没有封装过公共【可复用】组件？【例如：分页组件】"><a href="#面试题：开发中有没有封装过公共【可复用】组件？【例如：分页组件】" class="headerlink" title="面试题：开发中有没有封装过公共【可复用】组件？【例如：分页组件】"></a>面试题：开发中有没有封装过公共【可复用】组件？【例如：分页组件】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 公共组件：当前这个组件被其他多个组件同时调用。 定义统一的参数，统一的返回值。</span><br><span class="line">// 分页器做成一个公共组件,所以你要定义清楚不同参数代表的意义和用法。</span><br><span class="line">// 定义入参每个变量的作用</span><br><span class="line">// page=1 控制当前页码</span><br><span class="line">// pageSize=20 控制当前页显示条数</span><br><span class="line">// total=0 控制总条数</span><br><span class="line">// pageSizes=[20, 40, 60, 80, 100] 控制当前每页多少条</span><br><span class="line">// changepageSize自定义事件 是切换pageSize触发</span><br><span class="line">// changePage 自定义事件，切换page触发</span><br></pre></td></tr></table></figure><blockquote><p>dialog对话框,所包含的组件<br>对话框el-dialog-&gt;表单el-form-&gt;表单每一项，el-form-item对应包裹一个什么框或者一个、几个按钮-&gt;基本的输入框el-input-&gt;下拉框el-select-&gt;Cascader级联选择器例如籍贯就要使用它-&gt;按钮重置、提交</p></blockquote><hr><blockquote><p>vue模板里面像动态绑定、双大括号语法等里面的变量和方法都必须是挂到vue上的才能使用，变量挂data,方法简写挂到methods;<br>但是在methods里面封装方法使用变量和方法时，或者是钩子函数里面也是可以直接使用不需要挂到vue上的。<br>【经常会有外部引入的什么方法，模板里面使用就要挂到vue上；不在模板里就【script标签内部】可以直接使用，不需要挂到vue上】</p><p>vue.config.js如果项目里面没有，就在根目录下自己创建一个【配置文件的修改都是需要重启服务】</p><pre><code>+ 开发时我们一般都是关闭语法检查+ 目录映射</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 引入内置path模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> path.join(__dirname, dir) <span class="comment">// path内置模块，可以把后面的参数拼接形成一个新地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">lintOnSave</span>: <span class="literal">false</span>, <span class="comment">// 关闭=&gt;保存时语法检查</span></span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        config.resolve.alias</span><br><span class="line">            .set(<span class="string">&#x27;@&#x27;</span>, resolve(<span class="string">&#x27;src&#x27;</span>)) <span class="comment">// key,value自行定义，@取代src</span></span><br><span class="line">            .set(<span class="string">&#x27;@c&#x27;</span>, resolve(<span class="string">&#x27;src/components&#x27;</span>)) <span class="comment">// @c取代src/components</span></span><br><span class="line">            .set(<span class="string">&#x27;@a&#x27;</span>, resolve(<span class="string">&#x27;src/api&#x27;</span>)) <span class="comment">// @a取代src/api</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Mock的数据不像保存到数据库中那样，一刷新或者下次运行项目进来数据就被还原了。<br>vuex是把数据保存到内存当中[一般会把用户信息和权限菜单保存到vuex里面]</p></blockquote><h2 id="elementUI表单这块经常遇到自动填充，与浏览器有关，解决方法"><a href="#elementUI表单这块经常遇到自动填充，与浏览器有关，解决方法" class="headerlink" title="elementUI表单这块经常遇到自动填充，与浏览器有关，解决方法:"></a>elementUI表单这块经常遇到自动填充，与浏览器有关，解决方法:</h2><ol><li>首先找到password输入框</li><li>auto-complete=”new-password”</li><li>autocomplete=”off”</li><li>autocomplete=”new-password”</li><li>都试试，总有一个是可以的<h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><blockquote><p>在做登录相关的页面时，只要<code>input</code>框设置为：<code>type=&quot;password&quot;</code>，浏览器就会对<code>input</code>框进行自动填充行为，设置为<code>type=&quot;password&quot;</code>的框会自动填充密码，另一个随机<code>input</code>输入框会自动填充账号。</p></blockquote></li></ol><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><blockquote><p>设置<code>input</code>的<code>type</code>属性为<code>password</code>后，当页面进行过提交，并且允许浏览器记住密码后，那么再次加载该页面时，此<code>password</code>及附近的<code>input</code>就会被自动填充。</p></blockquote><h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h3><blockquote><p>如果是个人电脑，用户体验是挺好，但若不是，会存在很大的安全问题，很容易被他人盗取用户名及密码。<br>严重问题：新建表单时，自动填充会导致自动填充的用户名与密码可以提交到后台（本来需要自己主动去填写），从而导致得到不是自己需要的结果，且用户名与密码被暴露出来。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6模块化理解</title>
      <link href="/archives/1d15faa4.html"/>
      <url>/archives/1d15faa4.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><blockquote><p>vue中的模块化、组件化，把部分html，独立成一个.vue文件，这个文件我们一般叫它为组件。<br>组件化≠模块化。模块化是从文件层面上，对代码或资源进行拆分；而组件化是从设计层面上，对用户界面进行拆分。前端组件化更偏向UI层面，更多把逻辑放到页面中，使得UI元素复用性更高。<br><a href="https://view.inews.qq.com/a/20220608A09SXE00">具体说明</a></p></blockquote><h3 id="es6模块化规范语法"><a href="#es6模块化规范语法" class="headerlink" title="es6模块化规范语法:"></a>es6模块化规范语法:</h3><ol><li>声明时导出，在声明变量、函数或类时前面加上export，但是这样导入时就得加上大括号</li><li>独立使用export声明，一个export关键字加上变量名列表，但是这样导入时就得加上大括号<ol><li>export { a, b, c } 对应 import { a, b, c } from ‘xx.js’</li></ol></li><li>export和default联合使用，export default表示导出一个默认变量值，后面可接表达式</li></ol><blockquote><p>原始值都是不能成为指定对外接口=&gt;export和export default都可以直接导出函数、对象</p><p>export default后面不能接var？</p><ul><li>default的本质是变量也是指定对外接口，而export default命令的本质是将后面的值，赋给default变量，所以可以直接将一个值写在export default之后。</li><li>直观解释default = var a = 1 或者说 b = var a = 1【很显然会报错】</li></ul><p>大致说说export和export default的区别</p><ol><li>export与export default均可用于导出常量、函数、文件、模块等</li><li>在一个文件或模块中，export、import可以有多个，export default仅有一个</li><li>通过export方式导出，在导入时要加{ }，export default则不需要</li><li>export导出的变量，import时导入该变量时会随着导出那个变量值的变化而变化；但是default不会，default拿的是值导出，export直接导出的是变量a</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git踩坑笔记</title>
      <link href="/archives/f58d700f.html"/>
      <url>/archives/f58d700f.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <h2 id="一-git-pull-冲突问题"><a href="#一-git-pull-冲突问题" class="headerlink" title="(一) git pull 冲突问题"></a>(一) git pull 冲突问题</h2><blockquote><p>了解<code>git pull</code></p></blockquote><p><code>git pull</code>命令用来从远程仓库下载更新内容，并立即将对应内容更新到本地仓库。在<code>Git</code>的协作工作流中，合并远程仓库变更到本地仓库是很常见的工作。而<code>git pull</code>命令实际上就是其他两个命令的结合体，先<code>git fetch</code>然后紧接着<code>git merge</code>。在<code>git pull</code>命令执行的第一个阶段，会先对当前本地<code>HEAD</code>指针指向的分支执行<code>git fetch</code>。当原称更新内容下载完成之后，<code>git pull</code>会接着进入合并流程。合并操作会创建一个新的<code>commit</code>，并且<code>HEAD</code>指针也会随之更新而指向这个新的<code>commit</code>。</p><hr><h5 id="我遇到的问题：由于远程仓库较新，而我本地仓库较旧，于是推送不上去，git-希望我git-pull，一执行出现了远程覆盖本地的情况，但是我本地代码是我写好要推送远程仓库的代码。"><a href="#我遇到的问题：由于远程仓库较新，而我本地仓库较旧，于是推送不上去，git-希望我git-pull，一执行出现了远程覆盖本地的情况，但是我本地代码是我写好要推送远程仓库的代码。" class="headerlink" title="我遇到的问题：由于远程仓库较新，而我本地仓库较旧，于是推送不上去，git 希望我git pull，一执行出现了远程覆盖本地的情况，但是我本地代码是我写好要推送远程仓库的代码。"></a>我遇到的问题：由于远程仓库较新，而我本地仓库较旧，于是推送不上去，git 希望我<code>git pull</code>，一执行出现了远程覆盖本地的情况，但是我本地代码是我写好要推送远程仓库的代码。</h5><ul><li>回到之前版本又不让我推送，而现在这个版本又不是我想要的，于是想了一个笨办法，回退到之前版本，把我写好的代码备份一下，再拉取远程这样本地仓库就能和远程仓库版本同步，再把备份好的某个文件和你拉取不符合的文件直接替换掉，再提交推送，成功！！</li><li>具体操作：回滚，<code>git log</code>，查看一下版本号，取之前版本对于版本号的号前六位，<code>git reset --hard 版本号前六位</code>，把整个项目文件或者写好的代码文件进行备份，再拉取远程仓库代码<code>git pull</code>，文件替换，添加提交推送三部曲，然后就成功了！！</li><li>其实网上也又很好的解决方案，例如分支啊，以及<code>git rebase</code>，由于<code>git pull</code>经常回帮你执行合并<code>git merge</code>，其实可以设置一下<code>git config --global branch.autosetuprebase always</code></li></ul><h5 id="pull-与-rebase"><a href="#pull-与-rebase" class="headerlink" title="pull 与 rebase"></a>pull 与 rebase</h5><blockquote><p>扩展：<code>--rebase</code>选项的加入不会产生额外的合并提交，因此会保证整个提交历史是线性的。很多开发者相对于<code>merge</code>更加喜欢使用<code>rebase</code>，因为后者更像是 “我要把我的变更放在其他人已经提交的变更之上”。这一流程在很多协作场景下显得更加自然。<br>事实上，由于<code>pull --rebase</code>的工作流程如此常见，以至于在<code>git</code>中有一个专用的配置项为之而生。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global branch.autosetuprebase always</span><br></pre></td></tr></table></figure><blockquote><p>执行以上命令之后，所有的<code>git pull</code>命令都将以<code>git rebase</code>的方式整合远程变更，而不是以<code>git merge</code>的方式。</p><p><code>git pull + rebase</code>，以下示例展示如何使用<code>rebase</code>方式同步并更新远程仓库的<code>main</code>分支：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git pull --rebase origin</span><br></pre></td></tr></table></figure><blockquote><p>执行以上命令会将你在本地对 main 分支的提交放到所有其他人的提交之上。</p></blockquote><h2 id="二-git-push-报错"><a href="#二-git-push-报错" class="headerlink" title="(二) git push 报错"></a>(二) git push 报错</h2><blockquote><p>报错： unable to access ‘<a href="https://github.com/xxx/xxx.git/">https://github.com/xxx/xxx.git/</a>‘: OpenSSL SSL_read: Connection was reset, errno 10054</p></blockquote><p><code>DNS</code>污染，做一下<code>ssh</code>连接<code>github</code>，<a href="https://blog.coding327.top/archives/1a6eadde.html">文章链接</a></p><h2 id="git-回滚到指定版本后，版本落后于远程仓库，如何提交到远程分支"><a href="#git-回滚到指定版本后，版本落后于远程仓库，如何提交到远程分支" class="headerlink" title="git 回滚到指定版本后，版本落后于远程仓库，如何提交到远程分支?"></a>git 回滚到指定版本后，版本落后于远程仓库，如何提交到远程分支?</h2><blockquote><p>git reflog 可以查看所有分支的所有操作记录包括已经被删除的 commit 记录和 reset 的操作<br>git log 可以显示所有提交过的版本信息<br>二者的区别：用 git log 则看不出来被删除的 commitid,用 git reflog 则可以看到被删除的 commitid<br>git reset —hard HEAD 切换到版本号为 HEAD 的那个版本 （个人喜欢使用 git log 可以看到 commit 的时间）<br>如果冲突的话，对于个人仓库我一般都会强制推送，可以使用 git push -f origin test 强制推送到远程分支，-f 强制，origin 远程仓库名，test 远程分支名</p></blockquote><mark class="hl-label green">远程仓库上面显示提交时间是和你从暂存区提交本地仓库提交时间保持一致，而不是说你从本地仓库提交到远程仓库的时间就是远程仓库上面显示提交时间</mark> <h2 id="三-git-如何修改已提交信息"><a href="#三-git-如何修改已提交信息" class="headerlink" title="(三) git 如何修改已提交信息"></a>(三) git 如何修改已提交信息</h2><ol><li>当我们已通过<code>git commit -m &#39;已提交最新的备注&#39;</code>命令将代码提交到了本地仓库，或者进一步执行了<code>git push origin master</code>命令已将代码推送至远程仓库，发现已备注的信息并不能准确的表达我们的意思，想修改，那么我们可以执行以下命令：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><ol><li>执行完第一步的命令后界面最上方会显示出上次已提交的最新的备注信息，这个是<code>vim</code>环境。可以通过<code>i</code>键进入到编辑模式，然后将最上方的备注信息更新为我们现在要的备注信息，然后和<code>vim</code>的操作一样，按键盘上的<code>ESC</code>键退出编辑模式，输入<code>:wq!</code>回车即保存并退出【<code>w</code>是 <code>write</code>的缩写，意为保存；<code>q</code>是<code>quit</code>的缩写，意为退出；这两个命令也可以分开执行；感叹号可以省略】</li><li>执行推送命令，将本地代码推送到<code>github</code>远程仓库：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><h2 id="四-解决已提交文件在-gitignore-中加入忽略后无效问题"><a href="#四-解决已提交文件在-gitignore-中加入忽略后无效问题" class="headerlink" title="(四)解决已提交文件在.gitignore 中加入忽略后无效问题"></a>(四)解决已提交文件在.gitignore 中加入忽略后无效问题</h2><blockquote><p>为什么会无效？<br>主要还是因为你这个已提交文件已经存在于本地暂存区、版本区中了，<code>git</code>会对你这个文件继续进行追踪</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached 文件/文件夹</span><br></pre></td></tr></table></figure><p>指令解读</p><ul><li><code>rm</code>是将文件从工作区和暂存区删除</li><li><code>-r</code>是递归删除，进入某个目录中，执行此语句，会删除该目录下你所指定的<strong>文件/文件夹</strong></li><li><code>--cached</code>是你所指定<strong>文件/文件夹</strong>从暂存区中移除，但工作区保留</li></ul><p>执行完这条命令，本地暂存区就没有这个文件了，然后提交到版本区，再推送到远程仓库，远程仓库就不会有这个文件了</p><h2 id="git-命令非得在初始化目录使用？"><a href="#git-命令非得在初始化目录使用？" class="headerlink" title="git 命令非得在初始化目录使用？"></a>git 命令非得在初始化目录使用？</h2><p>例如<strong>A 文件夹</strong>下有个<strong>B 文件夹</strong>和<strong>C 文件</strong>，而<strong>B 文件夹</strong>下有个<strong>D 文件</strong>，<strong>A 文件夹</strong>是我们仓库根目录即<code>git init</code>初始化的地方，这时我在<strong>D 文件</strong>中添加了一句<code>Hello World</code>，而<strong>C 文件</strong>正在更改中，我们并不想现在提交<strong>C 文件</strong>，但是<strong>D 文件</strong>现在必须提交，这时我们可以在<strong>B 文件夹</strong>下开启终端，进行<code>git三连</code>，它只会把<strong>B 文件夹</strong>下的改动的文件提交推送上去，并不影响我们的<strong>C 文件</strong></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git提交规范</title>
      <link href="/archives/596552e8.html"/>
      <url>/archives/596552e8.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <h2 id="约定式提交-Conventional-Commits"><a href="#约定式提交-Conventional-Commits" class="headerlink" title="约定式提交 Conventional Commits"></a>约定式提交 <code>Conventional Commits</code></h2><blockquote><p>一种提交信息增加人机可读含义的规范</p></blockquote><p><code>git commit -m &#39;xx&#39;</code></p><ol><li>fix：修复了某个bug</li><li>feat：新增了某个给你</li><li>build：一些影响构建系统的更新</li><li>chore：一些不更改核心代码的更新</li><li>ci：变更了一些CI系统的配置</li><li>docs：对文档做出了一些修改</li><li>test：新增或修改测试文件</li><li>refactor：重构了代码(但没有新增或修复任何东西)</li><li>—等等</li></ol><blockquote><p>完整约定式提交官网：<a href="https://www.conventionalcommits.org/zh-hans/">https://www.conventionalcommits.org/zh-hans/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
          <category> git提交规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js学习笔记(一)</title>
      <link href="/archives/5752f186.html"/>
      <url>/archives/5752f186.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <h2 id="题一-函数执行"><a href="#题一-函数执行" class="headerlink" title="题一 函数执行"></a>题一 函数执行</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分别写出对fun两次调用alert的输出结果、井说明原理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> l = <span class="built_in">arguments</span>.length;</span><br><span class="line">      <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">num += <span class="built_in">arguments</span>[i];</span><br><span class="line">      &#125;</span><br><span class="line">      alert(num)</span><br><span class="line">  &#125;</span><br><span class="line">fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);    <span class="comment">// 6</span></span><br><span class="line">fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>);   <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从上往下执行</span></span><br><span class="line"><span class="comment">// arguments是什么?   传入的实参被接收存入到arguments类数组</span></span><br></pre></td></tr></table></figure><h3 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写出函数fun执行后console.log(a)的输出结果，并说明原理</span></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">* Go&#123;</span></span><br><span class="line"><span class="comment">*    a=0</span></span><br><span class="line"><span class="comment"> *   fun=function</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * AO&#123;</span></span><br><span class="line"><span class="comment">        *   a=undefined</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * &#125;</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  变量声明 局部变量就是在函数内部定义的变量 全局变量就是函数外定义的变量</span></span><br></pre></td></tr></table></figure><h3 id="函数执行-1"><a href="#函数执行-1" class="headerlink" title="函数执行"></a>函数执行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分别写出下面的执行 a 结果  及原理</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><h3 id="函数执行-2"><a href="#函数执行-2" class="headerlink" title="函数执行"></a>函数执行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印执行结果  讲解其原理</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj =&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>:<span class="string">&quot;tom&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a2 = a,</span><br><span class="line">    obj2 = obj,</span><br><span class="line">    a2 =a,</span><br><span class="line">    obj2.name =<span class="string">&quot;jack&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><h2 id="题二-引用"><a href="#题二-引用" class="headerlink" title="题二  引用"></a>题二  引用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分别写出下面的执行 a 结果  及原理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//基础类型    栈区</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b++;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用类型在 堆区</span></span><br><span class="line"><span class="keyword">var</span> o =&#123;&#125;;</span><br><span class="line">o.a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> c = o;</span><br><span class="line">c.a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.a)</span><br></pre></td></tr></table></figure><h2 id="题三-运算符"><a href="#题三-运算符" class="headerlink" title="题三 运算符"></a>题三 运算符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请分别计算 a 的值____   及类型</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="string">&#x27;abc&#x27;</span>+<span class="number">123</span>+<span class="number">456</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=<span class="string">&#x27;456&#x27;</span>-<span class="string">&#x27;123&#x27;</span>   <span class="comment">//  333   number</span></span><br><span class="line"><span class="comment">// * - % 都会隐式使用什么Number() 将字符串转换成数字类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请计算c的值____</span></span><br><span class="line"><span class="comment">// 比较运算符  &lt; &gt; &gt;=  &lt;=  ==  !=  全部会类型转换</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> c=a&gt;b?(a&lt;b?a:b):(a==b?a:b);  <span class="comment">// &quot;2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">js中的==和===作用</span><br><span class="line"><span class="number">1</span>==<span class="string">&quot;1&quot;</span>   <span class="literal">true</span></span><br><span class="line"><span class="number">1</span>===<span class="string">&quot;1&quot;</span>  <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">===  不会改变类别 进行比较</span><br><span class="line">==    会改变类型进行比较</span><br></pre></td></tr></table></figure><h3 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> 嘛？为什么？</span><br><span class="line"></span><br><span class="line">不相等</span><br><span class="line">小数在转换成进制时  会出现缺失精度</span><br><span class="line">解决方法<span class="number">1</span>：转换为整数相加再除以之前的倍数</span><br><span class="line">解决方法<span class="number">2</span>：利用num.toFixed(arg),参数=&gt;保留几位小数，但是结果会转换为字符串类型</span><br><span class="line">思考：num是数字类型，但是却能够像对象一样使用方法？</span><br><span class="line">js内部做了一个处理，将num转换为数字对象</span><br><span class="line">【处理：<span class="keyword">new</span> <span class="built_in">Number</span>(num)】</span><br><span class="line"></span><br><span class="line">js最大数值</span><br><span class="line"><span class="number">2</span>的<span class="number">53</span>次幂</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="题四-循环-遍历"><a href="#题四-循环-遍历" class="headerlink" title="题四 循环/遍历"></a>题四 循环/遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印 i  讲解其原理</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);  <span class="comment">// 0</span></span><br><span class="line">    <span class="keyword">break</span>;    <span class="comment">//  结束当前循环</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);  <span class="comment">//  0</span></span><br></pre></td></tr></table></figure><h3 id="循环-遍历"><a href="#循环-遍历" class="headerlink" title="循环/遍历"></a>循环/遍历</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印 i  讲解其原理</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);   <span class="comment">//0-9</span></span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h3 id="乘法表"><a href="#乘法表" class="headerlink" title="乘法表"></a>乘法表</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>; j&lt;= <span class="number">9</span>;j++)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(i+<span class="string">&quot;*&quot;</span> + j  + <span class="string">&quot;=&quot;</span>+ i * j );</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="题五-this指向"><a href="#题五-this指向" class="headerlink" title="题五 this指向"></a>题五 this指向</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印 json.val  讲解其原理</span></span><br><span class="line"><span class="built_in">window</span>.val=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> json=&#123;</span><br><span class="line">    <span class="attr">val</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="attr">dbl</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.val*=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">json.dbl();  <span class="comment">// 对象里面的</span></span><br><span class="line"><span class="keyword">var</span> dbl = json.dbl;</span><br><span class="line">dbl();   <span class="comment">// 全距</span></span><br><span class="line"><span class="built_in">console</span>.log(json.val)</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数创建的时候  this就会指向一个对象</span></span><br><span class="line"><span class="comment">//函数this默认指向window,除非调用时修改, 调用函数时this会改变指向</span></span><br><span class="line"><span class="comment">//谁调用函数this指向就是谁</span></span><br></pre></td></tr></table></figure><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  打印 console.log(json.val+val) 讲解其原理</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> json =&#123;</span><br><span class="line">          <span class="attr">val</span>:<span class="number">10</span>,  <span class="comment">// 属性名</span></span><br><span class="line">          <span class="attr">dbl</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            val*=<span class="number">2</span>;  <span class="comment">// 变量</span></span><br><span class="line">          &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    json.dbl();</span><br><span class="line">    <span class="built_in">console</span>.log(json.val+val);   <span class="comment">// 12</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="题六-数组"><a href="#题六-数组" class="headerlink" title="题六  数组"></a>题六  数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印执行结果  讲解其原理</span></span><br><span class="line"><span class="keyword">var</span> ary =[<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span>];</span><br><span class="line">ary.push(<span class="string">&quot;666&quot;</span>)</span><br><span class="line">ary.pop()</span><br><span class="line">ary.pop()</span><br><span class="line"><span class="built_in">console</span>.log(ary.join(<span class="string">&quot;&quot;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(ary)</span><br></pre></td></tr></table></figure><h3 id="数组和类数组的区别"><a href="#数组和类数组的区别" class="headerlink" title="数组和类数组的区别"></a>数组和类数组的区别</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">什么是类数组</span><br><span class="line">一定会有具有length长度</span><br><span class="line">没有数组的方法</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组的pop()、push()、shift()、unshift()分别是什么？</span><br></pre></td></tr></table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">123</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.length; j++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(arr[i]==arr[j])&#123;         <span class="comment">//第一个等同于第二个，splice方法删除第二个</span></span><br><span class="line">                   arr.splice(j,<span class="number">1</span>);</span><br><span class="line">                   j--;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   <span class="keyword">return</span> arr;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array.indexOf(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            array.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result =ar.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.indexOf(item) == index</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> res= arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,index,arr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//console.log(arguments);</span></span><br><span class="line">    <span class="keyword">if</span>(!prev.includes(cur))&#123;</span><br><span class="line">        prev.push(cur)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;,[])</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure><h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr= [<span class="number">20</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">56</span>,<span class="number">3</span>,<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArr</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;arr.length;j++)&#123;</span><br><span class="line">      <span class="comment">//判断数组的第一项 和 数组的第二项比较</span></span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">        arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">        arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">sortArr(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数组相加"><a href="#数组相加" class="headerlink" title="数组相加"></a>数组相加</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="string">&quot;11&quot;</span>,<span class="string">&quot;asd&quot;</span>];  <span class="comment">// 数组相加</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value.length)<span class="keyword">return</span>;  <span class="comment">//数组长度为零,就是数组没有子项,没有子项之间返回</span></span><br><span class="line">  <span class="keyword">let</span> len = value.length;   <span class="comment">// 数组长度</span></span><br><span class="line">  <span class="keyword">let</span> addNum = <span class="number">0</span>;      <span class="comment">// 累计值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;  <span class="comment">// 循环</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value[i] === <span class="string">&quot;number&quot;</span>)&#123;  <span class="comment">//循环判断 数组每一项为数字类型,不是数字类型 不要相加</span></span><br><span class="line">      addNum += value[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> addNum;</span><br><span class="line">&#125;</span><br><span class="line">num(arr)</span><br></pre></td></tr></table></figure><h3 id="数组降维"><a href="#数组降维" class="headerlink" title="数组降维"></a>数组降维</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line">arr2.flat(<span class="literal">Infinity</span>);</span><br><span class="line"><span class="comment">//  [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多维数组降维</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>, [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]];</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(input))<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (input.length) &#123;</span><br><span class="line">      <span class="comment">// 使用 pop 从 stack 中取出并移除值</span></span><br><span class="line">      <span class="keyword">const</span> next = input.shift();</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(next)) &#123;</span><br><span class="line">        <span class="comment">// 使用 push 送回内层数组中的元素，不会改动原始输入 original input</span></span><br><span class="line">        flatten(next)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.push(next);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="多项数组数据"><a href="#多项数组数据" class="headerlink" title="多项数组数据"></a>多项数组数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;2&quot;</span>, <span class="number">2</span>, <span class="string">&quot;2&quot;</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">3</span>, <span class="number">4</span>], &#123; <span class="attr">a</span>: <span class="number">6</span>, <span class="attr">b</span>: <span class="number">6</span> &#125;, &#123; <span class="attr">a</span>: <span class="number">6</span>, <span class="attr">b</span>: <span class="number">7</span> &#125;, &#123; <span class="attr">a</span>: <span class="number">6</span>, <span class="attr">b</span>: <span class="number">6</span> &#125;, <span class="literal">NaN</span>, <span class="literal">null</span>, <span class="literal">NaN</span>, [<span class="number">7</span>, [<span class="number">7</span>, <span class="number">8</span>]], [<span class="number">7</span>, [<span class="number">7</span>, <span class="number">8</span>]], &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;]</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">uniqueObj</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> newArr = []</span><br><span class="line">        <span class="keyword">var</span> tempArr = []</span><br><span class="line">        arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, idex, arr</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (newArr.indexOf(item) === -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tempArr.indexOf(<span class="built_in">JSON</span>.stringify(item)) === -<span class="number">1</span>) &#123;</span><br><span class="line">                    tempArr.push(<span class="built_in">JSON</span>.stringify(item))</span><br><span class="line">                    newArr.push(item)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> newArr</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">console</span>.log(uniqueObj(arr))</span><br></pre></td></tr></table></figure><h2 id="题七-字符串"><a href="#题七-字符串" class="headerlink" title="题七 字符串"></a>题七 字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印执行结果  讲解其原理</span></span><br><span class="line"><span class="keyword">var</span> str =<span class="string">&quot;123456789&quot;</span></span><br><span class="line">str.split(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcd&quot;</span>   <span class="comment">// 字符串空格去除</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseStr</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!value)<span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> str = value.split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!value)<span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> newstr = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=value.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">    newstr +=value[i] </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> newstr</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="首字母大小写"><a href="#首字母大小写" class="headerlink" title="首字母大小写"></a>首字母大小写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcd&quot;</span>   <span class="comment">// 首字母大写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstLetterToUpperCase</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(!value)<span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> val=value[<span class="number">0</span>].toUpperCase();</span><br><span class="line">  <span class="keyword">let</span> rep = value.replace(value[<span class="number">0</span>],val)</span><br><span class="line">   <span class="keyword">return</span> rep</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="每个字母大写"><a href="#每个字母大写" class="headerlink" title="每个字母大写"></a>每个字母大写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> vs = <span class="string">&quot;You can be a real big baby&quot;</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">firstLetterToUpperCase</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(!value)<span class="keyword">return</span>;</span><br><span class="line">   <span class="keyword">let</span> arr = value.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">   arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">let</span> val = item[<span class="number">0</span>].toUpperCase();</span><br><span class="line">     <span class="keyword">let</span> rep = item.replace(item[<span class="number">0</span>],val);</span><br><span class="line">     arr[index] = rep</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">return</span> arr.join(<span class="string">&quot; &quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断单个</span></span><br><span class="line"> <span class="keyword">let</span> vs = <span class="string">&quot;You can be a real big baby&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">firstLetterToUpperCase</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!value)<span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">let</span> arr = value.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">      arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(item.length == <span class="number">1</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">let</span> val = item[<span class="number">0</span>].toUpperCase();</span><br><span class="line">        <span class="keyword">let</span> rep = item.replace(item[<span class="number">0</span>],val);</span><br><span class="line">        arr[index] = rep</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> arr.join(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="查看字符串重复项"><a href="#查看字符串重复项" class="headerlink" title="查看字符串重复项"></a>查看字符串重复项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;caibaojian.com&#x27;</span>,obj=[];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; str.length; i++)&#123;</span><br><span class="line">  <span class="keyword">var</span> key = str[i];</span><br><span class="line">  <span class="keyword">if</span>(!obj[key])&#123;</span><br><span class="line">    obj[key] = <span class="number">1</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    obj[key]++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题八-递归算法"><a href="#题八-递归算法" class="headerlink" title="题八 递归算法"></a>题八 递归算法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cc</span>(<span class="params">max</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(max&gt;<span class="number">1</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> max+cc(max-<span class="number">1</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">cc(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="题九-闭包"><a href="#题九-闭包" class="headerlink" title="题九 闭包"></a>题九 闭包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">闭包，作用是什么?</span><br><span class="line">是一个函数可以把自己内部的语句和自身所声明时所在的作用域形成一个密封的环境,</span><br><span class="line">      在函数外部可以读取到函数内部的变量和函数,函数内部的变量会被保存下来,不会被回收,闭包不会被销毁,</span><br><span class="line"></span><br><span class="line">怎么写闭包?</span><br><span class="line"> 在一个函数中创建一个函数,函数内部使用外部变量;形成闭包;</span><br><span class="line">函数内部被返回,或者被持续引用,那么使用的变量不会被回收,</span><br><span class="line"></span><br><span class="line">这就是闭包</span><br><span class="line"> 函数内部变量 不会被垃圾回收机制 回收</span><br><span class="line"></span><br><span class="line">闭包是指有权访问另外一个函数作用域中的变量的函数</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// // 打印执行结果  讲解其原理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(n + i++)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn(<span class="number">10</span>)</span><br><span class="line">f(<span class="number">20</span>)</span><br><span class="line">fn(<span class="number">20</span>)(<span class="number">40</span>)</span><br><span class="line">fn(<span class="number">30</span>)(<span class="number">50</span>)</span><br><span class="line">f(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ++在后 在先计算在赋值      不参与运算</span></span><br><span class="line"><span class="comment">// ++在前  先加赋值在计算     参与运算</span></span><br></pre></td></tr></table></figure><h2 id="题十-Number"><a href="#题十-Number" class="headerlink" title="题十  Number"></a>题十  Number</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印执行结果  讲解其原理</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="string">&quot;abc123&quot;</span>;</span><br><span class="line">num=<span class="built_in">parseInt</span>(num);</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">123</span>)&#123;</span><br><span class="line">   alert(<span class="number">123</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(num===<span class="literal">NaN</span>)&#123;</span><br><span class="line">   alert(<span class="literal">NaN</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> num==<span class="string">&quot;number&quot;</span>)&#123;</span><br><span class="line">   alert(<span class="string">&quot;number&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   alert(<span class="string">&quot;str&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题十一-节点"><a href="#题十一-节点" class="headerlink" title="题十一 节点"></a>题十一 节点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">怎么添加、移除、复制、创建、和查找节点</span><br><span class="line"></span><br><span class="line">document.createElement()</span><br><span class="line">document.removeChild()        remove()</span><br><span class="line">appendChild()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="滚动过度效果"><a href="#滚动过度效果" class="headerlink" title="滚动过度效果"></a>滚动过度效果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> h =  <span class="built_in">this</span>.scrollTop;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> time = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      h = h-<span class="number">100</span></span><br><span class="line">      <span class="keyword">if</span> (h &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(time)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.scrollTo(<span class="number">0</span>,h)</span><br><span class="line">    &#125;,<span class="number">1000</span>/<span class="number">60</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="题十二-构造函数"><a href="#题十二-构造函数" class="headerlink" title="题十二 构造函数"></a>题十二 构造函数</h2><h3 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> 类型</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> toStr = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line">   <span class="keyword">if</span> (data === <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">&#x27;null&#x27;</span></span><br><span class="line">   <span class="keyword">var</span> obj = &#123;</span><br><span class="line">     <span class="string">&#x27;[object Object]&#x27;</span>: <span class="string">&#x27;Object&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;[object Array]&#x27;</span>: <span class="string">&#x27;Array&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;[object RegExp]&#x27;</span>: <span class="string">&#x27;RegExp&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;[object Number]&#x27;</span>: <span class="string">&#x27;Number&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;[object String]&#x27;</span>: <span class="string">&#x27;String&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;[object Boolean]&#x27;</span>: <span class="string">&#x27;Boolean&#x27;</span>,</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> obj[toStr.call(data)]</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">typeof</span> data;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data  <span class="keyword">instanceof</span>  type</span><br></pre></td></tr></table></figure><h2 id="题十三-循环渲染生成节点"><a href="#题十三-循环渲染生成节点" class="headerlink" title="题十三 循环渲染生成节点"></a>题十三 循环渲染生成节点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> objArr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">nodeType</span>:<span class="string">&quot;li&quot;</span>,</span><br><span class="line">    <span class="attr">className</span>:<span class="string">&quot;bg&quot;</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">nodeType</span>:<span class="string">&quot;span&quot;</span>,</span><br><span class="line">        <span class="attr">className</span>:<span class="string">&quot;circre&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">nodeType</span>:<span class="string">&quot;img&quot;</span>,</span><br><span class="line">        <span class="attr">className</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">nodeType</span>:<span class="string">&quot;div&quot;</span>,</span><br><span class="line">        <span class="attr">className</span>:<span class="string">&quot;wrap-show&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">nodeType</span>:<span class="string">&quot;p&quot;</span>,</span><br><span class="line">            <span class="attr">className</span>:<span class="string">&quot;first&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">nodeType</span>:<span class="string">&quot;p&quot;</span>,</span><br><span class="line">            <span class="attr">className</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">nodeType</span>:<span class="string">&quot;div&quot;</span>,</span><br><span class="line">            <span class="attr">className</span>:<span class="string">&quot;computed&quot;</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">nodeType</span>:<span class="string">&quot;span&quot;</span>,</span><br><span class="line">                <span class="attr">className</span>:<span class="string">&quot;first&quot;</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">nodeType</span>:<span class="string">&quot;p&quot;</span>,</span><br><span class="line">                <span class="attr">className</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">children</span>:[</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="attr">nodeType</span>:<span class="string">&quot;span&quot;</span>,</span><br><span class="line">                    <span class="attr">className</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="attr">nodeType</span>:<span class="string">&quot;span&quot;</span>,</span><br><span class="line">                    <span class="attr">className</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="attr">nodeType</span>:<span class="string">&quot;span&quot;</span>,</span><br><span class="line">                    <span class="attr">className</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="attr">nodeType</span>:<span class="string">&quot;span&quot;</span>,</span><br><span class="line">                    <span class="attr">className</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                ]</span><br><span class="line">              &#125;,</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNode</span>(<span class="params">objArr,create = <span class="built_in">document</span>.createDocumentFragment()</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  objArr.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">document</span>.createElement(item.nodeType)</span><br><span class="line">    <span class="keyword">if</span>(item.children)&#123;</span><br><span class="line">       createNode(item.children,result)</span><br><span class="line">    &#125;</span><br><span class="line">    result.className = item.className</span><br><span class="line">    create.appendChild(result)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> create</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深拷贝-浅拷贝"><a href="#深拷贝-浅拷贝" class="headerlink" title="深拷贝 浅拷贝"></a>深拷贝 浅拷贝</h3><blockquote><p><strong>浅拷贝</strong>：将数据中所有的数据引用下来，并指向同一个存放地址，拷贝的数据修改之后，会对原数据产生副作用。</p><p><strong>深拷贝</strong>：将数据中所有的数据拷贝下来，对拷贝之后的数据进行修改不会对原始数据产生副作用。</p></blockquote><p>你以为 <code>Object.assign</code> 是深拷贝方法，其实不然。它也是浅拷贝，只不过是第一级的原始类型的数据，不受牵连，引用类型还是会被篡改，我们用数据说话：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;Nick&#x27;</span>,</span><br><span class="line">   <span class="attr">hobby</span>: [<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;movie&#x27;</span>, <span class="string">&#x27;travel&#x27;</span>, &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;]</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// var newObj = Object.assign(&#123;&#125;, obj)   浅拷贝一层</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> newObj1 =  <span class="built_in">JSON</span>.stringify(obj)  <span class="comment">// 深拷贝</span></span><br><span class="line">  <span class="keyword">var</span> newObj = <span class="built_in">JSON</span>.parse(newObj1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> newObj.name = <span class="string">&#x27;Chen&#x27;</span>;</span><br><span class="line"> newObj.hobby[<span class="number">0</span>] = <span class="string">&#x27;codeing&#x27;</span>;</span><br><span class="line"> newObj.hobby[<span class="number">3</span>].a = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;obj&#x27;</span>, obj)</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;newObj&#x27;</span>, newObj)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">     <span class="attr">name</span>:<span class="string">&quot;许鑫&quot;</span>,</span><br><span class="line">     <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">     <span class="attr">arr</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">50</span>],</span><br><span class="line">     <span class="attr">newObj</span>:&#123;</span><br><span class="line">       <span class="attr">ss</span>:<span class="string">&quot;值&quot;</span>,</span><br><span class="line">       <span class="attr">ww</span>:&#123;</span><br><span class="line">         <span class="attr">nam</span>:<span class="string">&quot;夏栀&quot;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"> <span class="comment">//使用递归的方式实现数组、对象的深拷贝</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">deepClone1</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//判断拷贝的要进行深拷贝的是数组还是对象，是数组的话进行数组拷贝，对象的话进行对象拷贝</span></span><br><span class="line">   <span class="keyword">let</span> objClone = <span class="built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;;</span><br><span class="line">   <span class="comment">//进行深拷贝的不能为空，并且是对象或者是</span></span><br><span class="line">   <span class="keyword">if</span> (obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">     <span class="comment">// key属性名</span></span><br><span class="line">     <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">       <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">         <span class="keyword">if</span> (obj[key] &amp;&amp; <span class="keyword">typeof</span> obj[key] === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">如果obj[key] 是一个对象或值   那么就将值传进去 并进行赋值</span><br><span class="line">           objClone[key] = deepClone1(obj[key]);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           objClone[key] = obj[key];</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> objClone;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span>  newObj = deepClone1(obj)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="node爬虫"><a href="#node爬虫" class="headerlink" title="node爬虫"></a>node爬虫</h3><blockquote><p>爬取小说</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios  = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> jsdom = <span class="built_in">require</span>(<span class="string">&quot;jsdom&quot;</span>);   <span class="comment">// 用于处理后端html文件</span></span><br><span class="line"><span class="keyword">const</span> &#123;JSDOM&#125; = jsdom;         <span class="comment">// 获取jsdom对象    是后端能操作dom时 后端操作dom与前端操作是一样</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//请求地址</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="string">`https://www.biquwx.la/47_47090/3664656.html`</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 请求地址</span></span><br><span class="line">      axios.get(<span class="string">`<span class="subst">$&#123;index&#125;</span>`</span>).then(<span class="function">(<span class="params">res,err</span>)=&gt;</span>&#123;</span><br><span class="line">          <span class="comment">// 判断路径最后是否是html文件</span></span><br><span class="line">            <span class="keyword">let</span> result = index.endsWith(<span class="string">&quot;html&quot;</span>);</span><br><span class="line">          <span class="comment">// 转换成能使用后端操作的dom</span></span><br><span class="line">            <span class="keyword">const</span> dom = <span class="keyword">new</span> JSDOM(res.data);</span><br><span class="line">          <span class="comment">// 获取下一章的文件路径</span></span><br><span class="line">            index = dom.window.document.querySelectorAll(<span class="string">&quot;.bottem1 a&quot;</span>)[<span class="number">3</span>].getAttribute(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (result)&#123;</span><br><span class="line">                <span class="comment">// 获取文本内容</span></span><br><span class="line">                  <span class="keyword">const</span>  title = <span class="string">`&lt;h3&gt;<span class="subst">$&#123;dom.<span class="built_in">window</span>.<span class="built_in">document</span>.querySelector(<span class="string">&quot;h1&quot;</span>).textContent&#125;</span>&lt;/h3&gt;`</span>;</span><br><span class="line">                  <span class="keyword">const</span>  text = <span class="string">`<span class="subst">$&#123;title&#125;</span> &lt;p&gt;<span class="subst">$&#123;dom.<span class="built_in">window</span>.<span class="built_in">document</span>.querySelector(<span class="string">&quot;#content&quot;</span>).textContent&#125;</span>&lt;/p&gt;`</span>;</span><br><span class="line">                <span class="comment">// 内容文件写入 文件中      &#123;flag:&quot;a&quot;&#125;在原有的内容上添加</span></span><br><span class="line">                  fs.writeFile(<span class="string">&quot;./index.html&quot;</span>,text,&#123; <span class="string">&#x27;flag&#x27;</span>: <span class="string">&#x27;a&#x27;</span> &#125;,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(index,<span class="string">&quot;true&quot;</span>)</span><br><span class="line">                        fun()</span><br><span class="line">                  &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure><blockquote><p>爬取单个图片</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs  = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> axios  = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fc-ssl.duitang.com%2Fuploads%2Fitem%2F202005%2F20%2F20200520024521_zkkfs.jpg&amp;refer=http%3A%2F%2Fc-ssl.duitang.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1622870925&amp;t=5fab3f50615706cbd4930f73e68a7f01&quot;</span></span><br><span class="line">  ,&#123;<span class="attr">responseType</span>:<span class="string">&#x27;arraybuffer&#x27;</span>&#125;)  <span class="comment">// 返回格式</span></span><br><span class="line">  .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      fs.writeFile(<span class="string">&quot;./aa.png&quot;</span>,res.data,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;写入成功&quot;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>爬取图片</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs  = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> axios  = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> jsdom = <span class="built_in">require</span>(<span class="string">&quot;jsdom&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;JSDOM&#125; = jsdom;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">&quot;https://www.tupianzj.com/meinv/mm/nkmv/&quot;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dom = <span class="keyword">new</span> JSDOM(res.data);</span><br><span class="line">    <span class="comment">// 循环遍历节点 进行重新取值返回数组</span></span><br><span class="line">    <span class="keyword">let</span> arr = [...dom.window.document.querySelectorAll(<span class="string">&quot;img&quot;</span>)].map(<span class="function"><span class="params">item</span> =&gt;</span> item.src);</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 设置图片已流的形式写入</span></span><br><span class="line">      axios.get(item,&#123; <span class="attr">responseType</span>:<span class="string">&#x27;stream&#x27;</span>&#125;).then(<span class="function">(<span class="params">ress</span>)=&gt;</span>&#123;</span><br><span class="line">        ress.data.pipe(fs.createWriteStream(<span class="string">&quot;./66/&quot;</span>+index+<span class="string">&quot;.jpg&quot;</span>))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><blockquote><p>后端代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readfileDir</span>(<span class="params">res,url</span>)</span>&#123;</span><br><span class="line">  fs.readdir(<span class="string">&quot;./public/img&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,success</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = success.map(<span class="function"><span class="params">item</span>=&gt;</span>url+item)</span><br><span class="line">    res.send(result)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">&#x27;public&#x27;</span>));</span><br><span class="line">app.get(<span class="string">&quot;/img&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    readfileDir(res,req.headers.host+req.url)</span><br><span class="line">&#125;;);</span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&quot;执行成功&quot;</span>);&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件目录</span></span><br></pre></td></tr></table></figure><blockquote><p>前端代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        *&#123;<span class="attribute">margin</span>: <span class="number">0</span>;<span class="attribute">padding</span>: <span class="number">0</span>&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="css">            <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">240px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> result = <span class="function"><span class="keyword">function</span>  (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res,rej</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>:<span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">url</span>:<span class="string">&quot;http://localhost:3000/img/&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">success</span>(<span class="params">val</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          res(val)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">   &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  result().then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> fream = <span class="built_in">document</span>.createDocumentFragment();</span></span><br><span class="line"><span class="javascript">    res.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> dom = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="javascript">      dom.dataset.url = <span class="string">&quot;http://&quot;</span>+item;</span></span><br><span class="line"><span class="javascript">      fream.appendChild(dom);</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#box&quot;</span>)[<span class="number">0</span>].appendChild(fream);</span></span><br><span class="line"><span class="javascript">    init()</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> img = [...document.getElementsByTagName(<span class="string">&quot;img&quot;</span>)];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> clientH = getClient()</span></span><br><span class="line"><span class="javascript">    img.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(!item.dataset.url)<span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> result = clientH - item.getBoundingClientRect().top &gt; <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(result)&#123;</span></span><br><span class="line"><span class="javascript">          item.src = item.dataset.url;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">delete</span> item.dataset.url</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">getClient</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span>  <span class="built_in">document</span>.documentElement.clientHeight</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>,init)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            图片懒加载的原理</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                1.给每个图片都设置自定义属性data-image存放 图片的真正地址</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                2.页面在滚动时  检测每个图片的位置</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    如果图片在浏览器的可视区域之内 那就取出图片的自定义属性data-image的值</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    把该值赋给图片的src 这个时候图片才会根据src发起网络请求获取图片</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript"> */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令备忘录</title>
      <link href="/archives/46390b34.html"/>
      <url>/archives/46390b34.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <blockquote><p>本篇文章主要是收集个人遇到的有趣的git命令！</p></blockquote><h2 id="git-基本命令"><a href="#git-基本命令" class="headerlink" title="git 基本命令"></a>git 基本命令</h2><ul><li><p>1，初始化git ： git init</p></li><li><p>2，添加至缓存区 ：git add &lt;文件&gt; 如果添加当前文件夹所有 则 git add .</p><p>​      删除缓存区文件 ： git restore —staged &lt;文件&gt;</p><p>​                                       git reset HEAD &lt;文件&gt;</p></li><li><p>3，查看当前文件的状态 ：git status</p></li><li><p>4，提交文件 ： git commit [-m,-am] ‘描述’  -am 省略git add  步骤</p></li><li><p>5，查看提交记录  ： git log</p></li><li><p>6，使内容成一行显示 ：—pretty=oneline</p></li><li><p>7，查看文件与仓库的文件内容区别 ：git diff HEAD — &lt;文件&gt;</p></li><li><p>8，版本回退 ：git reset —hard HEAD^  回退一个版本  HEAD^^ 回退两个版本  HEAD~2 回退两个版本</p><p>​      git  reset —hard 唯一标识  跳转至唯一标识所在版本</p></li><li><p>9，查看所有的日志 ：git reflog</p></li><li>10 ，显示本地仓库文件目录 ： git ls-files</li><li>11，拉取文件 git pull</li><li>删除本地仓库文件的方式：<ul><li>在工作目录中删除文件</li><li>git add 添加删除的目录至缓存区</li><li>提交删除</li></ul></li><li><p>通过git rm 删除</p><ul><li>git rm &lt;文件&gt;</li></ul></li><li><p>添加远程仓库</p><ul><li>git remote add ‘名称’ 仓库地址</li></ul></li><li><p>第一次推送到远程仓库</p><ul><li>git push -u ‘名称’ master</li><li>git push -f # 强制推送，主要用于本地仓库回退到指定版本后，让远程仓库与本地仓库同步【也可以本地仓库回退后更新了内容，再使用此命令】</li><li>其他推送 git push</li></ul></li></ul><h2 id="git-分支操作"><a href="#git-分支操作" class="headerlink" title="git 分支操作"></a>git 分支操作</h2><h3 id="切换到指定分支"><a href="#切换到指定分支" class="headerlink" title="切换到指定分支"></a>切换到指定分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout branchname</span><br></pre></td></tr></table></figure><h3 id="查看本地所有分支，并标记当前所在分支"><a href="#查看本地所有分支，并标记当前所在分支" class="headerlink" title="查看本地所有分支，并标记当前所在分支"></a>查看本地所有分支，并标记当前所在分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h3 id="查看本地分支加远程分支"><a href="#查看本地分支加远程分支" class="headerlink" title="查看本地分支加远程分支"></a>查看本地分支加远程分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h3 id="新建分支并切换到新建分支"><a href="#新建分支并切换到新建分支" class="headerlink" title="新建分支并切换到新建分支"></a>新建分支并切换到新建分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b newbranch</span><br></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge branchname    合并分支，必须先切换到主分支上</span><br></pre></td></tr></table></figure><h3 id="重命名分支"><a href="#重命名分支" class="headerlink" title="重命名分支"></a>重命名分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m | -M oldbranch newbranch   -M强制重命名(会删掉一开始存在的分支)</span><br></pre></td></tr></table></figure><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d | -D branch    -D强制删除</span><br></pre></td></tr></table></figure><h2 id="推送本地分支至远程"><a href="#推送本地分支至远程" class="headerlink" title="推送本地分支至远程"></a>推送本地分支至远程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin newbranch</span><br></pre></td></tr></table></figure><h2 id="删除远程分支（保留本地分支）"><a href="#删除远程分支（保留本地分支）" class="headerlink" title="删除远程分支（保留本地分支）"></a>删除远程分支（保留本地分支）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin :remotebranch</span><br><span class="line">或</span><br><span class="line">git branch -d -r branchname   删除远程branchname分支</span><br></pre></td></tr></table></figure><h2 id="拉取远程分支，在本地创建分支"><a href="#拉取远程分支，在本地创建分支" class="headerlink" title="拉取远程分支，在本地创建分支"></a>拉取远程分支，在本地创建分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b local_branch origin/remote_branch</span><br></pre></td></tr></table></figure><h2 id="获取远程分支最新状态"><a href="#获取远程分支最新状态" class="headerlink" title="获取远程分支最新状态"></a>获取远程分支最新状态</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><ul><li>添加一个标签 git tag tag_name   不添加默认信息 为最后一次提交的描述信息</li><li>给指定版本添加标签 git tag tag_name ‘唯一标识’</li><li>git tag tag_name -m ‘信息’</li><li>git tag -d tag_name  删除一个标签</li><li>git push origin tag_name 推送标签至仓库</li><li>git push origin —tags  推送所有标签</li><li>git push origin :refs/tages/tag_name 删除远程仓库的一个标签</li></ul><h2 id="修改本地仓库的默认分支名"><a href="#修改本地仓库的默认分支名" class="headerlink" title="修改本地仓库的默认分支名"></a>修改本地仓库的默认分支名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global init.defaultBranch main</span><br></pre></td></tr></table></figure><h2 id="git修改已提交信息-会进入vim模式，修改完，重新推送即可"><a href="#git修改已提交信息-会进入vim模式，修改完，重新推送即可" class="headerlink" title="git修改已提交信息[会进入vim模式，修改完，重新推送即可]"></a>git修改已提交信息[会进入vim模式，修改完，重新推送即可]</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h2 id="git克隆指定分支到指定文件夹下"><a href="#git克隆指定分支到指定文件夹下" class="headerlink" title="git克隆指定分支到指定文件夹下"></a>git克隆指定分支到指定文件夹下</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master 仓库地址 文件夹B/文件夹C</span><br></pre></td></tr></table></figure><p>【注意】是以你打开git所在目录为准去找文件夹B/文件夹C，没有就会创建文件夹</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习总结</title>
      <link href="/archives/8869ea7f.html"/>
      <url>/archives/8869ea7f.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <h2 id="git-学习【本地仓库，版本管理】"><a href="#git-学习【本地仓库，版本管理】" class="headerlink" title="git 学习【本地仓库，版本管理】"></a>git 学习【本地仓库，版本管理】</h2><ol><li><p>安装git软件 -&gt; 测试是否安装成功</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git -<span class="literal">-version</span></span><br></pre></td></tr></table></figure></li><li><p>全局配置 用户名和邮箱</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">配置用户名和邮箱【赋值】</span><br><span class="line">git config -<span class="literal">-global</span> user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config -<span class="literal">-global</span> user.email <span class="string">&quot;email@example.com&quot;</span></span><br><span class="line"></span><br><span class="line">获取用户名和邮箱【不赋值===取值】</span><br><span class="line">git config -<span class="literal">-global</span> user.name</span><br><span class="line">git config -<span class="literal">-global</span> user.email</span><br></pre></td></tr></table></figure></li><li><p>搭建项目 (如果已经有项目 =&gt; 跳过搭建项目直接配置<code>.gitignore</code>文件)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">配置 .gitignore文件  =&gt; 该文件直接建在站点根目录，以根目录为站点，忽视其它文件，不提交到暂存区</span><br><span class="line">不想忽略也可以不配置该文件</span><br><span class="line"></span><br><span class="line">++++++++++++++.gitignore模板+++++++++++++++</span><br><span class="line">.DS_Store</span><br><span class="line">node_modules</span><br><span class="line">/dist</span><br><span class="line">/mtk/url.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># local env files</span></span><br><span class="line">.env.local</span><br><span class="line">.env.*.local</span><br><span class="line"></span><br><span class="line"><span class="comment"># Log files</span></span><br><span class="line">npm<span class="literal">-debug</span>.log*</span><br><span class="line">yarn<span class="literal">-debug</span>.log*</span><br><span class="line">yarn<span class="literal">-error</span>.log*</span><br><span class="line"></span><br><span class="line"><span class="comment"># Editor directories and files</span></span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br><span class="line">*.sw?</span><br></pre></td></tr></table></figure></li><li><p>对项目进行版本管理</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>). 初始化本地仓库 (对本地的项目进行管理  =&gt; 项目所在根目录) </span><br><span class="line">   git init 【最后面扩展：谈一下其他类似命令如npm init】</span><br><span class="line">   初始化之后会在项目根目录出一个.git文件，它就是我们的本地仓库</span><br><span class="line">   【注意：如果成功了没有该文件夹，vscode的文件隐藏了.git文件 ==&gt; <span class="number">6</span>.vscode设置显示.git文件方法img】</span><br><span class="line">     </span><br><span class="line">(<span class="number">2</span>). 工作区 提交到 暂存区</span><br><span class="line">   </span><br><span class="line">git add  index.html 单文件提交 (每次提交一个 =&gt; 麻烦)</span><br><span class="line">git add  .          提交所有代码 (相较于上个版本 更改的代码)</span><br><span class="line">    </span><br><span class="line">(<span class="number">3</span>). 暂存区  提交到  版本区</span><br><span class="line">git commit <span class="literal">-m</span>  <span class="string">&#x27;xxx&#x27;</span>     // 一定要有提交信息</span><br><span class="line">    </span><br><span class="line">(<span class="number">4</span>). 查看提交日志</span><br><span class="line">  git log   查看提交日志 (版本创建之初到当前版本(HEAD所在位置)的提交日志)</span><br><span class="line">    </span><br><span class="line">(<span class="number">5</span>). 查看文件状态</span><br><span class="line">   git status   查看文件状态</span><br><span class="line">    </span><br><span class="line">   工作区修改 还未提交 暂存区  =&gt; 红色 </span><br><span class="line">   暂存区     还未提交 版本区  =&gt; 绿色</span><br><span class="line">    </span><br><span class="line">(<span class="number">6</span>). 后续重复  (<span class="number">2</span>)-(<span class="number">5</span>) 即可 =&gt; 不断地添加/修改代码  =&gt; 提交到版本区</span><br></pre></td></tr></table></figure></li><li><p>版本回退 </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-<span class="literal">-hard</span>强制的意思</span><br><span class="line">git reset -<span class="literal">-hard</span>  HEAD^   回退前一个版本</span><br><span class="line">git reset -<span class="literal">-hard</span>  HEAD^^  回退前两个版本</span><br><span class="line">git reset -<span class="literal">-hard</span>  HEAD~n  回退前n个版本</span><br><span class="line">    </span><br><span class="line">git reset -<span class="literal">-hard</span>  版本号(至少前<span class="number">5</span>位)   回退到指定版本</span><br><span class="line">    </span><br><span class="line">git reflog   查看操作日志 (版本创建之初到当前版本的所有操作日志)</span><br><span class="line"></span><br><span class="line">git push <span class="operator">-f</span> <span class="comment"># 强制推送，主要用于本地仓库回退到指定版本后，让远程仓库与本地仓库同步【也可以本地仓库回退后更新了内容，再使用此命令】</span></span><br></pre></td></tr></table></figure></li><li><p>vscode设置显示.git文件方法img</p><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10039.png" alt="vscode不显示git文件" style="zoom:80%;" /></p></li><li><p>todo</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首次创建本地仓库并推送成功之后，这时候本地代码又发生变更，想推送远程仓库该如何操作？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 添加到暂存区 =&gt; 英文状态下的点，表示添加所有文件，也可以添加指定文件，把点替换掉即可</span><br><span class="line">git add .</span><br><span class="line"># 提交到本地仓库 =&gt; 可以附加简短的提交信息</span><br><span class="line">git commit -m &#x27;你想添加的信息&#x27;</span><br><span class="line"># 推送到远程仓库 =&gt; origin是远程仓库别名，没有实际意义[大部分情况下远程仓库连接一次之后就不需要再进行连接了]</span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><pre><code>* git init  * 初始化一个新的本地仓库，得到的是.git文件 =&gt; 本地仓库【版本库】* npm init  * 初始化项目，得到的是package.json文件 =&gt; 它主要是用来记录我们项目所用到包详细信息  * 使用npm init初始化项目还有一个好处就是在进行项目传递的时候不需要将项目依赖包一起发送给对方，对方在接受到你的项目之后再执行npm install就可以将项目依赖全部下载到项目里  * npm init -y    * -y 的含义：yes的意思，在init的时候省去了敲回车的步骤，生成的默认的package.json* npm install  * 安装项目所依赖的包，得到的是node_modules文件</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备忘录</title>
      <link href="/archives/27d394ca.html"/>
      <url>/archives/27d394ca.html</url>
      
        <content type="html"><![CDATA[<p><center style="font-size: 24px;">📝备忘录</center></p><blockquote><p>仅记录个人未完成、已完成的任务</p></blockquote><details class="folding-tag" purple open><summary> 时间轴 </summary>              <div class='content'>              <h2 id="2022-09-30"><a href="#2022-09-30" class="headerlink" title="2022-09-30"></a>2022-09-30</h2><ol><li>评论区表情包换了一下，以后有好看的表情包再加上去吧👩🏻‍💻</li><li>找到一套gif，好多，但是感觉加上去不对劲，评论区岂不变成斗图的地方了😳</li></ol><h2 id="2022-09-29"><a href="#2022-09-29" class="headerlink" title="2022-09-29"></a>2022-09-29</h2><ol><li>自闭的一天，开卷开卷⏰</li><li>已完成任务<div class='checkbox green checked'><input type="checkbox" checked="checked"/>         <p>小程序文章终于干完了👹</p>         </div></li></ol><h2 id="2022-09-27"><a href="#2022-09-27" class="headerlink" title="2022-09-27"></a>2022-09-27</h2><ol><li>最近不打算折腾了，QQ、微信图标在PC端点击好像没什么问题，还缺一个网站监控面板，以后有时间就折腾吧</li><li>小程序最近一直再写，这两天把笔记整理出来</li><li>认真学习新的技术了，卷你们😃</li></ol><h2 id="2022-09-25"><a href="#2022-09-25" class="headerlink" title="2022-09-25"></a>2022-09-25</h2><ol><li>正在进行的任务<div class='checkbox'><input type="checkbox" />         <p>处理移动端点击QQ、微信图标不唤醒QQ、微信添加好友的问题</p>         </div></li><li>已完成任务<div class='checkbox green checked'><input type="checkbox" checked="checked"/>         <p>添加多色图标</p>         </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>         <p>添加RSS订阅</p>         </div></li><li>新增功能<div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>         <p>新增站点动态title</p>         </div></li></ol><h2 id="2022-09-24"><a href="#2022-09-24" class="headerlink" title="2022-09-24"></a>2022-09-24</h2><ol><li>正在进行的任务<div class='checkbox'><input type="checkbox" />         <p>添加多色图标</p>         </div><div class='checkbox'><input type="checkbox" />         <p>添加RSS订阅</p>         </div></li></ol><h2 id="2022-09-22"><a href="#2022-09-22" class="headerlink" title="2022-09-22"></a>2022-09-22</h2><ol><li>本来想试下时间轴，就配置了一下外挂标签，结果<code>butterfly</code>主题版本太低了，目前也很想升级但是要改动的地方太多了！</li><li>另外其中出现的有个编译问题，无法识别tag<code>如</code>timeline`<ul><li>插件版<code>v1.0.16</code>以后，为避免与<code>Butterfly_v4.0+</code>版本中的<code>timeline</code>外挂标签冲突，已经移除了插件内的<code>timeline</code>外挂标签，请低于<code>Butterfly_v4.0</code>的用户升级主题或安装<code>1.0.15</code>版本的外挂标签插件，或者自行添加<code>timeline.js</code>和<code>timeline.styl</code>文件至对应文件夹。请使用了原有<code>timeline</code>外挂标签的用户受累替换语法格式。<code>Butterfly_v4.0+</code>自带的<code>timeline</code>外挂标签样式更加好看。语法语意也更加清晰。</li></ul></li><li>安装主题最好选择<code>git clone</code>方式，最初使用的<code>npm install</code>方式安装的主题，后面又搭配<code>github action</code>部署到服务器，改了主题源码跟没改一样，很多优化、想加的动画【其实想整个迪迦变身的加载动画~】都没法加上去，坐等下次换服务器，重新搭建一个<code>Blog</code></li><li>未完成任务<div class='checkbox times red checked'><input type="checkbox" checked="checked"/>         <p>想单独添加个哔哔页面，但是leancloud默认域名不提供大陆服务了，等有时间再折腾吧🥱</p>         </div></li><li>已完成任务<div class='checkbox green checked'><input type="checkbox" checked="checked"/>         <p>评论区魔改</p>         </div></li><li>新增功能<div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>         <p>添加了在线聊天</p>         </div></li></ol><h2 id="2022-09-16"><a href="#2022-09-16" class="headerlink" title="2022-09-16"></a>2022-09-16</h2><ol><li>待输出文章<div class='checkbox times red checked'><input type="checkbox" checked="checked"/>         <p>移动端适配[淘宝、网易和插件适配]</p>         </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>         <p>准备出一篇手把手教学微信小程序项目实战文章</p>         </div></li><li>未完成任务<div class='checkbox times red checked'><input type="checkbox" checked="checked"/>         <p>想在导航栏添加资源栏，分享个人收集的一些资源</p>         </div></li><li>已完成任务<div class='checkbox green checked'><input type="checkbox" checked="checked"/>         <p>图库</p>         </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>         <p>信笺</p>         </div></li></ol><h2 id="2022-09-07"><a href="#2022-09-07" class="headerlink" title="2022-09-07"></a>2022-09-07</h2><ol><li>本站未完成任务<div class='checkbox times red checked'><input type="checkbox" checked="checked"/>         <p>网站监控面板</p>         </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>         <p>音乐界面</p>         </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>         <p>图库</p>         </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>         <p>信笺</p>         </div></li><li>本站已完成任务<div class='checkbox green checked'><input type="checkbox" checked="checked"/>         <p>相册</p>         </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>         <p>追番</p>         </div></li></ol><h2 id="2021-10-18"><a href="#2021-10-18" class="headerlink" title="2021-10-18"></a>2021-10-18</h2><p>hello world！<br>于2021年10月18号，本站建立成功！</p>              </div>            </details>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/archives/b37651.html"/>
      <url>/archives/b37651.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><mark class="hl-label green">若文章有误，欢迎读者留言反馈</mark> <blockquote><p>hexo搭配butterfly主题搭建博客</p></blockquote><h2 id="一、hexo的安装"><a href="#一、hexo的安装" class="headerlink" title="一、hexo的安装"></a>一、hexo的安装</h2><mark class="hl-label pink">以下命令，我是在cmd窗口下输入的</mark> <ul><li><p>全局安装hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure></li><li><p>查看hexo版本，通过这个命令来判断hexo是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure></li><li><p>初始化你的博客文件夹</p><ul><li>这里记得进入一个你要存放博客的目录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init coding327.github.io</span><br></pre></td></tr></table></figure></li><li><p>进入到你的博客文件夹下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd 你的博客文件夹</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>运行你的博客，本地预览</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><ul><li>在你的浏览器输入localhost:4000，回车即可</li></ul></li></ul><mark class="hl-label pink">注意：终端的位置，切换到对应的目录下</mark> <hr><h2 id="二、如何将博客发布到你的github"><a href="#二、如何将博客发布到你的github" class="headerlink" title="二、如何将博客发布到你的github"></a>二、如何将博客发布到你的github</h2><ul><li><p>首先你需要准备一个github账户，这里不细说，直接从创建仓库开始</p><ul><li>账户旁边加号点击，选择<code>new repository</code>，然后<code>Repository name</code>格式必须是<code>你的github账户名.github.io</code>，滑倒最下面，点击<code>create repository</code></li></ul></li><li><p>为你的博客配置一下git信息</p><ul><li><p>在你的cmd窗口下输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;github账户名&quot;</span><br><span class="line">git config --global user.email &quot;注册github时你所使用的邮箱&quot;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用编辑器打开你的博客文件夹</p><ul><li><p>进入根目录下的_config.yml下，滑倒最下面配置一下deploy，repo选择的是ssh,之前配过密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: &#x27;git@github.com:coding327/coding327.github.io.git&#x27;</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li><p>安装一下插件  { % label 我是在cmd窗口下输入的 pink % }</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>这时可以将你的博客文件夹上传到github的仓库上面了</p><ul><li><p>清除一下缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl 或者 hexo clean</span><br></pre></td></tr></table></figure></li><li><p>上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li><li><p>刷新一下，你刚刚上传的代码就已经成功了，然后右边有个<code>Settings</code>点击，找到下面<code>GitHub Pages</code>，选择<code>Check it out here</code>,这样你的网站就已经发布出去了。</p></li></ul></li></ul></li></ul><hr><h2 id="三、简单讲解一下博客目录（重点讲一下框架的配置文件及hexo命令）"><a href="#三、简单讲解一下博客目录（重点讲一下框架的配置文件及hexo命令）" class="headerlink" title="三、简单讲解一下博客目录（重点讲一下框架的配置文件及hexo命令）"></a>三、简单讲解一下博客目录（重点讲一下框架的配置文件及hexo命令）</h2><ul><li><p>根目录下有两个.yml文件</p><ul><li>_config.yml是框架的配置文件</li><li>_config.landscape.yml是主题的配置文件</li><li>source文章一般都放在这个文件夹里面</li></ul></li><li><p>缩进问题？</p><ul><li>.yml文件里面尤其注意缩进，包裹的是两个空格，而冒号后面是一个空格，缩进错了，整个项目也会报错（导致博客无法运行）。</li></ul></li><li><p>需要更改的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: &quot;black jack&#x27;s blog&quot;</span><br><span class="line">subtitle: &#x27;Welcome to my blog&#x27;</span><br><span class="line">description: &#x27;有时正是无人看好之人，成就了无人敢想之事&#x27;</span><br><span class="line"># 下面这个方便搜索引擎查找</span><br><span class="line">keywords: 博客</span><br><span class="line">author: black jack</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: &#x27;&#x27;</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: https://coding327.github.io</span><br></pre></td></tr></table></figure></li><li><p>hexo命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 新建一个文件夹，在source/_posts/下</span><br><span class="line">hexo n &quot;第一篇文章&quot;</span><br></pre></td></tr></table></figure><ul><li><p>在这个md文件里随意输入一些内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 重新生成一下博客</span><br><span class="line">hexo g</span><br><span class="line"># 运行博客，进行预览</span><br><span class="line">hexo s 或者 hexo server</span><br><span class="line"># 上传到github仓库，注意一般是先清除缓存，生成，再预览没问题，就上传</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul></li><li><p>总结一下，框架配置文件只需要修改3处：</p><ul><li>site</li><li>url</li><li>deploy</li></ul></li></ul><hr><h2 id="四、主题配置-以butterfly为例"><a href="#四、主题配置-以butterfly为例" class="headerlink" title="四、主题配置-以butterfly为例"></a>四、主题配置-以butterfly为例</h2><ul><li><p>github上搜索butterfly，找到jerryc127/hexo-theme-butterfly，点击进去，往下滑，找到Docs: 📖 <a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly Docs</a>，阅读他的文档。</p><ul><li><p>这里以npm安装为例</p><ul><li><p>此方法只支持 Hexo 5.0.0 以上版本，package.json可以查看hexo的版本</p><p>通过 npm 安装并不会在 themes 里生成主题文件夹，而是在 node_modules 里生成</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vscode的终端下输入</span><br><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure></li><li><p>框架配置文件里面修改theme为butterfly</p></li><li><p>如果你没有 pug 以及 stylus 的渲染器，请安装下面这个插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line"></span><br><span class="line"># 清理一下缓存，生成一下，运行</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ul></li><li><p>标签页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><ul><li><p>你会找到source/tags/index.md这个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签页</span><br><span class="line">date: 2021-10-17 15:37:13</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">top_img: https://z3.ax1x.com/2021/10/17/5tfpdJ.jpg</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>分类页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><ul><li><p>你会找到source/categories/index.md这个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2021-10-18 20:05:51</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">top_img: https://z3.ax1x.com/2021/10/17/5tfpdJ.jpg</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>友链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page link</span><br></pre></td></tr></table></figure><ul><li><p>你会找到source/link/index.md这个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友链</span><br><span class="line">date: 2021-10-18 20:13:18</span><br><span class="line">type: &quot;link&quot;</span><br><span class="line">top_img: https://z3.ax1x.com/2021/10/17/5tfpdJ.jpg</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>友情链接添加</p><ul><li><p>在Hexo博客目录中的source/_data（如果没有 _data 文件夹，请自行创建），创建一个文件link.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">- class_name: 友情链接</span><br><span class="line">  class_desc: 那些人，那些事</span><br><span class="line">  link_list:</span><br><span class="line">    - name: Hexo</span><br><span class="line">      link: https://hexo.io/zh-tw/</span><br><span class="line">      avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span><br><span class="line">      descr: 快速、简单且强大的网誌框架</span><br><span class="line"></span><br><span class="line">- class_name: 网站</span><br><span class="line">  class_desc: 值得推荐的网站</span><br><span class="line">  link_list:</span><br><span class="line">    - name: Youtube</span><br><span class="line">      link: https://www.youtube.com/</span><br><span class="line">      avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span><br><span class="line">      descr: 视频网站</span><br><span class="line">    - name: Weibo</span><br><span class="line">      link: https://www.weibo.com/</span><br><span class="line">      avatar: https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span><br><span class="line">      descr: 中国最大社交分享平台</span><br><span class="line">    - name: Twitter</span><br><span class="line">      link: https://twitter.com/</span><br><span class="line">      avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span><br><span class="line">      descr: 社交分享平台</span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置butterfly文件</p><ul><li>根目录下创建_config.butterfly.yml文件，将在/node_modules/hexo-theme-butterfly/_config.yml里的内容全部copy，粘贴到_config.butterfly.yml文件里</li></ul></li><li><p>404页面</p><ul><li><p>在butterfly主题配置文件里面修改，ctrl+F键快捷查找error_404</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># A simple 404 page</span><br><span class="line">error_404:</span><br><span class="line">  enable: true</span><br><span class="line">  subtitle: &quot;页面没有找到&quot;</span><br><span class="line">  background:</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="五、结合git版本控制使用"><a href="#五、结合git版本控制使用" class="headerlink" title="五、结合git版本控制使用"></a>五、结合git版本控制使用</h2><ul><li><p>为什么使用git?</p><ul><li>git能回滚，就算本地代码没了，利用git也可以恢复。</li></ul></li><li><p>为什么新建私有仓库？</p><ul><li><p>🚦现在，可以把hexo源代码放在私有仓库，把hexo生成的网站代码放在公共仓库里了。更牛逼的是，可以使用github action，就是推送到github仓库时，就触发部署，这样，就省去了本地hexo d -g的过程了。</p><ul><li>注意：新建一个私有仓库存放博客源码，而网站生成的网站代码存放到你的github账户名.github.io</li></ul></li><li>个人搭建时没注意，博客源码和生成网站源码全部推送到github账户名.github.io，这不就是把源码也推送到公开仓库了吗？？？？后面也是报错<code>error: failed to push some refs to ******</code>，于是网上查了一下输入<code>git pull --rebase origin main</code>，就成功解决了，意思就是分开的分支都合并到属于同级的节点上（注意是main分支），然后重新推送<code>git push -u origin main</code>，利用<code>hexo g</code>重新生成网站文件，<code>hexo d</code>部署到博客仓库上面<ul><li>百度查找主要是来源于：网上说是README.md这个文件不在本地仓库，但是我创建仓库都不带创建这个的，执行上面命令，本地仓库也找不到该文件，说明不是这个问题，远程仓库也只有一个main，那就是本地仓库可能出现一个分支，分支推送到main，出现了报错，使用<code>git branch</code>查看所有分支，✳标示当前分支，切换分支使用<code>git checkout 某个分支名</code></li><li>个人分析原因：因为我把生成网站源码和博客源码全部放在一个仓库，由于前面最开始使用了<code>hexo d</code>部署到远程仓库，然后又用git一系列命令，造成本地仓库文件发生变更，而远程仓库里的文件肯定是和现在本地仓库文件有异，于是没有办法只能pull（拉取）远程仓库里本地没有的文件再将他们全部合并，一起推送到远程仓库！！</li><li>先git推送到远程私有仓库，再hexo部署到github的博客仓库上面去，有时候可能网络原因推送、部署有一定延迟，访问博客网址可能会出现你刚修改的样式依旧不显示，你可以尝试多部署几次就🆗了！</li></ul></li></ul></li><li><p>git的使用</p><ul><li><p>创建一个.gitignore文件 <mark class="hl-label pink">上传时过滤掉以下文件</mark> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">.vscode/</span><br><span class="line">/.idea/</span><br><span class="line">.deploy_git*/</span><br><span class="line">.idea</span><br><span class="line">themes/butterfly/.git</span><br></pre></td></tr></table></figure></li><li><p>初始化本地仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>添加所有文件到暂存区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li><li><p>提交到本地仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;feat: 初始化仓库&quot;</span><br></pre></td></tr></table></figure></li><li><p>创建一个主分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -M main</span><br></pre></td></tr></table></figure></li><li><p>本地仓库连接远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 私有仓库ssh地址</span><br></pre></td></tr></table></figure></li><li><p>推送到远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main</span><br><span class="line"># 这里突然报错</span><br><span class="line">error: failed to push some refs to &#x27;私有仓库地址&#x27;</span><br><span class="line"># 解决方案如下</span><br><span class="line">git pull --rebase origin main</span><br><span class="line"># 再次推送</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li><li><p>假设本地磁盘坏了，怎么使用git恢复我们的博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/coding327/Myblog.git  【备注：我是单独又开了一个私人仓库存放博客源码！！】</span><br></pre></td></tr></table></figure><ul><li>clone完之后，由于私人仓库名和咱们部署的仓库名不一致，所以这里根据需要进行更改</li><li><p>【Myblog =&gt; coding327.github.io】</p></li><li><p>个人习惯在vscode下操作，所以直接使用vscode打开该文件，然后打开终端来安装依赖(注意目录必须是项目根目录)</p></li><li>【也可以使用cmd窗口进入该文件夹，安装一下依赖】</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line"># 最开始是不用清除缓存的【注意生成之后会有缓存每次提交暂存区记得清除一下，修改了文件必须放到hexo g之前执行】</span><br><span class="line"># hexo clean</span><br><span class="line"># 修改完文件注意先推送到远程私人仓库，再进行生成和部署</span><br><span class="line"># 提交到暂存区</span><br><span class="line">git add .</span><br><span class="line"># 提交到本地仓库</span><br><span class="line">git commit -m &quot;feat: xxx&quot;</span><br><span class="line"># 如果没有连接过远程仓库就需要连接一下远程仓库【可以直接推送，不过需要验证，有魔法还是很方便！！(origin只是远程仓库在本地的一个别名)】</span><br><span class="line">git remote add origin 私有仓库ssh地址</span><br><span class="line">#补充一下怎么查看当前仓库远程连接地址，更换可以通过设置覆盖或删除再添加或修改.git目录下的config里面的url：git remote -v</span><br><span class="line"># 推送到远程仓库即可</span><br><span class="line">【若使用了 -u 选项[强制的意思]，后续的 git push 指令默认 repoName 与 currentBranchName，可省略指令和参数】</span><br><span class="line">git push -u origin main</span><br><span class="line"># 生成</span><br><span class="line">hexo g</span><br><span class="line"># 运行一下预览【非必要】</span><br><span class="line">hexo s</span><br><span class="line"># 部署到github仓库</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="当你看到这应该已经能搭建出博客的模型了，如果你学过一点js、node-js，这里我们可以简化我们的命令"><a href="#当你看到这应该已经能搭建出博客的模型了，如果你学过一点js、node-js，这里我们可以简化我们的命令" class="headerlink" title="当你看到这应该已经能搭建出博客的模型了，如果你学过一点js、node.js，这里我们可以简化我们的命令"></a>当你看到这应该已经能搭建出博客的模型了，如果你学过一点js、node.js，这里我们可以简化我们的命令</h2><blockquote><p>git的三步命令不变，但是我推荐使用ssh仓库地址，不建议使用https的地址<br>hexo命令简化npm run serve：如果你想预览，最后再部署到github上面，那么把最后一个命令替换为hexo server，最后再hexo d</p></blockquote><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10006a.png" alt="10006a"></p>]]></content>
      
      
      <categories>
          
          <category> butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/4a17b156.html"/>
      <url>/archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<h2 id="博客终于搭建成功了！！！"><a href="#博客终于搭建成功了！！！" class="headerlink" title="博客终于搭建成功了！！！"></a>博客终于搭建成功了！！！</h2><p><img src= "https://img.coding327.top/blogImg/10049.gif" data-lazy-src="https://img.coding327.top/blogImg/10001.jpg" alt="10001"></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
